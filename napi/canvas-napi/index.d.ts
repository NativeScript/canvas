/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export type JSWebGLRenderingContext = WebGLRenderingContext;
export declare class WebGLRenderingContext {
	static offscreen(width: number, height: number, version: number, alpha: boolean, antialias: boolean, depth: boolean, failIfMajorPerformanceCaveat: boolean, powerPreference: number, premultipliedAlpha: boolean, preserveDrawingBuffer: boolean, stencil: boolean, desynchronized: boolean, xrCompatible: boolean, isCanvas: boolean): JsWebGlRenderingContext;
	clearColor(red: number, green: number, blue: number, alpha: number): void;
	clear(mask: number): void;
	flush(): void;
	toDataURL(format: string, encoderOptions?: number | undefined | null): string;
	get COLOR_BUFFER_BIT(): number;
}
export type JSCanvasRenderingContext2D = CanvasRenderingContext2D;
export declare class CanvasRenderingContext2D {
	static withCpu(width: number, height: number, density: number, alpha: boolean, fontColor: number, ppi: number, direction: number): JsCanvasRenderingContext2D;
	get shadowColor(): string;
	set shadowColor(color: string);
	get globalAlpha(): number;
	set globalAlpha(alpha: number);
	get direction(): string;
	set direction(direction: string);
	get imageSmoothingEnabled(): boolean;
	set imageSmoothingEnabled(enabled: boolean);
	get fillStyle(): unknown;
	set fillStyle(style: string | CanvasPattern | CanvasGradient);
	get strokeStyle(): unknown;
	set strokeStyle(style: string | CanvasPattern | CanvasGradient);
	get font(): string;
	set font(value: string);
	fillRect(x: number, y: number, width: number, height: number): void;
	strokeRect(x: number, y: number, width: number, height: number): void;
	toDataURL(format: string, encoderOptions?: number | undefined | null): string;
}
export type JSCanvasPattern = CanvasPattern;
export declare class CanvasPattern {}
export type JSCCanvasGradient = CanvasGradient;
export declare class CanvasGradient {}
