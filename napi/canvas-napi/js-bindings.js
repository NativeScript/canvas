/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

import { createRequire } from 'module';

const require = createRequire(import.meta.url);

const { existsSync, readFileSync } = require('fs');
const { join, dirname } = require('path');

const { fileURLToPath } = require('url');

// Get the current file path
const __filename = fileURLToPath(import.meta.url);

// Get the directory name
const __dirname = dirname(__filename);

const { platform, arch } = process;

let nativeBinding = null;
let localFileExisted = false;
let loadError = null;

function isMusl() {
	// For Node 10
	if (!process.report || typeof process.report.getReport !== 'function') {
		try {
			const lddPath = require('child_process').execSync('which ldd').toString().trim();
			return readFileSync(lddPath, 'utf8').includes('musl');
		} catch (e) {
			return true;
		}
	} else {
		const { glibcVersionRuntime } = process.report.getReport().header;
		return !glibcVersionRuntime;
	}
}

switch (platform) {
	case 'android':
		switch (arch) {
			case 'arm64':
				localFileExisted = existsSync(join(__dirname, 'canvas-napi.android-arm64.node'));
				try {
					if (localFileExisted) {
						nativeBinding = require('./canvas-napi.android-arm64.node');
					} else {
						nativeBinding = require('@nativescript/canvas-napi-android-arm64');
					}
				} catch (e) {
					loadError = e;
				}
				break;
			case 'arm':
				localFileExisted = existsSync(join(__dirname, 'canvas-napi.android-arm-eabi.node'));
				try {
					if (localFileExisted) {
						nativeBinding = require('./canvas-napi.android-arm-eabi.node');
					} else {
						nativeBinding = require('@nativescript/canvas-napi-android-arm-eabi');
					}
				} catch (e) {
					loadError = e;
				}
				break;
			default:
				throw new Error(`Unsupported architecture on Android ${arch}`);
		}
		break;
	case 'win32':
		switch (arch) {
			case 'x64':
				localFileExisted = existsSync(join(__dirname, 'canvas-napi.win32-x64-msvc.node'));
				try {
					if (localFileExisted) {
						nativeBinding = require('./canvas-napi.win32-x64-msvc.node');
					} else {
						nativeBinding = require('@nativescript/canvas-napi-win32-x64-msvc');
					}
				} catch (e) {
					loadError = e;
				}
				break;
			case 'ia32':
				localFileExisted = existsSync(join(__dirname, 'canvas-napi.win32-ia32-msvc.node'));
				try {
					if (localFileExisted) {
						nativeBinding = require('./canvas-napi.win32-ia32-msvc.node');
					} else {
						nativeBinding = require('@nativescript/canvas-napi-win32-ia32-msvc');
					}
				} catch (e) {
					loadError = e;
				}
				break;
			case 'arm64':
				localFileExisted = existsSync(join(__dirname, 'canvas-napi.win32-arm64-msvc.node'));
				try {
					if (localFileExisted) {
						nativeBinding = require('./canvas-napi.win32-arm64-msvc.node');
					} else {
						nativeBinding = require('@nativescript/canvas-napi-win32-arm64-msvc');
					}
				} catch (e) {
					loadError = e;
				}
				break;
			default:
				throw new Error(`Unsupported architecture on Windows: ${arch}`);
		}
		break;
	case 'darwin':
		localFileExisted = existsSync(join(__dirname, 'canvas-napi.darwin-universal.node'));
		try {
			if (localFileExisted) {
				nativeBinding = require('./canvas-napi.darwin-universal.node');
			} else {
				nativeBinding = require('@nativescript/canvas-napi-darwin-universal');
			}
			break;
		} catch {}
		switch (arch) {
			case 'x64':
				localFileExisted = existsSync(join(__dirname, 'canvas-napi.darwin-x64.node'));
				try {
					if (localFileExisted) {
						nativeBinding = require('./canvas-napi.darwin-x64.node');
					} else {
						nativeBinding = require('@nativescript/canvas-napi-darwin-x64');
					}
				} catch (e) {
					loadError = e;
				}
				break;
			case 'arm64':
				localFileExisted = existsSync(join(__dirname, 'canvas-napi.darwin-arm64.node'));
				try {
					if (localFileExisted) {
						nativeBinding = require('./canvas-napi.darwin-arm64.node');
					} else {
						nativeBinding = require('@nativescript/canvas-napi-darwin-arm64');
					}
				} catch (e) {
					loadError = e;
				}
				break;
			default:
				throw new Error(`Unsupported architecture on macOS: ${arch}`);
		}
		break;
	case 'freebsd':
		if (arch !== 'x64') {
			throw new Error(`Unsupported architecture on FreeBSD: ${arch}`);
		}
		localFileExisted = existsSync(join(__dirname, 'canvas-napi.freebsd-x64.node'));
		try {
			if (localFileExisted) {
				nativeBinding = require('./canvas-napi.freebsd-x64.node');
			} else {
				nativeBinding = require('@nativescript/canvas-napi-freebsd-x64');
			}
		} catch (e) {
			loadError = e;
		}
		break;
	case 'linux':
		switch (arch) {
			case 'x64':
				if (isMusl()) {
					localFileExisted = existsSync(join(__dirname, 'canvas-napi.linux-x64-musl.node'));
					try {
						if (localFileExisted) {
							nativeBinding = require('./canvas-napi.linux-x64-musl.node');
						} else {
							nativeBinding = require('@nativescript/canvas-napi-linux-x64-musl');
						}
					} catch (e) {
						loadError = e;
					}
				} else {
					localFileExisted = existsSync(join(__dirname, 'canvas-napi.linux-x64-gnu.node'));
					try {
						if (localFileExisted) {
							nativeBinding = require('./canvas-napi.linux-x64-gnu.node');
						} else {
							nativeBinding = require('@nativescript/canvas-napi-linux-x64-gnu');
						}
					} catch (e) {
						loadError = e;
					}
				}
				break;
			case 'arm64':
				if (isMusl()) {
					localFileExisted = existsSync(join(__dirname, 'canvas-napi.linux-arm64-musl.node'));
					try {
						if (localFileExisted) {
							nativeBinding = require('./canvas-napi.linux-arm64-musl.node');
						} else {
							nativeBinding = require('@nativescript/canvas-napi-linux-arm64-musl');
						}
					} catch (e) {
						loadError = e;
					}
				} else {
					localFileExisted = existsSync(join(__dirname, 'canvas-napi.linux-arm64-gnu.node'));
					try {
						if (localFileExisted) {
							nativeBinding = require('./canvas-napi.linux-arm64-gnu.node');
						} else {
							nativeBinding = require('@nativescript/canvas-napi-linux-arm64-gnu');
						}
					} catch (e) {
						loadError = e;
					}
				}
				break;
			case 'arm':
				if (isMusl()) {
					localFileExisted = existsSync(join(__dirname, 'canvas-napi.linux-arm-musleabihf.node'));
					try {
						if (localFileExisted) {
							nativeBinding = require('./canvas-napi.linux-arm-musleabihf.node');
						} else {
							nativeBinding = require('@nativescript/canvas-napi-linux-arm-musleabihf');
						}
					} catch (e) {
						loadError = e;
					}
				} else {
					localFileExisted = existsSync(join(__dirname, 'canvas-napi.linux-arm-gnueabihf.node'));
					try {
						if (localFileExisted) {
							nativeBinding = require('./canvas-napi.linux-arm-gnueabihf.node');
						} else {
							nativeBinding = require('@nativescript/canvas-napi-linux-arm-gnueabihf');
						}
					} catch (e) {
						loadError = e;
					}
				}
				break;
			case 'riscv64':
				if (isMusl()) {
					localFileExisted = existsSync(join(__dirname, 'canvas-napi.linux-riscv64-musl.node'));
					try {
						if (localFileExisted) {
							nativeBinding = require('./canvas-napi.linux-riscv64-musl.node');
						} else {
							nativeBinding = require('@nativescript/canvas-napi-linux-riscv64-musl');
						}
					} catch (e) {
						loadError = e;
					}
				} else {
					localFileExisted = existsSync(join(__dirname, 'canvas-napi.linux-riscv64-gnu.node'));
					try {
						if (localFileExisted) {
							nativeBinding = require('./canvas-napi.linux-riscv64-gnu.node');
						} else {
							nativeBinding = require('@nativescript/canvas-napi-linux-riscv64-gnu');
						}
					} catch (e) {
						loadError = e;
					}
				}
				break;
			case 's390x':
				localFileExisted = existsSync(join(__dirname, 'canvas-napi.linux-s390x-gnu.node'));
				try {
					if (localFileExisted) {
						nativeBinding = require('./canvas-napi.linux-s390x-gnu.node');
					} else {
						nativeBinding = require('@nativescript/canvas-napi-linux-s390x-gnu');
					}
				} catch (e) {
					loadError = e;
				}
				break;
			default:
				throw new Error(`Unsupported architecture on Linux: ${arch}`);
		}
		break;
	default:
		throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`);
}

if (!nativeBinding) {
	if (loadError) {
		throw loadError;
	}
	throw new Error(`Failed to load native binding`);
}

export const {
	GPUAdapter,
	GPUAdapterInfo,
	GPUBindGroup,
	GPUBindGroupLayout,
	GPUCommandBuffer,
	GPUCommandEncoder,
	GPUCanvasContext,
	GPUDevice,
	GPUFeatureName,
	GPUShaderStage,
	GPUQueryType,
	GPUMipmapFilterMode,
	GPUFilterMode,
	GPUAddressMode,
	GPUBufferUsage: GPUBufferUsage,
	GPUTextureUsage: GPUTextureUsage,
	GPUErrorFilter,
	GPUTextureSampleType,
	GPUTextureViewDimension,
	GPUStorageTextureAccess,
	GPUSamplerBindingType,
	GPUBufferBindingType,
	GPUTextureDimension,
	GPUTextureAspect,
	GPUMapMode,
	GPULoadOp,
	GPUStoreOp,
	GPUVertexFormat,
	GPUVertexStepMode,
	GPUPrimitiveTopology,
	GPUIndexFormat,
	GPUFrontFace,
	GPUCullMode,
	GPUBlendOperation,
	GPUBlendFactor,
	GPUPipelineLayoutAuto,
	GPUStencilOperation,
	GPUCompareFunction,
	PredefinedColorSpaceEnum,
	GPUCanvasAlphaMode,
	GPUCanvasPresentMode,
	GPUTextureFormat,
	GPUPipelineLayout,
	GPUQuerySet,
	GPUQueue,
	GPURenderPassEncoder,
	GPURenderPipeline,
	GPUShaderModule,
	GPUTexture,
	GPUTextureView,
	GPUMapState,
	GPUBuffer,
	GPUComputePassEncoder,
	GPUComputePipeline,
	GPUExternalTexture,
	GPURenderBundle,
	GPURenderBundleEncoder,
	GPUSampler,
	GPU,
	Path2D,
	CanvasPattern,
	CanvasGradient,
	ImageData,
	TextMetrics,
	CanvasRenderingContext2D,
	ImageAsset,
	DomMatrix,
	TextEncoder,
	TextDecoder,
	ANGLE_instanced_arrays,
	OES_fbo_render_mipmap,
	EXT_blend_minmax,
	EXT_color_buffer_half_float,
	EXT_disjoint_timer_query,
	EXT_sRGB,
	EXT_shader_texture_lod,
	EXT_texture_filter_anisotropic,
	OES_element_index_uint,
	OES_standard_derivatives,
	OES_texture_float,
	OES_texture_float_linear,
	OES_texture_half_float,
	OES_texture_half_float_linear,
	OES_vertex_array_object,
	WEBGL_color_buffer_float,
	WEBGL_compressed_texture_atc,
	WEBGL_compressed_texture_etc,
	WEBGL_compressed_texture_etc1,
	WEBGL_compressed_texture_pvrtc,
	WEBGL_compressed_texture_s3tc,
	WEBGL_lose_context,
	WEBGL_depth_texture,
	WEBGL_draw_buffers,
	WebGLActiveInfo,
	WebGLBuffer,
	WebGLFramebuffer,
	WebGLProgram,
	WebGLRenderbuffer,
	WebGLShader,
	WebGLShaderPrecisionFormat,
	WebGLTexture,
	WebGLUniformLocation,
	WebGLRenderingContext,
	WebGLQuery,
	WebGLSampler,
	WebGLSync,
	WebGLTransformFeedback,
	WebGLVertexArrayObject,
	WebGL2RenderingContext,
	ImageBitmapOptionsImageOrientation,
	ImageBitmapOptionsPremultiplyAlpha,
	ImageBitmapOptionsColorSpaceConversion,
	ImageBitmapOptionResizeQuality,
	createImageBitmap,
	ImageBitmap,
} = nativeBinding;
