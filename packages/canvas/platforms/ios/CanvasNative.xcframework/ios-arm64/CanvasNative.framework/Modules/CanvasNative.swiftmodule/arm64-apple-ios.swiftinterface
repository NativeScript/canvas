// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CanvasNative
import AVFoundation
@_exported import CanvasNative
import CoreVideo
import Foundation
import GLKit
import MetalKit
import OpenGLES
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc(NSCCanvasListener) public protocol NSCCanvasListener {
  @objc func contextReady()
}
@_inheritsConvenienceInitializers @objc(NSSCanvasHelpers) @objcMembers public class CanvasHelpers : ObjectiveC.NSObject {
  @objc public static func getBytesFromUIImage(_ image: UIKit.UIImage) -> Foundation.NSMutableData
  @objc public static func createPattern(_ context: Swift.Int64, _ image: UIKit.UIImage, _ repetition: Swift.String) -> Swift.Int64
  @objc public static func loadImageAssetWithContext(_ asset: Swift.Int64, _ image: UIKit.UIImage) -> Swift.Bool
  @objc public static func loadImageAssetWithPath(_ asset: Swift.Int64, _ path: Swift.String) -> Swift.Bool
  @objc public static func drawImage(context: Swift.Int64, image: UIKit.UIImage, dx: Swift.Float, dy: Swift.Float) -> Swift.Bool
  @objc public static func drawImage(context: Swift.Int64, image: UIKit.UIImage, dx: Swift.Float, dy: Swift.Float, dw: Swift.Float, dh: Swift.Float) -> Swift.Bool
  @objc public static func drawImage(context: Swift.Int64, image: UIKit.UIImage, sx: Swift.Float, sy: Swift.Float, sw: Swift.Float, sh: Swift.Float, dx: Swift.Float, dy: Swift.Float, dw: Swift.Float, dh: Swift.Float) -> Swift.Bool
  @objc public static func initWebGPUWithViewLayer(_ instance: Swift.Int64, _ view: CanvasNative.NSCCanvas, _ width: Swift.UInt32, _ height: Swift.UInt32) -> Swift.Int64
  @objc public static func initWebGPUWithView(_ instance: Swift.Int64, _ view: CanvasNative.NSCCanvas, _ width: Swift.UInt32, _ height: Swift.UInt32) -> Swift.Int64
  @objc public static func resizeWebGPUWithView(_ context: Swift.Int64, _ view: CanvasNative.NSCCanvas, _ width: Swift.UInt32, _ height: Swift.UInt32)
  @objc public static func initWebGLWithView(_ view: CanvasNative.NSCCanvas, _ alpha: Swift.Bool, _ antialias: Swift.Bool, _ depth: Swift.Bool, _ fail_if_major_performance_caveat: Swift.Bool, _ power_preference: Swift.Int32, _ premultiplied_alpha: Swift.Bool, _ preserve_drawing_buffer: Swift.Bool, _ stencil: Swift.Bool, _ desynchronized: Swift.Bool, _ xr_compatible: Swift.Bool, _ version: Swift.Int32) -> Swift.Int64
  @objc public static func initWebGLWithWidthAndHeight(_ width: Swift.Int32, _ height: Swift.Int32, _ alpha: Swift.Bool, _ antialias: Swift.Bool, _ depth: Swift.Bool, _ fail_if_major_performance_caveat: Swift.Bool, _ power_preference: Swift.Int32, _ premultiplied_alpha: Swift.Bool, _ preserve_drawing_buffer: Swift.Bool, _ stencil: Swift.Bool, _ desynchronized: Swift.Bool, _ xr_compatible: Swift.Bool, _ version: Swift.Int32) -> Swift.Int64
  @objc public static func resize2DContext(_ context: Swift.Int64, _ width: Swift.Float, _ height: Swift.Float)
  @objc public static func flush2DContext(_ context: Swift.Int64)
  @objc public static func flush2DContextAndSyncCPU(_ context: Swift.Int64)
  @objc public static func presentDrawable(_ context: Swift.Int64)
  @objc public static func flushWebGL(_ context: Swift.Int64) -> Swift.Bool
  @objc public static func releaseWebGL(_ context: Swift.Int64)
  @objc public static func create2DContext(_ view: CanvasNative.NSCCanvas, _ width: Swift.Int32, _ height: Swift.Int32, _ alpha: Swift.Bool, _ density: Swift.Float, _ fontColor: Swift.Int32, _ ppi: Swift.Float, _ direction: Swift.Int32) -> Swift.Int64
  @objc public static func create2DContextMetal(_ view: CanvasNative.NSCCanvas, _ alpha: Swift.Bool, _ density: Swift.Float, _ fontColor: Swift.Int32, _ ppi: Swift.Float, _ direction: Swift.Int32) -> Swift.Int64
  @objc public static func updateWebGLSurfaceWithView(_ view: Swift.Int64, _ width: Swift.Int32, _ height: Swift.Int32, _ context: Swift.Int64)
  @objc public static func writeFile(_ data: Foundation.NSData, _ path: Swift.String, _ callback: @escaping (Swift.String?, Swift.String?) -> Swift.Void)
  @objc public static func readFile(_ path: Swift.String, _ callback: @escaping (Swift.String?, Foundation.NSData?) -> Swift.Void)
  @objc public static func deleteFile(_ path: Swift.String, _ callback: @escaping (Foundation.NSError?, Swift.Bool) -> Swift.Void)
  @objc public static func handleBase64Image(_ mime: Swift.String, _ dir: Swift.String, _ base64: Swift.String, _ callback: @escaping (Swift.String?, Swift.String?) -> Swift.Void)
  @objc public static func getPixelsPerInchForCurrentDevice() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc(NSCVideoFrame) public class NSCVideoFrame : ObjectiveC.NSObject {
  @objc(NSCVideoFrameFormat) public enum NSCVideoFrameFormat : Swift.Int, Swift.RawRepresentable {
    public typealias RawValue = Swift.UInt32
    case I420
    case I420A
    case I422
    case I444
    case NV12
    case RGBA
    case RGBX
    case BGRA
    case BGRX
    public var rawValue: CanvasNative.NSCVideoFrame.NSCVideoFrameFormat.RawValue {
      get
    }
    public init?(rawValue: CanvasNative.NSCVideoFrame.NSCVideoFrameFormat.RawValue)
  }
  public var pixelBuffer: CoreVideo.CVPixelBuffer {
    get
  }
  public var timestamp: CoreMedia.CMTimeValue {
    get
  }
  public var format: CanvasNative.NSCVideoFrame.NSCVideoFrameFormat {
    get
  }
  public static func getCurrentFrame(_ player: AVFoundation.AVPlayer, _ output: AVFoundation.AVPlayerItemVideoOutput) throws -> CanvasNative.NSCVideoFrame?
  public init(currentTime: CoreMedia.CMTime, frame: CoreVideo.CVPixelBuffer) throws
  public init(buffer: CoreVideo.CVPixelBuffer, ts: CoreMedia.CMTimeValue) throws
  public func clone() throws -> CanvasNative.NSCVideoFrame
  public var codedWidth: Swift.Int {
    get
  }
  public var codedHeight: Swift.Int {
    get
  }
  public var codedRect: CoreFoundation.CGRect {
    get
  }
  public var visibleRect: CoreFoundation.CGRect {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(NSCCanvas) @_Concurrency.MainActor(unsafe) public class NSCCanvas : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public static var forceGL: Swift.Bool
  @objc(CanvasFit) public enum CanvasFit : Swift.Int, Swift.RawRepresentable {
    public typealias RawValue = Swift.UInt32
    case None
    case Fill
    case FitX
    case FitY
    case ScaleDown
    public var rawValue: CanvasNative.NSCCanvas.CanvasFit.RawValue {
      get
    }
    public init?(rawValue: CanvasNative.NSCCanvas.CanvasFit.RawValue)
  }
  @objc @_Concurrency.MainActor(unsafe) public var fit: CanvasNative.NSCCanvas.CanvasFit {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var weblikeScale: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public static let store: Foundation.NSMutableDictionary
  @objc @_Concurrency.MainActor(unsafe) public static func getViews() -> Foundation.NSMapTable<Foundation.NSString, CanvasNative.NSCCanvas>
  @objc @_Concurrency.MainActor(unsafe) public func getGlViewPtr() -> Swift.UnsafeMutableRawPointer
  @objc @_Concurrency.MainActor(unsafe) public func getMtlViewPtr() -> Swift.UnsafeMutableRawPointer
  @objc @_Concurrency.MainActor(unsafe) public func getMtlLayerPtr() -> Swift.UnsafeMutableRawPointer
  @objc @_Concurrency.MainActor(unsafe) public var autoScale: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var nativeContext: Swift.Int64 {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var is2D: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var drawingBufferWidth: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var drawingBufferHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var width: Swift.Float {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var height: Swift.Float {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public func toDataURL(_ format: Swift.String, _ quality: Swift.Float) -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) public func initContext(_ type: Swift.String, _ alpha: Swift.Bool = true, _ antialias: Swift.Bool = true, _ depth: Swift.Bool = true, _ failIfMajorPerformanceCaveat: Swift.Bool = false, _ powerPreference: Swift.Int32 = 0, _ premultipliedAlpha: Swift.Bool = true, _ preserveDrawingBuffer: Swift.Bool = false, _ stencil: Swift.Bool = false, _ desynchronized: Swift.Bool = false, _ xrCompatible: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) public func initWebGPUContext(_ instance: Swift.Int64)
  @objc @_Concurrency.MainActor(unsafe) public func create2DContext(_ alpha: Swift.Bool, _ antialias: Swift.Bool, _ depth: Swift.Bool, _ failIfMajorPerformanceCaveat: Swift.Bool, _ powerPreference: Swift.Int32, _ premultipliedAlpha: Swift.Bool, _ preserveDrawingBuffer: Swift.Bool, _ stencil: Swift.Bool, _ desynchronized: Swift.Bool, _ xrCompatible: Swift.Bool, _ fontColor: Swift.Int32) -> Swift.Int64
  @objc @_Concurrency.MainActor(unsafe) public func snapshot(_ flip: Swift.Bool) -> UIKit.UIImage?
  @objc @discardableResult
  @_Concurrency.MainActor(unsafe) public func render() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var touchEventListener: ((Swift.String, UIKit.UIGestureRecognizer) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public var ignoreTouchEvents: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public func setListener(_ listener: (any CanvasNative.NSCCanvasListener)?)
  @objc @_Concurrency.MainActor(unsafe) public var surfaceWidth: Swift.Int {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var surfaceHeight: Swift.Int {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public func forceLayout(_ width: CoreFoundation.CGFloat, _ height: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public func context2DTest(_ context: Swift.Int64)
  @objc @_Concurrency.MainActor(unsafe) public func context2DPathTest(_ context: Swift.Int64)
  @objc @_Concurrency.MainActor(unsafe) public func context2DConic(_ context: Swift.Int64)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public static func getBoundingClientRect(_ view: UIKit.UIView, _ buffer: Swift.UnsafeMutableRawPointer)
}
extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getBoundingClientRect(_ buffer: Swift.UnsafeMutableRawPointer)
}
@objc(NSCFontDisplay) public enum NSCFontDisplay : Swift.Int, Swift.RawRepresentable, Swift.Codable {
  case auto
  case block
  case fallback
  case optional
  case swap
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(NSCFontWeight) public enum NSCFontWeight : Swift.Int, Swift.RawRepresentable, Swift.Codable {
  case thin
  case extraLight
  case light
  case normal
  case medium
  case semiBold
  case bold
  case extraBold
  case black
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public var uiFontWeight: UIKit.UIFont.Weight {
    get
  }
}
@objcMembers @objc(NSCFontDescriptors) public class NSCFontDescriptors : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(family: Swift.String)
  @objc public func update(_ value: Swift.String)
  @objc public func setFontWeight(_ value: Swift.String)
  @objc public func setFontStyle(_ value: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc(NSCFontFaceStatus) public enum NSCFontFaceStatus : Swift.Int, Swift.RawRepresentable {
  case unloaded
  case loading
  case loaded
  case error
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(NSCFontFace) public class NSCFontFace : ObjectiveC.NSObject {
  @objc public var font: CoreGraphics.CGFont? {
    get
  }
  @objc public var fontData: Foundation.NSData? {
    get
  }
  @objc public func updateDescriptor(value: Swift.String)
  @objc public static func loadFromStyle(style: Swift.String) -> CanvasNative.NSCFontFace?
  @objc public static func importFromRemote(url: Swift.String, load: Swift.Bool, callback: @escaping ([CanvasNative.NSCFontFace]?, Swift.String?) -> Swift.Void)
  @objc public init(family: Swift.String)
  @objc public init(family: Swift.String, source: Swift.String)
  @objc public init(family: Swift.String, data source: Foundation.NSData)
  @objc public init(_ family: Swift.String, _ source: Swift.String? = nil, _ descriptors: CanvasNative.NSCFontDescriptors? = nil)
  @objc public init(_ family: Swift.String, data: Foundation.NSData? = nil, _ descriptors: CanvasNative.NSCFontDescriptors? = nil)
  @objc public var status: CanvasNative.NSCFontFaceStatus
  @objc public var display: CanvasNative.NSCFontDisplay
  @objc public func setFontDisplay(value: Swift.String)
  @objc public var style: Swift.String {
    @objc get
    @objc set
  }
  @objc public func setFontStyle(value: Swift.String, angle: Swift.String?)
  @objc public var weight: CanvasNative.NSCFontWeight {
    @objc get
    @objc set
  }
  @objc public func setFontWeight(value: Swift.String)
  @objc public var family: Swift.String {
    @objc get
  }
  @objc public var ascentOverride: Swift.String {
    @objc get
  }
  @objc public var descentOverride: Swift.String {
    @objc get
  }
  @objc public func load(_ callback: @escaping (Swift.String?) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(NSCRender) public class NSCRender : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc(NSCFontFaceSetStatus) public enum NSCFontFaceSetStatus : Swift.Int, Swift.RawRepresentable {
  case loading
  case loaded
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(NSCFontFaceSet) public class NSCFontFaceSet : ObjectiveC.NSObject {
  @objc public static let instance: CanvasNative.NSCFontFaceSet
  @objc public var status: CanvasNative.NSCFontFaceSetStatus
  @objc public var onStatus: ((CanvasNative.NSCFontFaceSetStatus) -> Swift.Void)?
  @objc public func iter() -> Foundation.NSEnumerator
  @objc public func array() -> [Any]
  @objc public func add(_ font: CanvasNative.NSCFontFace)
  @objc public func clear()
  @objc public func delete(_ font: CanvasNative.NSCFontFace)
  @objc public func check(_ font: Swift.String, _ text: Swift.String?) -> Swift.Bool
  @objc public func load(_ font: Swift.String, _ text: Swift.String?, _ callback: @escaping ([CanvasNative.NSCFontFace], Swift.String?) -> Swift.Void)
  @objc public var size: Swift.Int {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(NSCImageBitmap) public class NSCImageBitmap : ObjectiveC.NSObject {
  @objc public static let queue: Dispatch.DispatchQueue
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NSCCanvasUtils) public class NSCCanvasUtils : ObjectiveC.NSObject {
  @objc public static func createTextureCache() -> CoreVideo.CVOpenGLESTextureCache?
  @objc public static func createImage(_ texturecache: CoreVideo.CVOpenGLESTextureCache, _ buffer: CoreVideo.CVImageBuffer, _ textureAttributes: CoreFoundation.CFDictionary?, _ target: OpenGLES.GLenum, _ internalFormat: OpenGLES.GLint, _ width: OpenGLES.GLsizei, _ height: OpenGLES.GLsizei, _ format: OpenGLES.GLenum, _ type: OpenGLES.GLenum, _ planeIndex: Swift.Int) -> CoreVideo.CVOpenGLESTexture?
  @objc public static func setupRender() -> CanvasNative.NSCRender
  @objc public static func drawFrame(_ player: AVFoundation.AVPlayer, _ output: AVFoundation.AVPlayerItemVideoOutput, _ videoSize: CoreFoundation.CGSize, _ internalFormat: Swift.Int32, _ format: Swift.Int32, _ flipYWebGL: Swift.Bool)
  public enum NSCError : Swift.Error {
    case customError(Swift.String)
  }
  @objc public static func writeToFile(_ data: Foundation.NSData, _ path: Swift.String) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(NSCCanvasRenderingContext2D) public class NSCCanvasRenderingContext2D : CanvasNative.NSCCanvasRenderingContext {
  @objc public static func createPattern(_ context: Swift.Int64, _ src: UIKit.UIImage, _ repetition: Swift.String) -> Swift.Int64
  @objc public static func drawImage(_ context: Swift.Int64, _ image: UIKit.UIImage, _ dx: Swift.Float, _ dy: Swift.Float) -> Swift.Bool
  @objc public static func drawImage(_ context: Swift.Int64, _ image: UIKit.UIImage, _ dx: Swift.Float, _ dy: Swift.Float, _ dWidth: Swift.Float, _ dHeight: Swift.Float) -> Swift.Bool
  @objc public static func drawImage(_ context: Swift.Int64, _ image: UIKit.UIImage, _ sx: Swift.Float, _ sy: Swift.Float, _ sWidth: Swift.Float, _ sHeight: Swift.Float, _ dx: Swift.Float, _ dy: Swift.Float, _ dWidth: Swift.Float, _ dHeight: Swift.Float) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NSCWebGLRenderingContext) @objcMembers public class NSCWebGLRenderingContext : ObjectiveC.NSObject {
  @objc public static func texImage2D(_ context: Swift.Int64, _ target: Swift.Int32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ format: Swift.Int32, _ type: Swift.Int32, _ data: Swift.UnsafeMutablePointer<Swift.UInt8>, _ size: Swift.UInt, _ dimensions: CoreFoundation.CGSize, _ flipY: Swift.Bool)
  @objc public static func texSubImage2D(_ context: Swift.Int64, _ target: Swift.Int32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ format: Swift.Int32, _ type: Swift.Int32, _ data: Swift.UnsafeMutablePointer<Swift.UInt8>, _ size: Swift.UInt, _ dimensions: CoreFoundation.CGSize, _ flipY: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(CanvasGLKView) @_Concurrency.MainActor(unsafe) public class CanvasGLKView : GLKit.GLKView, GLKit.GLKViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) weak public var canvas: CanvasNative.NSCCanvas? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func bindDrawable()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func deleteDrawable()
  @_Concurrency.MainActor(unsafe) @objc public func glkView(_ view: GLKit.GLKView, drawIn rect: CoreFoundation.CGRect)
  @objc deinit
}
extension GLKit.GLKView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func snapshotWithData(_ data: Foundation.Data)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(CanvasCPUView) @_Concurrency.MainActor(unsafe) public class CanvasCPUView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var ignorePixelScaling: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(NSCImageAsset) public class NSCImageAsset : ObjectiveC.NSObject {
  @objc public static func loadImageFromImageSync(_ context: Swift.Int64, _ image: UIKit.UIImage) -> Swift.Bool
  @objc public static func loadImageFromImage(_ context: Swift.Int64, _ image: UIKit.UIImage, _ callback: @escaping (Swift.Bool) -> ())
  @objc public static func loadImageFromPathSync(_ asset: Swift.Int64, _ path: Swift.String) -> Swift.Bool
  @objc public static func loadImageFromPath(_ asset: Swift.Int64, _ path: Swift.String, _ callback: @escaping (Swift.Bool) -> ())
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NSCCanvasRenderingContext) public class NSCCanvasRenderingContext : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension CanvasNative.NSCVideoFrame.NSCVideoFrameFormat : Swift.Equatable {}
extension CanvasNative.NSCVideoFrame.NSCVideoFrameFormat : Swift.Hashable {}
extension CanvasNative.NSCCanvas.CanvasFit : Swift.Equatable {}
extension CanvasNative.NSCCanvas.CanvasFit : Swift.Hashable {}
extension CanvasNative.NSCFontDisplay : Swift.Equatable {}
extension CanvasNative.NSCFontDisplay : Swift.Hashable {}
extension CanvasNative.NSCFontWeight : Swift.Equatable {}
extension CanvasNative.NSCFontWeight : Swift.Hashable {}
extension CanvasNative.NSCFontFaceStatus : Swift.Equatable {}
extension CanvasNative.NSCFontFaceStatus : Swift.Hashable {}
extension CanvasNative.NSCFontFaceSetStatus : Swift.Equatable {}
extension CanvasNative.NSCFontFaceSetStatus : Swift.Hashable {}
