buildscript {
	repositories {
		google()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
}


apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

import org.apache.tools.ant.taskdefs.condition.Os

project.ext {
	RELEASE_REPOSITORY_URL = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
	SNAPSHOT_REPOSITORY_URL = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
}

android {
	namespace = 'org.nativescript.canvas'
	compileSdkVersion 33
	defaultConfig {
		minSdkVersion 17
		targetSdkVersion 33
		versionCode 1
		versionName "1.0"
		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
		}
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	kotlinOptions {
		jvmTarget = "1.8"
	}
	buildToolsVersion '33.0.0'
	ndkVersion '22.1.7171670'
}

dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])
	implementation 'androidx.appcompat:appcompat:1.5.1'
	testImplementation 'junit:junit:4.13.2'
	androidTestImplementation 'androidx.test:runner:1.5.1'
	androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
	implementation "androidx.core:core-ktx:1.9.0"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

tasks.withType(Javadoc) {
	failOnError false
	options.addStringOption('Xdoclint:none', '-quiet')
	options.addStringOption('encoding', 'UTF-8')
	options.addStringOption('charSet', 'UTF-8')
}

repositories {
	mavenCentral()
}

apply from: 'publish.gradle'

cargo {
	prebuiltToolchains = true
	module = "../../canvas-native"
	libname = "canvasnative"
	targets = ["arm", "arm64", "x86", "x86_64"]
	apiLevels = [
		"arm"   : 17,
		"arm64" : 21,
		"x86"   : 17,
		"x86_64": 21
	]
	profile = 'release'

	extraCargoBuildArguments = ['-Z', "build-std=std,panic_abort", '-Z', 'build-std-features=panic_immediate_abort']
	rustupChannel = "nightly"
}


tasks.whenTaskAdded { task ->
	if ((task.name == 'javaPreCompileDebug' || task.name == 'javaPreCompileRelease')) {
		task.dependsOn 'cargoBuild'
	}

	for (target in cargo.targets) {
		if (task.name == "cargoBuild${target.capitalize()}") {
			task.dependsOn "copy_libc++_shared${target.capitalize()}"
		}
	}
}

for (target in cargo.targets) {
	tasks.register("copy_libc++_shared${target.capitalize()}", Copy) {
		def ndkDir = android.ndkDirectory
		// hostTag, abi and archTriple from: https://developer.android.com/ndk/guides/other_build_systems

		def hostTag
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			if (Os.isArch("x86_64") || Os.isArch("amd64")) {
				hostTag = "windows-x86_64"
			} else {
				hostTag = "windows"
			}
		} else if (Os.isFamily(Os.FAMILY_MAC)) {
			hostTag = "darwin-x86_64"
		} else {
			hostTag = "linux-x86_64"
		}

		def (abi, archTriple) = [
			arm   : ['armeabi-v7a', 'arm-linux-androideabi'],
			arm64 : ['arm64-v8a', 'aarch64-linux-android'],
			x86   : ['x86', 'i686-linux-android'],
			x86_64: ['x86_64', 'x86_64-linux-android'],
		][target]

		def from_path = "$ndkDir/toolchains/llvm/prebuilt/$hostTag/sysroot/usr/lib/$archTriple/libc++_shared.so"
		def into_path = layout.buildDirectory.dir("rustJniLibs/android/$abi")

		assert file(from_path).exists()

		from from_path
		into into_path
	}
}
