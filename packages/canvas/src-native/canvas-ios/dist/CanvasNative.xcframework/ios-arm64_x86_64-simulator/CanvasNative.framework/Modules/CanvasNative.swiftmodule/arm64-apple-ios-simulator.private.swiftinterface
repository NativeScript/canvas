// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CanvasNative
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
@_exported import CanvasNative
import CoreVideo
import Foundation
import GLKit
import MetalKit
import OpenGLES
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(TNSDOMMatrix) public class TNSDOMMatrix : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var a: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var b: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var c: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var d: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var e: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var f: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var m11: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var m12: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var m13: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var m14: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var m21: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var m22: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var m23: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var m24: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var m31: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var m32: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var m33: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var m34: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var m41: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var m42: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var m43: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var m44: Swift.Float {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc(TNSTextAlignment) public enum TNSTextAlignment : Swift.Int, Swift.RawRepresentable {
  case Start
  case Left
  case Center
  case Right
  case End
  public typealias RawValue = Swift.UInt32
  public var rawValue: CanvasNative.TNSTextAlignment.RawValue {
    get
  }
  public init?(rawValue: CanvasNative.TNSTextAlignment.RawValue)
  public init?(string: Swift.String)
}
@objc(TNSCanvasListener) public protocol TNSCanvasListener {
  @objc func contextReady()
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_OES_standard_derivatives) public class TNS_OES_standard_derivatives : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_OES_vertex_array_object) public class TNS_OES_vertex_array_object : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var VERTEX_ARRAY_BINDING_OES: Swift.Int32 {
    @objc get
  }
  @objc public func createVertexArrayOES() -> Swift.UInt32
  @objc public func deleteVertexArrayOES(arrayObject: Swift.UInt32)
  @objc public func isVertexArrayOES(arrayObject: Swift.UInt32) -> Swift.Bool
  @objc public func bindVertexArrayOES(arrayObject: Swift.UInt32)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_OES_texture_float) public class TNS_OES_texture_float : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNSAnimationFrame) public class TNSAnimationFrame : ObjectiveC.NSObject {
  @objc public static func requestAnimationFrame(toLoop: @escaping (Swift.Float) -> Swift.Void)
  @objc public static func cancelAnimationFrame(id: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc(TNSFillRule) public enum TNSFillRule : Swift.Int, Swift.RawRepresentable {
  case NonZero
  case EvenOdd
  public typealias RawValue = Swift.UInt32
  public var rawValue: CanvasNative.TNSFillRule.RawValue {
    get
  }
  public init?(rawValue: CanvasNative.TNSFillRule.RawValue)
  public init?(string: Swift.String)
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_EXT_sRGB) public class TNS_EXT_sRGB : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var SRGB_EXT: Swift.Int32 {
    @objc get
  }
  @objc public var SRGB_ALPHA_EXT: Swift.Int32 {
    @objc get
  }
  @objc public var SRGB8_ALPHA8_EXT: Swift.Int32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: Swift.Int32 {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(TNSImageData) public class TNSImageData : ObjectiveC.NSObject {
  @objc public var data: Foundation.NSData {
    get
  }
  @objc public var width: Swift.Int32 {
    @objc get
  }
  @objc public var height: Swift.Int32 {
    @objc get
  }
  @objc deinit
}
@objc(TNSTextDirection) public enum TNSTextDirection : Swift.Int, Swift.RawRepresentable {
  case Ltr
  case Rtl
  public typealias RawValue = Swift.UInt32
  public var rawValue: CanvasNative.TNSTextDirection.RawValue {
    get
  }
  public init?(rawValue: CanvasNative.TNSTextDirection.RawValue)
  public init?(string: Swift.String)
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_WEBGL_color_buffer_float) public class TNS_WEBGL_color_buffer_float : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var RGBA32F_EXT: Swift.Int32 {
    @objc get
  }
  @objc public var RGB32F_EXT: Swift.Int32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: Swift.Int32 {
    @objc get
  }
  @objc public var UNSIGNED_NORMALIZED_EXT: Swift.Int32 {
    @objc get
  }
  @objc deinit
}
@objcMembers @objc(TNS_ANGLE_instanced_arrays) public class TNS_ANGLE_instanced_arrays : ObjectiveC.NSObject {
  @objc public var VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: Swift.Int32 {
    @objc get
  }
  @objc public init(context: CanvasNative.TNSWebGLRenderingContext)
  @objc public func drawArraysInstancedANGLE(mode: Swift.Int32, first: Swift.Int32, count: Swift.Int32, primcount: Swift.Int32)
  @objc public func drawElementsInstancedANGLE(mode: Swift.Int32, count: Swift.Int32, type: Swift.Int32, offset: Swift.Int32, primcount: Swift.Int32)
  @objc public func vertexAttribDivisorANGLE(index: Swift.Int32, divisor: Swift.Int32)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_EXT_blend_minmax) public class TNS_EXT_blend_minmax : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var MIN_EXT: Swift.Int32 {
    @objc get
  }
  @objc public var MAX_EXT: Swift.Int32 {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(TNSCanvas) @_Concurrency.MainActor(unsafe) public class TNSCanvas : UIKit.UIView, CanvasNative.RenderListener {
  @objc @_Concurrency.MainActor(unsafe) public static func getViews() -> Foundation.NSMapTable<Foundation.NSString, CanvasNative.TNSCanvas>
  @objc @_Concurrency.MainActor(unsafe) public func getViewPtr() -> Swift.UnsafeMutableRawPointer?
  @objc @_Concurrency.MainActor(unsafe) public var ignorePixelScaling: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public static func createSVGMatrix() -> CanvasNative.TNSDOMMatrix
  @objc @_Concurrency.MainActor(unsafe) public var handleInvalidationManually: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public func didDraw()
  @objc @_Concurrency.MainActor(unsafe) public func toDataURL() -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) public func toDataURL(_ type: Swift.String) -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) public func toDataURL(_ type: Swift.String, _ format: Swift.Float) -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) public func toDataURLAsync(_ callback: @escaping (Swift.String) -> Swift.Void)
  @objc @_Concurrency.MainActor(unsafe) public func toDataURLAsync(_ type: Swift.String, _ callback: @escaping (Swift.String) -> Swift.Void)
  @objc @_Concurrency.MainActor(unsafe) public func toDataURLAsync(_ type: Swift.String, _ format: Swift.Float, _ callback: @escaping (Swift.String) -> Swift.Void)
  @objc @_Concurrency.MainActor(unsafe) public func snapshot() -> [Swift.UInt8]
  @objc @_Concurrency.MainActor(unsafe) public func snapshotEncoded() -> [Swift.UInt8]
  @objc @_Concurrency.MainActor(unsafe) public var isGL: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public func getId() -> OpenGLES.GLint
  @objc @_Concurrency.MainActor(unsafe) public var width: Swift.Float {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var height: Swift.Float {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public func updateDirection(_ direction: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public var context: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public func doDraw()
  @objc @_Concurrency.MainActor(unsafe) public func flush()
  @objc @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, useCpu: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func setListener(_ listener: CanvasNative.TNSCanvasListener?)
  @objc @_Concurrency.MainActor(unsafe) public var fps: Swift.Float {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public static func layoutView(_ view: UIKit.UIView, _ width: CoreFoundation.CGFloat, _ height: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public func resume()
  @objc @_Concurrency.MainActor(unsafe) public func pause()
  @objc @_Concurrency.MainActor(unsafe) public func moveToMain()
  @objc @_Concurrency.MainActor(unsafe) public func moveOffMain()
  @objc @_Concurrency.MainActor(unsafe) public func handleMoveOffMain()
  @objc @_Concurrency.MainActor(unsafe) public func handleMoveToMain()
  @objc @_Concurrency.MainActor(unsafe) public func getContext(_ type: Swift.String) -> CanvasNative.TNSCanvasRenderingContext?
  @objc @_Concurrency.MainActor(unsafe) public func getContext(type: Swift.String, attributes: Swift.String) -> CanvasNative.TNSCanvasRenderingContext?
  @objc @_Concurrency.MainActor(unsafe) public func getContext(_ type: Swift.String, contextAttributes: Swift.Dictionary<Swift.String, Any>) -> CanvasNative.TNSCanvasRenderingContext?
  @objc @_Concurrency.MainActor(unsafe) public func getContext(type: Swift.String, contextAttributes: CanvasNative.TNSContextAttributes) -> CanvasNative.TNSCanvasRenderingContext?
}
@_inheritsConvenienceInitializers @objc(TNSContextAttributes) @objcMembers public class TNSContextAttributes : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNSTextEncoder) public class TNSTextEncoder : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public init(encoding: Swift.String)
  @objc public var encoding: Swift.String {
    @objc get
  }
  @objc public func encode(text: Swift.String) -> Foundation.NSData
  @objc public func encode(pointer text: Swift.UnsafePointer<Swift.Int8>?) -> Foundation.NSData
  @objc deinit
}
@objc(TNSImageBitmapPremultiplyAlpha) public enum TNSImageBitmapPremultiplyAlpha : Swift.Int, Swift.RawRepresentable {
  case Default
  case Premultiply
  case None
  public typealias RawValue = Swift.Int32
  public var rawValue: CanvasNative.TNSImageBitmapPremultiplyAlpha.RawValue {
    get
  }
  public init?(rawValue: CanvasNative.TNSImageBitmapPremultiplyAlpha.RawValue)
  public init?(string: Swift.String)
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_WEBGL_compressed_texture_etc1) public class TNS_WEBGL_compressed_texture_etc1 : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var COMPRESSED_RGB_ETC1_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_EXT_texture_filter_anisotropic) public class TNS_EXT_texture_filter_anisotropic : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var MAX_TEXTURE_MAX_ANISOTROPY_EXT: Swift.Int32 {
    @objc get
  }
  @objc public var TEXTURE_MAX_ANISOTROPY_EXT: Swift.Int32 {
    @objc get
  }
  @objc deinit
}
extension Swift.RangeReplaceableCollection {
  public mutating func resize(_ size: Swift.Int, fillWith value: Self.Iterator.Element)
}
@objc(TNSLineJoin) public enum TNSLineJoin : Swift.Int, Swift.RawRepresentable {
  case Round
  case Bevel
  case Miter
  public typealias RawValue = Swift.UInt32
  public var rawValue: CanvasNative.TNSLineJoin.RawValue {
    get
  }
  public init?(rawValue: CanvasNative.TNSLineJoin.RawValue)
  public init?(string: Swift.String)
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNSImageBitmapOptions) public class TNSImageBitmapOptions : ObjectiveC.NSObject {
  @objc public var flipY: Swift.Bool
  @objc public var premultiplyAlpha: CanvasNative.TNSImageBitmapPremultiplyAlpha
  @objc public var colorSpaceConversion: CanvasNative.TNSImageBitmapColorSpaceConversion
  @objc public var resizeQuality: CanvasNative.TNSImageBitmapResizeQuality
  @objc public var resizeWidth: Swift.Float32
  @objc public var resizeHeight: Swift.Float32
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNSFramebufferAttachmentParameter) public class TNSFramebufferAttachmentParameter : ObjectiveC.NSObject {
  @objc public var isTexture: Swift.Bool {
    @objc get
  }
  @objc public var isRenderbuffer: Swift.Bool {
    @objc get
  }
  @objc public var value: Swift.Int32 {
    @objc get
  }
  @objc override dynamic public init()
  @objc public init(isTexture: Swift.Bool, isRenderbuffer: Swift.Bool, value: Swift.Int32)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_OES_element_index_uint) public class TNS_OES_element_index_uint : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var UNSIGNED_INT: Swift.Int32 {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNSWebGL2RenderingContext) public class TNSWebGL2RenderingContext : CanvasNative.TNSWebGLRenderingContext {
  @objc override public init(_ canvas: CanvasNative.TNSCanvas)
  @objc override public init(_ canvas: CanvasNative.TNSCanvas, _ attrs: [Swift.String : Any])
  @objc public func beginQuery(_ target: Swift.UInt32, _ query: Swift.UInt32)
  @objc public func beginTransformFeedback(_ primitiveMode: Swift.UInt32)
  @objc public func bindBufferBase(_ target: Swift.UInt32, _ index: Swift.UInt32, _ buffer: Swift.UInt32)
  @objc public func bindBufferRange(_ target: Swift.UInt32, _ index: Swift.UInt32, _ buffer: Swift.UInt32, _ offset: Swift.Int, _ size: Swift.Int)
  @objc public func bindSampler(_ unit: Swift.UInt32, _ sampler: Swift.UInt32)
  @objc public func bindTransformFeedback(_ target: Swift.UInt32, _ transformFeedback: Swift.UInt32)
  @objc public func bindVertexArray(_ vertexArray: Swift.UInt32)
  @objc public func blitFramebuffer(_ srcX0: Swift.Int32, _ srcY0: Swift.Int32, _ srcX1: Swift.Int32, _ srcY1: Swift.Int32, _ dstX0: Swift.Int32, _ dstY0: Swift.Int32, _ dstX1: Swift.Int32, _ dstY1: Swift.Int32, _ mask: Swift.UInt32, _ filter: Swift.UInt32)
  @objc public func clearBufferfv(_ buffer: Swift.UInt32, _ drawbuffer: Swift.Int32, _ values: Swift.UnsafeRawPointer)
  @objc public func clearBufferfv(_ buffer: Swift.UInt32, _ drawbuffer: Swift.Int32, _ values: Swift.UnsafeRawPointer, offset: Swift.Int)
  @objc public func clearBufferiv(_ buffer: Swift.UInt32, _ drawbuffer: Swift.Int32, _ values: Swift.UnsafeRawPointer)
  @objc public func clearBufferiv(_ buffer: Swift.UInt32, _ drawbuffer: Swift.Int32, _ values: Swift.UnsafeRawPointer, offset: Swift.Int)
  @objc public func clearBufferuiv(_ buffer: Swift.UInt32, _ drawbuffer: Swift.Int32, _ values: Swift.UnsafeRawPointer)
  @objc public func clearBufferuiv(_ buffer: Swift.UInt32, _ drawbuffer: Swift.Int32, _ values: Swift.UnsafeRawPointer, offset: Swift.Int)
  @objc public func clearBufferfi(_ buffer: Swift.UInt32, _ drawbuffer: Swift.Int32, _ depth: Swift.Float32, _ stencil: Swift.Int32)
  @objc public func clientWaitSync(_ sync: OpenGLES.GLsync, _ flags: Swift.UInt32, _ timeout: Swift.UInt64) -> Swift.Int32
  @objc public func compressedTexSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ imageSize: Swift.Int32, _ offset: Swift.Int32)
  @objc public func compressedTexSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, i8 srcData: [Swift.Int8], _ srcOffset: Swift.Int32, _ srcLengthOverride: Swift.Int32)
  @objc public func compressedTexSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, u8 srcData: [Swift.UInt8], _ srcOffset: Swift.Int32, _ srcLengthOverride: Swift.Int32)
  @objc public func compressedTexSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, i16 srcData: [Swift.Int16], _ srcOffset: Swift.Int32, _ srcLengthOverride: Swift.Int32)
  @objc public func compressedTexSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, u16 srcData: [Swift.UInt16], _ srcOffset: Swift.Int32, _ srcLengthOverride: Swift.Int32)
  @objc public func compressedTexSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, i32 srcData: [Swift.Int32], _ srcOffset: Swift.Int32, _ srcLengthOverride: Swift.Int32)
  @objc public func compressedTexSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, u32 srcData: [Swift.UInt32], _ srcOffset: Swift.Int32, _ srcLengthOverride: Swift.Int32)
  @objc public func compressedTexSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, f32 srcData: [Swift.Float32], _ srcOffset: Swift.Int32, _ srcLengthOverride: Swift.Int32)
  @objc public func compressedTexSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, f64 srcData: [Swift.Float64], _ srcOffset: Swift.Int32, _ srcLengthOverride: Swift.Int32)
  @objc public func copyBufferSubData(_ readTarget: Swift.UInt32, _ writeTarget: Swift.UInt32, _ readOffset: Swift.Int, _ writeOffset: Swift.Int, _ size: Swift.Int)
  @objc public func copyTexSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ x: Swift.Int32, _ y: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32)
  @objc public func createQuery() -> Swift.UInt32
  @objc public func createSampler() -> Swift.UInt32
  @objc public func createVertexArray() -> Swift.UInt32
  @objc public func createTransformFeedback() -> Swift.UInt32
  @objc public func deleteQuery(_ query: Swift.UInt32)
  @objc public func deleteSampler(_ sampler: Swift.UInt32)
  @objc public func deleteSync(_ sync: OpenGLES.GLsync)
  @objc public func deleteTransformFeedback(_ transformFeedback: Swift.UInt32)
  @objc public func deleteVertexArray(_ vertexArray: Swift.UInt32)
  @objc public func drawArraysInstanced(_ mode: Swift.UInt32, _ first: Swift.Int32, _ count: Swift.Int32, _ instanceCount: Swift.Int32)
  @objc public func drawElementsInstanced(_ mode: Swift.UInt32, _ count: Swift.Int32, _ type: Swift.UInt32, _ offset: Swift.Int, _ instanceCount: Swift.Int32)
  @objc public func drawRangeElements(_ mode: Swift.UInt32, _ start: Swift.UInt32, _ end: Swift.UInt32, _ count: Swift.Int32, _ type: Swift.UInt32, _ offset: Swift.Int)
  @objc public func drawBuffers(_ buffers: [Swift.UInt32])
  @objc public func endQuery(_ target: Swift.UInt32)
  @objc public func endTransformFeedback()
  @objc public func fenceSync(_ condition: Swift.UInt32, _ flags: Swift.UInt32)
  @objc public func framebufferTextureLayer(_ target: Swift.UInt32, _ attachment: Swift.UInt32, _ texture: Swift.UInt32, _ level: Swift.Int32, _ layer: Swift.Int32)
  @objc public func getActiveUniformBlockName(_ program: Swift.UInt32, _ uniformBlockIndex: Swift.UInt32) -> Swift.String
  @objc public func getActiveUniformBlockParameter(_ program: Swift.UInt32, _ uniformBlockIndex: Swift.UInt32, _ pname: Swift.UInt32) -> Any
  @objc public func getActiveUniforms(_ program: Swift.UInt32, _ uniformIndices: [Swift.UInt32], _ pname: Swift.UInt32) -> Any
  @objc public func getBufferSubData(_ target: Swift.UInt32, _ srcByteOffset: Swift.Int, _ dstData: Swift.UnsafeMutableRawPointer, size: Swift.Int, _ dstOffset: Swift.Int32, _ length: Swift.Int32)
  @objc public func getBufferSubData(_ target: Swift.UInt32, _ srcByteOffset: Swift.Int, _ dstData: Swift.UnsafeMutableRawPointer, size: Swift.Int, _ dstOffset: Swift.Int32, _ length: Swift.Int32, offset: Swift.Int)
  @objc public func getFragDataLocation(_ program: Swift.UInt32, _ name: Swift.String) -> Swift.Int32
  @objc public func getIndexedParameter(_ target: Swift.UInt32, _ index: Swift.UInt32) -> Any
  @objc public func getInternalformatParameter(_ target: Swift.UInt32, _ internalformat: Swift.UInt32, _ pname: Swift.UInt32) -> Any
  @objc override public func getParameter(_ pname: Swift.UInt32) -> Any?
  @objc public func getQuery(_ target: Swift.UInt32, _ pname: Swift.UInt32) -> Any
  @objc public func getQueryParameter(_ query: Swift.UInt32, _ pname: Swift.UInt32) -> Any
  @objc public func getSamplerParameter(_ sampler: Swift.UInt32, _ pname: Swift.UInt32) -> Any
  @objc public func getSyncParameter(_ sync: OpenGLES.GLsync, _ pname: Swift.UInt32) -> Any
  @objc public func getTransformFeedbackVarying(_ program: Swift.UInt32, _ index: Swift.UInt32) -> Any
  @objc public func getUniformBlockIndex(_ program: Swift.UInt32, _ uniformBlockName: Swift.String) -> Swift.UInt32
  @objc public func getUniformIndices(_ program: Swift.UInt32, _ uniformNames: [Swift.String]) -> [Swift.UInt32]
  @objc public func invalidateFramebuffer(_ target: Swift.UInt32, _ attachments: [Swift.UInt32])
  @objc public func invalidateSubFramebuffer(_ target: Swift.UInt32, _ attachments: [Swift.UInt32], _ x: Swift.Int32, _ y: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32)
  @objc public func isQuery(_ query: Swift.UInt32) -> Swift.Bool
  @objc public func isSampler(_ sampler: Swift.UInt32) -> Swift.Bool
  @objc public func isSync(_ sync: OpenGLES.GLsync) -> Swift.Bool
  @objc public func isTransformFeedback(_ transformFeedback: Swift.UInt32) -> Swift.Bool
  @objc public func isVertexArray(_ vertexArray: Swift.UInt32) -> Swift.Bool
  @objc public func pauseTransformFeedback()
  @objc public func readBuffer(_ src: Swift.UInt32)
  @objc public func renderbufferStorageMultisample(_ target: Swift.UInt32, _ samples: Swift.Int32, _ internalFormat: Swift.UInt32, _ width: Swift.Int32, _ height: Swift.Int32)
  @objc public func resumeTransformFeedback()
  @objc public func samplerParameteri(_ sampler: Swift.UInt32, _ pname: Swift.UInt32, _ param: Swift.Int32)
  @objc public func samplerParameterf(_ sampler: Swift.UInt32, _ pname: Swift.UInt32, _ param: Swift.Float)
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, data: Foundation.NSData)
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, offset: Swift.Int)
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, pixels: Swift.UnsafeRawPointer, size: Swift.Int)
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, pixels: Swift.UnsafeRawPointer, size: Swift.Int, pixelOffset: Swift.Int, srcOffset: Swift.Int32)
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, i8 source: [Swift.Int8])
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u8 source: [Swift.UInt8])
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, i16 source: [Swift.Int16])
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u16 source: [Swift.UInt16])
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, i32 source: [Swift.Int32])
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u32 source: [Swift.UInt32])
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, f32 source: [Swift.Float32])
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, f64 source: [Swift.Float64])
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, i8 source: [Swift.Int8], _ srcOffset: Swift.Int32)
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u8 source: [Swift.UInt8], _ srcOffset: Swift.Int32)
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, i16 source: [Swift.Int16], _ srcOffset: Swift.Int32)
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u16 source: [Swift.UInt16], _ srcOffset: Swift.Int32)
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, i32 source: [Swift.Int32], _ srcOffset: Swift.Int32)
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u32 source: [Swift.UInt32], _ srcOffset: Swift.Int32)
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, f32 source: [Swift.Float32], _ srcOffset: Swift.Int32)
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, f64 source: [Swift.Float64], _ srcOffset: Swift.Int32)
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, source: UIKit.UIImage)
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, asset: CanvasNative.TNSImageAsset)
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, bitmap: CanvasNative.TNSImageBitmap)
  @objc public func texImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, canvas: CanvasNative.TNSCanvas)
  @objc public func texStorage2D(_ target: Swift.UInt32, _ levels: Swift.Int32, _ internalformat: Swift.UInt32, _ width: Swift.Int32, _ height: Swift.Int32)
  @objc public func texStorage3D(_ target: Swift.UInt32, _ levels: Swift.Int32, _ internalformat: Swift.UInt32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32)
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, data: Foundation.NSData)
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, offset: Swift.Int32)
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, i8 srcData: [Swift.Int8])
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u8 srcData: [Swift.UInt8])
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, i16 srcData: [Swift.Int16])
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u16 srcData: [Swift.UInt16])
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, i32 srcData: [Swift.Int32])
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u32 srcData: [Swift.UInt32])
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, f32 srcData: [Swift.Float32])
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, f64 srcData: [Swift.Float64])
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, i8 srcData: [Swift.Int8], _ srcOffset: Swift.Int32)
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u8 srcData: [Swift.UInt8], _ srcOffset: Swift.Int32)
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, i16 srcData: [Swift.Int16], _ srcOffset: Swift.Int32)
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u16 srcData: [Swift.UInt16], _ srcOffset: Swift.Int32)
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, i32 srcData: [Swift.Int32], _ srcOffset: Swift.Int32)
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u32 srcData: [Swift.UInt32], _ srcOffset: Swift.Int32)
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, f32 srcData: [Swift.Float32], _ srcOffset: Swift.Int32)
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, f64 srcData: [Swift.Float64], _ srcOffset: Swift.Int32)
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, srcData: UIKit.UIImage)
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, canvas: CanvasNative.TNSCanvas)
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, asset: CanvasNative.TNSImageAsset)
  @objc public func texSubImage3D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ zoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ depth: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, bitmap: CanvasNative.TNSImageBitmap)
  @objc public func transformFeedbackVaryings(_ program: Swift.UInt32, _ varyings: [Swift.String], _ bufferMode: Swift.UInt32)
  @objc public func uniform1ui(_ location: Swift.Int32, _ v0: Swift.UInt32)
  @objc public func uniform2ui(_ location: Swift.Int32, _ v0: Swift.UInt32, _ v1: Swift.UInt32)
  @objc public func uniform3ui(_ location: Swift.Int32, _ v0: Swift.UInt32, _ v1: Swift.UInt32, _ v2: Swift.UInt32)
  @objc public func uniform4ui(_ location: Swift.Int32, _ v0: Swift.UInt32, _ v1: Swift.UInt32, _ v2: Swift.UInt32, _ v3: Swift.UInt32)
  @objc public func uniform1uiv(_ location: Swift.Int32, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int)
  @objc public func uniform1uiv(_ location: Swift.Int32, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniform2uiv(_ location: Swift.Int32, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int)
  @objc public func uniform2uiv(_ location: Swift.Int32, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniform3uiv(_ location: Swift.Int32, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int)
  @objc public func uniform3uiv(_ location: Swift.Int32, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniform4uiv(_ location: Swift.Int32, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int)
  @objc public func uniform4uiv(_ location: Swift.Int32, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniformBlockBinding(_ program: Swift.UInt32, _ uniformBlockIndex: Swift.UInt32, _ uniformBlockBinding: Swift.UInt32)
  @objc public func uniformMatrix3x2fv(_ location: Swift.UInt32, _ transpose: Swift.Bool, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int)
  @objc public func uniformMatrix3x2fv(_ location: Swift.UInt32, _ transpose: Swift.Bool, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniformMatrix4x2fv(_ location: Swift.UInt32, _ transpose: Swift.Bool, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int)
  @objc public func uniformMatrix4x2fv(_ location: Swift.UInt32, _ transpose: Swift.Bool, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniformMatrix2x3fv(_ location: Swift.UInt32, _ transpose: Swift.Bool, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int)
  @objc public func uniformMatrix2x3fv(_ location: Swift.UInt32, _ transpose: Swift.Bool, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniformMatrix4x3fv(_ location: Swift.UInt32, _ transpose: Swift.Bool, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int)
  @objc public func uniformMatrix4x3fv(_ location: Swift.UInt32, _ transpose: Swift.Bool, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniformMatrix2x4fv(_ location: Swift.UInt32, _ transpose: Swift.Bool, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int)
  @objc public func uniformMatrix2x4fv(_ location: Swift.UInt32, _ transpose: Swift.Bool, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniformMatrix3x4fv(_ location: Swift.UInt32, _ transpose: Swift.Bool, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int)
  @objc public func uniformMatrix3x4fv(_ location: Swift.UInt32, _ transpose: Swift.Bool, _ data: Swift.UnsafeRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func vertexAttribDivisor(_ index: Swift.UInt32, _ divisor: Swift.UInt32)
  @objc public func vertexAttribI4i(_ index: Swift.UInt32, _ v0: Swift.Int32, _ v1: Swift.Int32, _ v2: Swift.Int32, _ v3: Swift.Int32)
  @objc public func vertexAttribI4ui(_ index: Swift.UInt32, _ v0: Swift.UInt32, _ v1: Swift.UInt32, _ v2: Swift.UInt32, _ v3: Swift.UInt32)
  @objc public func vertexAttribI4iv(_ index: Swift.UInt32, _ value: Swift.UnsafeRawPointer)
  @objc public func vertexAttribI4iv(_ index: Swift.UInt32, _ value: Swift.UnsafeRawPointer, offset: Swift.Int)
  @objc public func vertexAttribI4uiv(_ index: Swift.UInt32, _ value: Swift.UnsafeRawPointer)
  @objc public func vertexAttribI4uiv(_ index: Swift.UInt32, _ value: Swift.UnsafeRawPointer, offset: Swift.Int)
  @objc public var READ_BUFFER: Swift.UInt32 {
    @objc get
  }
  @objc public var UNPACK_ROW_LENGTH: Swift.UInt32 {
    @objc get
  }
  @objc public var UNPACK_SKIP_ROWS: Swift.UInt32 {
    @objc get
  }
  @objc public var UNPACK_SKIP_PIXELS: Swift.UInt32 {
    @objc get
  }
  @objc public var PACK_ROW_LENGTH: Swift.UInt32 {
    @objc get
  }
  @objc public var PACK_SKIP_ROWS: Swift.UInt32 {
    @objc get
  }
  @objc public var PACK_SKIP_PIXELS: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_BINDING_3D: Swift.UInt32 {
    @objc get
  }
  @objc public var UNPACK_SKIP_IMAGES: Swift.UInt32 {
    @objc get
  }
  @objc public var UNPACK_IMAGE_HEIGHT: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_3D_TEXTURE_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_ELEMENTS_VERTICES: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_ELEMENTS_INDICES: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_TEXTURE_LOD_BIAS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_FRAGMENT_UNIFORM_COMPONENTS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_VERTEX_UNIFORM_COMPONENTS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_ARRAY_TEXTURE_LAYERS: Swift.UInt32 {
    @objc get
  }
  @objc public var MIN_PROGRAM_TEXEL_OFFSET: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_PROGRAM_TEXEL_OFFSET: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_VARYING_COMPONENTS: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAGMENT_SHADER_DERIVATIVE_HINT: Swift.UInt32 {
    @objc get
  }
  @objc public var RASTERIZER_DISCARD: Swift.UInt32 {
    @objc get
  }
  @objc public var VERTEX_ARRAY_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_VERTEX_OUTPUT_COMPONENTS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_FRAGMENT_INPUT_COMPONENTS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_SERVER_WAIT_TIMEOUT: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_ELEMENT_INDEX: Swift.UInt32 {
    @objc get
  }
  @objc public var RED: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB8: Swift.UInt32 {
    @objc get
  }
  @objc public var RGBA8: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB10_A2: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_3D: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_WRAP_R: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_MIN_LOD: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_MAX_LOD: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_BASE_LEVEL: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_MAX_LEVEL: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_COMPARE_MODE: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_COMPARE_FUNC: Swift.UInt32 {
    @objc get
  }
  @objc public var SRGB: Swift.UInt32 {
    @objc get
  }
  @objc public var SRGB8: Swift.UInt32 {
    @objc get
  }
  @objc public var SRGB8_ALPHA8: Swift.UInt32 {
    @objc get
  }
  @objc public var COMPARE_REF_TO_TEXTURE: Swift.UInt32 {
    @objc get
  }
  @objc public var RGBA32F: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB32F: Swift.UInt32 {
    @objc get
  }
  @objc public var RGBA16F: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB16F: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_2D_ARRAY: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_BINDING_2D_ARRAY: Swift.UInt32 {
    @objc get
  }
  @objc public var R11F_G11F_B10F: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB9_E5: Swift.UInt32 {
    @objc get
  }
  @objc public var RGBA32UI: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB32UI: Swift.UInt32 {
    @objc get
  }
  @objc public var RGBA16UI: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB16UI: Swift.UInt32 {
    @objc get
  }
  @objc public var RGBA8UI: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB8UI: Swift.UInt32 {
    @objc get
  }
  @objc public var RGBA32I: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB32I: Swift.UInt32 {
    @objc get
  }
  @objc public var RGBA16I: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB16I: Swift.UInt32 {
    @objc get
  }
  @objc public var RGBA8I: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB8I: Swift.UInt32 {
    @objc get
  }
  @objc public var RED_INTEGER: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB_INTEGER: Swift.UInt32 {
    @objc get
  }
  @objc public var RGBA_INTEGER: Swift.UInt32 {
    @objc get
  }
  @objc public var R8: Swift.UInt32 {
    @objc get
  }
  @objc public var RG8: Swift.UInt32 {
    @objc get
  }
  @objc public var R16F: Swift.UInt32 {
    @objc get
  }
  @objc public var R32F: Swift.UInt32 {
    @objc get
  }
  @objc public var RG16F: Swift.UInt32 {
    @objc get
  }
  @objc public var RG32F: Swift.UInt32 {
    @objc get
  }
  @objc public var R8I: Swift.UInt32 {
    @objc get
  }
  @objc public var R8UI: Swift.UInt32 {
    @objc get
  }
  @objc public var R16I: Swift.UInt32 {
    @objc get
  }
  @objc public var R16UI: Swift.UInt32 {
    @objc get
  }
  @objc public var R32I: Swift.UInt32 {
    @objc get
  }
  @objc public var R32UI: Swift.UInt32 {
    @objc get
  }
  @objc public var RG8I: Swift.UInt32 {
    @objc get
  }
  @objc public var RG8UI: Swift.UInt32 {
    @objc get
  }
  @objc public var RG16I: Swift.UInt32 {
    @objc get
  }
  @objc public var RG16UI: Swift.UInt32 {
    @objc get
  }
  @objc public var RG32I: Swift.UInt32 {
    @objc get
  }
  @objc public var RG32UI: Swift.UInt32 {
    @objc get
  }
  @objc public var R8_SNORM: Swift.UInt32 {
    @objc get
  }
  @objc public var RG8_SNORM: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB8_SNORM: Swift.UInt32 {
    @objc get
  }
  @objc public var RGBA8_SNORM: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB10_A2UI: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_IMMUTABLE_FORMAT: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_IMMUTABLE_LEVELS: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_INT_2_10_10_10_REV: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_INT_10F_11F_11F_REV: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_INT_5_9_9_9_REV: Swift.UInt32 {
    @objc get
  }
  @objc public var FLOAT_32_UNSIGNED_INT_24_8_REV: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_INT_24_8: Swift.UInt32 {
    @objc get
  }
  @objc public var HALF_FLOAT: Swift.UInt32 {
    @objc get
  }
  @objc public var RG: Swift.UInt32 {
    @objc get
  }
  @objc public var RG_INTEGER: Swift.UInt32 {
    @objc get
  }
  @objc public var INT_2_10_10_10_REV: Swift.UInt32 {
    @objc get
  }
  @objc public var QUERY_RESULT_AVAILABLE: Swift.UInt32 {
    @objc get
  }
  @objc public var QUERY_RESULT: Swift.UInt32 {
    @objc get
  }
  @objc public var CURRENT_QUERY: Swift.UInt32 {
    @objc get
  }
  @objc public var ANY_SAMPLES_PASSED: Swift.UInt32 {
    @objc get
  }
  @objc public var ANY_SAMPLES_PASSED_CONSERVATIVE: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_DRAW_BUFFERS: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_BUFFER0: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_BUFFER1: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_BUFFER2: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_BUFFER3: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_BUFFER4: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_BUFFER5: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_BUFFER6: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_BUFFER7: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_BUFFER8: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_BUFFER9: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_BUFFER10: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_BUFFER11: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_BUFFER12: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_BUFFER13: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_BUFFER14: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_BUFFER15: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_COLOR_ATTACHMENTS: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT1: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT2: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT3: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT4: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT5: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT6: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT7: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT8: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT9: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT10: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT11: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT12: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT13: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT14: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT15: Swift.UInt32 {
    @objc get
  }
  @objc public var SAMPLER_3D: Swift.UInt32 {
    @objc get
  }
  @objc public var SAMPLER_2D_SHADOW: Swift.UInt32 {
    @objc get
  }
  @objc public var SAMPLER_2D_ARRAY: Swift.UInt32 {
    @objc get
  }
  @objc public var SAMPLER_2D_ARRAY_SHADOW: Swift.UInt32 {
    @objc get
  }
  @objc public var SAMPLER_CUBE_SHADOW: Swift.UInt32 {
    @objc get
  }
  @objc public var INT_SAMPLER_2D: Swift.UInt32 {
    @objc get
  }
  @objc public var INT_SAMPLER_3D: Swift.UInt32 {
    @objc get
  }
  @objc public var INT_SAMPLER_CUBE: Swift.UInt32 {
    @objc get
  }
  @objc public var INT_SAMPLER_2D_ARRAY: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_INT_SAMPLER_2D: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_INT_SAMPLER_3D: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_INT_SAMPLER_CUBE: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_INT_SAMPLER_2D_ARRAY: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_SAMPLES: Swift.UInt32 {
    @objc get
  }
  @objc public var SAMPLER_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var PIXEL_PACK_BUFFER: Swift.UInt32 {
    @objc get
  }
  @objc public var PIXEL_UNPACK_BUFFER: Swift.UInt32 {
    @objc get
  }
  @objc public var PIXEL_PACK_BUFFER_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var PIXEL_UNPACK_BUFFER_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var COPY_READ_BUFFER: Swift.UInt32 {
    @objc get
  }
  @objc public var COPY_WRITE_BUFFER: Swift.UInt32 {
    @objc get
  }
  @objc public var COPY_READ_BUFFER_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var COPY_WRITE_BUFFER_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var FLOAT_MAT2x3: Swift.UInt32 {
    @objc get
  }
  @objc public var FLOAT_MAT2x4: Swift.UInt32 {
    @objc get
  }
  @objc public var FLOAT_MAT3x2: Swift.UInt32 {
    @objc get
  }
  @objc public var FLOAT_MAT3x4: Swift.UInt32 {
    @objc get
  }
  @objc public var FLOAT_MAT4x2: Swift.UInt32 {
    @objc get
  }
  @objc public var FLOAT_MAT4x3: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_INT_VEC2: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_INT_VEC3: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_INT_VEC4: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_NORMALIZED: Swift.UInt32 {
    @objc get
  }
  @objc public var SIGNED_NORMALIZED: Swift.UInt32 {
    @objc get
  }
  @objc public var VERTEX_ATTRIB_ARRAY_INTEGER: Swift.UInt32 {
    @objc get
  }
  @objc public var VERTEX_ATTRIB_ARRAY_DIVISOR: Swift.UInt32 {
    @objc get
  }
  @objc public var TRANSFORM_FEEDBACK_BUFFER_MODE: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: Swift.UInt32 {
    @objc get
  }
  @objc public var TRANSFORM_FEEDBACK_VARYINGS: Swift.UInt32 {
    @objc get
  }
  @objc public var TRANSFORM_FEEDBACK_BUFFER_START: Swift.UInt32 {
    @objc get
  }
  @objc public var TRANSFORM_FEEDBACK_BUFFER_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: Swift.UInt32 {
    @objc get
  }
  @objc public var INTERLEAVED_ATTRIBS: Swift.UInt32 {
    @objc get
  }
  @objc public var SEPARATE_ATTRIBS: Swift.UInt32 {
    @objc get
  }
  @objc public var TRANSFORM_FEEDBACK_BUFFER: Swift.UInt32 {
    @objc get
  }
  @objc public var TRANSFORM_FEEDBACK_BUFFER_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var TRANSFORM_FEEDBACK: Swift.UInt32 {
    @objc get
  }
  @objc public var TRANSFORM_FEEDBACK_PAUSED: Swift.UInt32 {
    @objc get
  }
  @objc public var TRANSFORM_FEEDBACK_ACTIVE: Swift.UInt32 {
    @objc get
  }
  @objc public var TRANSFORM_FEEDBACK_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_ATTACHMENT_RED_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_DEFAULT: Swift.UInt32 {
    @objc get
  }
  @objc override public var DEPTH_STENCIL_ATTACHMENT: Swift.UInt32 {
    @objc get
  }
  @objc override public var DEPTH_STENCIL: Swift.UInt32 {
    @objc get
  }
  @objc public var DEPTH24_STENCIL8: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_FRAMEBUFFER_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var READ_FRAMEBUFFER: Swift.UInt32 {
    @objc get
  }
  @objc public var DRAW_FRAMEBUFFER: Swift.UInt32 {
    @objc get
  }
  @objc public var READ_FRAMEBUFFER_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var RENDERBUFFER_SAMPLES: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_BUFFER: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_BUFFER_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_BUFFER_START: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_BUFFER_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_VERTEX_UNIFORM_BLOCKS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_FRAGMENT_UNIFORM_BLOCKS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_COMBINED_UNIFORM_BLOCKS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_UNIFORM_BUFFER_BINDINGS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_UNIFORM_BLOCK_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_BUFFER_OFFSET_ALIGNMENT: Swift.UInt32 {
    @objc get
  }
  @objc public var ACTIVE_UNIFORM_BLOCKS: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_TYPE: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_BLOCK_INDEX: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_OFFSET: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_ARRAY_STRIDE: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_MATRIX_STRIDE: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_IS_ROW_MAJOR: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_BLOCK_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_BLOCK_DATA_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_BLOCK_ACTIVE_UNIFORMS: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: Swift.UInt32 {
    @objc get
  }
  @objc public var UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: Swift.UInt32 {
    @objc get
  }
  @objc public var OBJECT_TYPE: Swift.UInt32 {
    @objc get
  }
  @objc public var SYNC_CONDITION: Swift.UInt32 {
    @objc get
  }
  @objc public var SYNC_STATUS: Swift.UInt32 {
    @objc get
  }
  @objc public var SYNC_FLAGS: Swift.UInt32 {
    @objc get
  }
  @objc public var SYNC_FENCE: Swift.UInt32 {
    @objc get
  }
  @objc public var SYNC_GPU_COMMANDS_COMPLETE: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNALED: Swift.UInt32 {
    @objc get
  }
  @objc public var SIGNALED: Swift.UInt32 {
    @objc get
  }
  @objc public var ALREADY_SIGNALED: Swift.UInt32 {
    @objc get
  }
  @objc public var TIMEOUT_EXPIRED: Swift.UInt32 {
    @objc get
  }
  @objc public var CONDITION_SATISFIED: Swift.UInt32 {
    @objc get
  }
  @objc public var WAIT_FAILED: Swift.UInt32 {
    @objc get
  }
  @objc public var SYNC_FLUSH_COMMANDS_BIT: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR: Swift.UInt32 {
    @objc get
  }
  @objc public var DEPTH: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL: Swift.UInt32 {
    @objc get
  }
  @objc public var MIN: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX: Swift.UInt32 {
    @objc get
  }
  @objc public var DEPTH_COMPONENT24: Swift.UInt32 {
    @objc get
  }
  @objc public var STREAM_READ: Swift.UInt32 {
    @objc get
  }
  @objc public var STREAM_COPY: Swift.UInt32 {
    @objc get
  }
  @objc public var STATIC_READ: Swift.UInt32 {
    @objc get
  }
  @objc public var STATIC_COPY: Swift.UInt32 {
    @objc get
  }
  @objc public var DYNAMIC_READ: Swift.UInt32 {
    @objc get
  }
  @objc public var DYNAMIC_COPY: Swift.UInt32 {
    @objc get
  }
  @objc public var DEPTH_COMPONENT32F: Swift.UInt32 {
    @objc get
  }
  @objc public var DEPTH32F_STENCIL8: Swift.UInt32 {
    @objc get
  }
  @objc public var INVALID_INDEX: Swift.Int {
    @objc get
  }
  @objc public var TIMEOUT_IGNORED: Swift.UInt64 {
    @objc get
  }
  @objc public var MAX_CLIENT_WAIT_TIMEOUT_WEBGL: Swift.UInt32 {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_WEBGL_compressed_texture_pvrtc) public class TNS_WEBGL_compressed_texture_pvrtc : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var COMPRESSED_RGB_PVRTC_4BPPV1_IMG: Swift.Int32 {
    @objc get
  }
  @objc public var COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: Swift.Int32 {
    @objc get
  }
  @objc public var COMPRESSED_RGB_PVRTC_2BPPV1_IMG: Swift.Int32 {
    @objc get
  }
  @objc public var COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: Swift.Int32 {
    @objc get
  }
  @objc deinit
}
@objc(TNSLineCap) public enum TNSLineCap : Swift.Int, Swift.RawRepresentable {
  case Butt
  case Round
  case Square
  public typealias RawValue = Swift.UInt32
  public var rawValue: CanvasNative.TNSLineCap.RawValue {
    get
  }
  public init?(rawValue: CanvasNative.TNSLineCap.RawValue)
  public init?(string: Swift.String)
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNSPath2D) public class TNSPath2D : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
  @objc public init(path: CanvasNative.TNSPath2D)
  @objc public init(data: Swift.String)
  @objc public func addPath(_ path: CanvasNative.TNSPath2D)
  @objc public func addPath(_ path: CanvasNative.TNSPath2D, _ transform: CanvasNative.TNSDOMMatrix?)
  @objc public func closePath()
  @objc public func moveTo(_ x: Swift.Float, _ y: Swift.Float)
  @objc public func lineTo(_ x: Swift.Float, _ y: Swift.Float)
  @objc public func bezierCurveTo(_ cp1x: Swift.Float, _ cp1y: Swift.Float, _ cp2x: Swift.Float, _ cp2y: Swift.Float, _ x: Swift.Float, _ y: Swift.Float)
  @objc public func quadraticCurveTo(_ cpx: Swift.Float, _ cpy: Swift.Float, _ x: Swift.Float, _ y: Swift.Float)
  @objc public func arc(_ x: Swift.Float, _ y: Swift.Float, _ radius: Swift.Float, _ startAngle: Swift.Float, _ endAngle: Swift.Float)
  @objc public func arc(_ x: Swift.Float, _ y: Swift.Float, _ radius: Swift.Float, _ startAngle: Swift.Float, _ endAngle: Swift.Float, _ anticlockwise: Swift.Bool)
  @objc public func arcTo(_ x1: Swift.Float, _ y1: Swift.Float, _ x2: Swift.Float, _ y2: Swift.Float, _ radius: Swift.Float)
  @objc public func ellipse(_ x: Swift.Float, _ y: Swift.Float, _ radiusX: Swift.Float, _ radiusY: Swift.Float, _ rotation: Swift.Float, _ startAngle: Swift.Float, _ endAngle: Swift.Float)
  @objc public func ellipse(_ x: Swift.Float, _ y: Swift.Float, _ radiusX: Swift.Float, _ radiusY: Swift.Float, _ rotation: Swift.Float, _ startAngle: Swift.Float, _ endAngle: Swift.Float, _ anticlockwise: Swift.Bool)
  @objc public func rect(_ x: Swift.Float, _ y: Swift.Float, _ width: Swift.Float, _ height: Swift.Float)
  @objc public func roundRect(_ x: Swift.Float, _ y: Swift.Float, _ width: Swift.Float, _ height: Swift.Float, _ topLeft: Swift.Float, _ topRight: Swift.Float, _ bottomRight: Swift.Float, _ bottomLeft: Swift.Float)
  @objc public func roundRectWithRadii(_ x: Swift.Float, _ y: Swift.Float, _ width: Swift.Float, _ height: Swift.Float, _ radii: Swift.Float)
  @objc public func roundRect(x: Swift.Float, y: Swift.Float, width: Swift.Float, height: Swift.Float, radii: [Swift.Float])
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_OES_texture_half_float) public class TNS_OES_texture_half_float : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var HALF_FLOAT_OES: Swift.Int32 {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNSTextDecoder) public class TNSTextDecoder : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public init(encoding: Swift.String)
  @objc public var encoding: Swift.String {
    @objc get
  }
  @objc public func decode(buffer: Foundation.Data) -> Swift.String
  @objc public func decode(buffer: Foundation.Data, offset: Swift.Int) -> Swift.String
  @objc public func decode(buffer: Foundation.Data, offset: Swift.Int, length: Swift.Int) -> Swift.String
  @objc public func decode(u8 buffer: Swift.UnsafeMutableRawPointer, _ size: Swift.Int) -> Swift.String
  @objc public func decode(u8 buffer: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int) -> Swift.String
  @objc public func decode(i8 buffer: Swift.UnsafeMutableRawPointer, _ size: Swift.Int) -> Swift.String
  @objc public func decode(i8 buffer: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int) -> Swift.String
  @objc public func decode(u16 buffer: Swift.UnsafeMutableRawPointer, _ size: Swift.Int) -> Swift.String
  @objc public func decode(u16 buffer: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int) -> Swift.String
  @objc public func decode(i16 buffer: Swift.UnsafeMutableRawPointer, _ size: Swift.Int) -> Swift.String
  @objc public func decode(i16 buffer: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int) -> Swift.String
  @objc public func decode(i32 buffer: Swift.UnsafeMutableRawPointer, _ size: Swift.Int) -> Swift.String
  @objc public func decode(i32 buffer: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int) -> Swift.String
  @objc public func decode(u32 buffer: Swift.UnsafeMutableRawPointer, _ size: Swift.Int) -> Swift.String
  @objc public func decode(u32 buffer: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int) -> Swift.String
  @objc public func decode(bytes: [Swift.UInt8]) -> Swift.String
  @objc public func decode(i8 bytes: [Swift.Int8]) -> Swift.String
  @objc public func decode(u16 bytes: [Swift.UInt16]) -> Swift.String
  @objc public func decode(i16 bytes: [Swift.Int16]) -> Swift.String
  @objc public func decode(i32 bytes: [Swift.Int32]) -> Swift.String
  @objc public func decode(u32 bytes: [Swift.UInt32]) -> Swift.String
  @objc deinit
}
@objcMembers @objc(TNSWebGLActiveInfo) public class TNSWebGLActiveInfo : ObjectiveC.NSObject {
  @objc public var name: Swift.String {
    @objc get
  }
  @objc public var size: Swift.Int32 {
    @objc get
  }
  @objc public var type: Swift.UInt32 {
    @objc get
  }
  @objc public init(name: Swift.String, size: Swift.Int32, type: Swift.UInt32)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNSRender) public class TNSRender : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func createSurface()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(TNSSVG) @_Concurrency.MainActor(unsafe) public class TNSSVG : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var ignorePixelScaling: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var src: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var srcPath: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public func toImage() -> UIKit.UIImage?
  @objc @_Concurrency.MainActor(unsafe) public func toData() -> Foundation.NSData?
  @objc deinit
}
@objcMembers @objc(TNSWebGLRenderingContext) public class TNSWebGLRenderingContext : CanvasNative.TNSCanvasRenderingContext {
  @objc public init(_ canvas: CanvasNative.TNSCanvas)
  @objc public init(_ canvas: CanvasNative.TNSCanvas, _ attrs: [Swift.String : Any])
  @objc public func getCanvas() -> CanvasNative.TNSCanvas
  @objc public var drawingBufferWidth: Swift.Int32 {
    @objc get
  }
  @objc public var drawingBufferHeight: Swift.Int32 {
    @objc get
  }
  @objc public func activeTexture(_ texture: Swift.UInt32)
  @objc public func attachShader(_ program: Swift.UInt32, _ shader: Swift.UInt32)
  @objc public func bindAttribLocation(_ program: Swift.UInt32, _ index: Swift.UInt32, _ name: Swift.String)
  @objc public func bindBuffer(_ target: Swift.UInt32, _ buffer: Swift.UInt32)
  @objc public func bindFramebuffer(_ target: Swift.UInt32, _ framebuffer: Swift.UInt32)
  @objc public func bindRenderbuffer(_ target: Swift.UInt32, _ renderbuffer: Swift.UInt32)
  @objc public func bindTexture(_ target: Swift.UInt32, _ texture: Swift.UInt32)
  @objc public func blendColor(_ red: Swift.Float32, _ green: Swift.Float32, _ blue: Swift.Float32, _ alpha: Swift.Float32)
  @objc public func blendEquation(_ mode: Swift.UInt32)
  @objc public func blendEquationSeparate(_ modeRGB: Swift.UInt32, _ modeAlpha: Swift.UInt32)
  @objc public func blendFunc(_ sfactor: Swift.UInt32, _ dfactor: Swift.UInt32)
  @objc public func blendFuncSeparate(_ srcRGB: Swift.UInt32, _ dstRGB: Swift.UInt32, _ srcAlpha: Swift.UInt32, _ dstAlpha: Swift.UInt32)
  @objc public func bufferData(_ target: Swift.UInt32, size: Swift.Int, _ usage: Swift.UInt32)
  @objc public func bufferData(_ target: Swift.UInt32, srcData: Foundation.NSNull, _ usage: Swift.UInt32)
  @objc public func bufferData(_ target: Swift.UInt32, i8 srcData: [Swift.Int8], _ usage: Swift.UInt32)
  @objc public func bufferData(_ target: Swift.UInt32, srcData: Swift.UnsafeMutableRawPointer, size: Swift.Int, _ usage: Swift.UInt32)
  @objc public func bufferData(_ target: Swift.UInt32, srcData: Swift.UnsafeMutableRawPointer, size: Swift.Int, _ usage: Swift.UInt32, offset: Swift.Int)
  @objc public func bufferData(_ target: Swift.UInt32, u8 srcData: [Swift.UInt8], _ usage: Swift.UInt32)
  @objc public func bufferData(_ target: Swift.UInt32, i16 srcData: [Swift.Int16], _ usage: Swift.UInt32)
  @objc public func bufferData(_ target: Swift.UInt32, u16 srcData: [Swift.UInt16], _ usage: Swift.UInt32)
  @objc public func bufferData(_ target: Swift.UInt32, i32 srcData: [Swift.Int32], _ usage: Swift.UInt32)
  @objc public func bufferData(_ target: Swift.UInt32, u32 srcData: [Swift.UInt32], _ usage: Swift.UInt32)
  @objc public func bufferData(_ target: Swift.UInt32, f32 srcData: [Swift.Float32], _ usage: Swift.UInt32)
  @objc public func bufferData(_ target: Swift.UInt32, f64 srcData: [Swift.Float64], _ usage: Swift.UInt32)
  @objc public func bufferSubData(_ target: Swift.UInt32, _ offset: Swift.Int, _ srcData: Foundation.NSNull)
  @objc public func bufferSubData(_ target: Swift.UInt32, _ offset: Swift.Int, i8 srcData: [Swift.Int8])
  @objc public func bufferSubData(_ target: Swift.UInt32, _ offset: Swift.Int, srcData: Swift.UnsafeMutableRawPointer, size: Swift.Int)
  @objc public func bufferSubData(_ target: Swift.UInt32, _ offset: Swift.Int, srcData: Swift.UnsafeMutableRawPointer, size: Swift.Int, os: Swift.Int)
  @objc public func bufferSubData(_ target: Swift.UInt32, _ offset: Swift.Int, u8 srcData: [Swift.UInt8])
  @objc public func bufferSubData(_ target: Swift.UInt32, _ offset: Swift.Int, i16 srcData: [Swift.Int16])
  @objc public func bufferSubData(_ target: Swift.UInt32, _ offset: Swift.Int, u16 srcData: [Swift.UInt16])
  @objc public func bufferSubData(_ target: Swift.UInt32, _ offset: Swift.Int, i32 srcData: [Swift.Int32])
  @objc public func bufferSubData(_ target: Swift.UInt32, _ offset: Swift.Int, u32 srcData: [Swift.UInt32])
  @objc public func bufferSubData(_ target: Swift.UInt32, _ offset: Swift.Int, f32 srcData: [Swift.Float32])
  @objc public func bufferSubData(_ target: Swift.UInt32, _ offset: Swift.Int, f64 srcData: [Swift.Float64])
  @objc public func checkFramebufferStatus(_ target: Swift.UInt32) -> Swift.UInt32
  @objc public func clear(_ mask: Swift.UInt32)
  @objc public func clearColor(_ red: Swift.Float32, _ green: Swift.Float32, _ blue: Swift.Float32, _ alpha: Swift.Float32)
  @objc public func clearDepth(_ depth: Swift.Float32)
  @objc public func clearStencil(_ stencil: Swift.Int32)
  @objc public func colorMask(_ red: Swift.Bool, _ green: Swift.Bool, _ blue: Swift.Bool, _ alpha: Swift.Bool)
  @objc public func commit()
  @objc public func compileShader(_ shader: Swift.UInt32)
  @objc public func compressedTexImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.UInt32, _ width: Swift.Int32, _ height: Swift.Int32, _ border: Swift.Int32, _ pixels: Foundation.Data?)
  @objc public func compressedTexSubImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ format: Swift.UInt32, _ pixels: Foundation.Data?)
  @objc public func copyTexImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.UInt32, _ x: Swift.Int32, _ y: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ border: Swift.Int32)
  @objc public func copyTexSubImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ x: Swift.Int32, _ y: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32)
  @objc public func createBuffer() -> Swift.UInt32
  @objc public func createFramebuffer() -> Swift.UInt32
  @objc public func createProgram() -> Swift.UInt32
  @objc public func createRenderbuffer() -> Swift.UInt32
  @objc public func createShader(_ type: Swift.UInt32) -> Swift.UInt32
  @objc public func createTexture() -> Swift.UInt32
  @objc public func cullFace(_ mode: Swift.UInt32)
  @objc public func deleteBuffer(_ buffer: Swift.UInt32)
  @objc public func deleteFramebuffer(_ frameBuffer: Swift.UInt32)
  @objc public func deleteProgram(_ program: Swift.UInt32)
  @objc public func deleteRenderbuffer(_ renderbuffer: Swift.UInt32)
  @objc public func deleteShader(_ shader: Swift.UInt32)
  @objc public func deleteTexture(_ texture: Swift.UInt32)
  @objc public func depthFunc(_ fn: Swift.UInt32)
  @objc public func depthMask(_ flag: Swift.Bool)
  @objc public func depthRange(_ zNear: Swift.Float32, _ zFar: Swift.Float32)
  @objc public func detachShader(_ program: Swift.UInt32, _ shader: Swift.UInt32)
  @objc public func disable(_ cap: Swift.UInt32)
  @objc public func disableVertexAttribArray(_ index: Swift.UInt32)
  @objc public func drawArrays(_ mode: Swift.UInt32, _ first: Swift.Int32, _ count: Swift.Int32)
  @objc public func drawElements(_ mode: Swift.UInt32, _ count: Swift.Int32, _ type: Swift.UInt32, _ offset: Swift.Int)
  @objc public func enable(_ cap: Swift.UInt32)
  @objc public func enableVertexAttribArray(_ index: Swift.UInt32)
  @objc public func finish()
  @objc public func flush()
  @objc public func framebufferRenderbuffer(_ target: Swift.UInt32, _ attachment: Swift.UInt32, _ renderbuffertarget: Swift.UInt32, _ renderbuffer: Swift.UInt32)
  @objc public func framebufferTexture2D(_ target: Swift.UInt32, _ attachment: Swift.UInt32, _ textarget: Swift.UInt32, _ texture: Swift.UInt32, _ level: Swift.Int32)
  @objc public func frontFace(_ mode: Swift.UInt32)
  @objc public func generateMipmap(_ target: Swift.UInt32)
  @objc public func getActiveAttrib(_ program: Swift.UInt32, _ index: Swift.UInt32) -> CanvasNative.TNSWebGLActiveInfo
  @objc public func getActiveUniform(_ program: Swift.UInt32, _ index: Swift.UInt32) -> CanvasNative.TNSWebGLActiveInfo
  @objc public func getAttachedShaders(_ program: Swift.UInt32) -> [Swift.UInt32]
  @objc public func getAttribLocation(_ program: Swift.UInt32, _ name: Swift.String) -> Swift.Int32
  @objc public func getBufferParameter(_ target: Swift.UInt32, _ pname: Swift.UInt32) -> Swift.Int32
  @objc public func getContextAttributes() -> Any
  @objc public func getError() -> Swift.UInt32
  @objc public func getExtension(_ name: Swift.String) -> Any?
  @objc public func getFramebufferAttachmentParameter(_ target: Swift.UInt32, _ attachment: Swift.UInt32, _ pname: Swift.UInt32) -> CanvasNative.TNSFramebufferAttachmentParameter
  @objc public func getParameter(_ pname: Swift.UInt32) -> Any?
  @objc public func getProgramInfoLog(_ program: Swift.UInt32) -> Swift.String
  @objc public func getProgramParameter(_ program: Swift.UInt32, _ pname: Swift.UInt32) -> Any
  @objc public func getRenderbufferParameter(_ target: Swift.UInt32, _ pname: Swift.UInt32) -> Swift.Int32
  @objc public func getShaderInfoLog(_ shader: Swift.UInt32) -> Swift.String
  @objc public func getShaderParameter(_ shader: Swift.UInt32, _ pname: Swift.UInt32) -> Any
  @objc public func getShaderPrecisionFormat(_ shaderType: Swift.UInt32, _ precisionType: Swift.UInt32) -> CanvasNative.TNSWebGLShaderPrecisionFormat
  @objc public func getShaderSource(_ shader: Swift.UInt32) -> Swift.String
  @objc public func getSupportedExtensions() -> [Swift.String]
  @objc public func getTexParameter(_ target: Swift.UInt32, _ pname: Swift.UInt32) -> Swift.Int32
  @objc public func getUniform(_ program: Swift.UInt32, _ location: Swift.Int32) -> Any
  @objc public func getUniformLocation(_ program: Swift.UInt32, _ name: Swift.String) -> Swift.Int32
  @objc public func getVertexAttrib(_ index: Swift.UInt32, _ pname: Swift.UInt32) -> Any
  @objc public func getVertexAttribOffset(_ index: Swift.UInt32, _ pname: Swift.UInt32) -> Swift.Int
  @objc public func hint(_ target: Swift.UInt32, _ mode: Swift.UInt32)
  @objc public func isBuffer(_ buffer: Swift.UInt32) -> Swift.Bool
  @objc public func isContextLost() -> Swift.Bool
  @objc public func isEnabled(_ cap: Swift.UInt32) -> Swift.Bool
  @objc public func isFramebuffer(_ framebuffer: Swift.UInt32) -> Swift.Bool
  @objc public func isProgram(_ program: Swift.UInt32) -> Swift.Bool
  @objc public func isRenderbuffer(_ renderbuffer: Swift.UInt32) -> Swift.Bool
  @objc public func isShader(_ shader: Swift.UInt32) -> Swift.Bool
  @objc public func isTexture(_ texture: Swift.UInt32) -> Swift.Bool
  @objc public func lineWidth(_ width: Swift.Float32)
  @objc public func linkProgram(_ program: Swift.UInt32)
  @objc public func pixelStorei(_ pname: Swift.UInt32, _ param: Swift.UInt32)
  @objc public func polygonOffset(_ factor: Swift.Float32, _ units: Swift.Float32)
  @objc public func readPixels(_ x: Swift.Int32, _ y: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, _ pixels: Swift.UnsafeMutableRawPointer)
  @objc public func readPixels(_ x: Swift.Int32, _ y: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, _ pixels: Swift.UnsafeMutableRawPointer, offset: Swift.Int)
  @objc public func renderbufferStorage(_ target: Swift.UInt32, _ internalFormat: Swift.UInt32, _ width: Swift.Int32, _ height: Swift.Int32)
  @objc public func sampleCoverage(_ value: Swift.Float32, _ invert: Swift.Bool)
  @objc public func scissor(_ x: Swift.Int32, _ y: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32)
  @objc public func shaderSource(_ shader: Swift.UInt32, _ source: Swift.String)
  @objc public func stencilFunc(_ fn: Swift.UInt32, _ ref: Swift.Int32, _ mask: Swift.UInt32)
  @objc public func stencilFuncSeparate(_ face: Swift.UInt32, _ fn: Swift.UInt32, _ ref: Swift.Int32, _ mask: Swift.UInt32)
  @objc public func stencilMask(_ mask: Swift.UInt32)
  @objc public func stencilMaskSeparate(_ face: Swift.UInt32, _ mask: Swift.UInt32)
  @objc public func stencilOp(_ fail: Swift.UInt32, _ zfail: Swift.UInt32, _ zpass: Swift.UInt32)
  @objc public func stencilOpSeparate(_ face: Swift.UInt32, _ fail: Swift.UInt32, _ zfail: Swift.UInt32, _ zpass: Swift.UInt32)
  @objc public func texImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, data: Foundation.NSData)
  @objc public func texImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u8 pixels: [Swift.UInt8])
  @objc public func texImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, pixels: Swift.UnsafeRawPointer, size: Swift.Int)
  @objc public func texImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, pixels: Swift.UnsafeRawPointer, size: Swift.Int, offset: Swift.Int)
  @objc public func texImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u16 pixels: [Swift.UInt16])
  @objc public func texImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u32 pixels: [Swift.UInt32])
  @objc public func texImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, f32 pixels: [Swift.Float32])
  @objc public func texImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ border: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, _ pixels: Foundation.NSNull)
  @objc public func texImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, pixels: UIKit.UIImage)
  @objc public func texImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, asset: CanvasNative.TNSImageAsset)
  @objc public func texImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, bitmap: CanvasNative.TNSImageBitmap)
  @objc public func texImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, _ pixels: Foundation.NSNull)
  @objc public func texImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ internalformat: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, canvas: CanvasNative.TNSCanvas)
  @objc public func texParameterf(_ target: Swift.UInt32, _ pname: Swift.UInt32, _ param: Swift.Float32)
  @objc public func texParameteri(_ target: Swift.UInt32, _ pname: Swift.UInt32, _ param: Swift.Int32)
  @objc public func texSubImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, data: Foundation.NSData)
  @objc public func texSubImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u8 pixels: [Swift.UInt8])
  @objc public func texSubImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, pixels: Swift.UnsafeMutableRawPointer, size: Swift.Int)
  @objc public func texSubImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, pixels: Swift.UnsafeMutableRawPointer, size: Swift.Int, offset: Swift.Int)
  @objc public func texSubImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, u16 pixels: [Swift.UInt16])
  @objc public func texSubImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, f32 pixels: [Swift.Float32])
  @objc public func texSubImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, _ pixels: Foundation.NSNull)
  @objc public func texSubImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, pixels: UIKit.UIImage)
  @objc public func texSubImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, asset: CanvasNative.TNSImageAsset)
  @objc public func texSubImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, bitmap: CanvasNative.TNSImageBitmap)
  @objc public func texSubImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, canvas: CanvasNative.TNSCanvas)
  @objc public func texSubImage2D(_ target: Swift.UInt32, _ level: Swift.Int32, _ xoffset: Swift.Int32, _ yoffset: Swift.Int32, _ format: Swift.UInt32, _ type: Swift.UInt32, _ pixels: Foundation.NSNull)
  @objc public func uniform1f(_ location: Swift.Int32, _ v0: Swift.Float32)
  @objc public func uniform1fv(_ location: Swift.Int32, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int)
  @objc public func uniform1fv(_ location: Swift.Int32, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniform1i(_ location: Swift.Int32, _ v0: Swift.Int32)
  @objc public func uniform1iv(_ location: Swift.Int32, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int)
  @objc public func uniform1iv(_ location: Swift.Int32, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniform2f(_ location: Swift.Int32, _ v0: Swift.Float32, _ v1: Swift.Float32)
  @objc public func uniform2fv(_ location: Swift.Int32, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int)
  @objc public func uniform2fv(_ location: Swift.Int32, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniform2i(_ location: Swift.Int32, _ v0: Swift.Int32, _ v1: Swift.Int32)
  @objc public func uniform2iv(_ location: Swift.Int32, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int)
  @objc public func uniform2iv(_ location: Swift.Int32, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniform3f(_ location: Swift.Int32, _ v0: Swift.Float32, _ v1: Swift.Float32, _ v2: Swift.Float32)
  @objc public func uniform3fv(_ location: Swift.Int32, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int)
  @objc public func uniform3fv(_ location: Swift.Int32, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniform3i(_ location: Swift.Int32, _ v0: Swift.Int32, _ v1: Swift.Int32, _ v2: Swift.Int32)
  @objc public func uniform3iv(_ location: Swift.Int32, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int)
  @objc public func uniform3iv(_ location: Swift.Int32, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniform4f(_ location: Swift.Int32, _ v0: Swift.Float32, _ v1: Swift.Float32, _ v2: Swift.Float32, _ v3: Swift.Float32)
  @objc public func uniform4fv(_ location: Swift.Int32, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int)
  @objc public func uniform4fv(_ location: Swift.Int32, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniform4i(_ location: Swift.Int32, _ v0: Swift.Int32, _ v1: Swift.Int32, _ v2: Swift.Int32, _ v3: Swift.Int32)
  @objc public func uniform4iv(_ location: Swift.Int32, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int)
  @objc public func uniform4iv(_ location: Swift.Int32, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniformMatrix2fv(_ location: Swift.Int32, _ transpose: Swift.Bool, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int)
  @objc public func uniformMatrix2fv(_ location: Swift.Int32, _ transpose: Swift.Bool, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniformMatrix3fv(_ location: Swift.Int32, _ transpose: Swift.Bool, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int)
  @objc public func uniformMatrix3fv(_ location: Swift.Int32, _ transpose: Swift.Bool, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func uniformMatrix4fv(_ location: Swift.Int32, _ transpose: Swift.Bool, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int)
  @objc public func uniformMatrix4fv(_ location: Swift.Int32, _ transpose: Swift.Bool, _ value: Swift.UnsafeMutableRawPointer, _ size: Swift.Int, offset: Swift.Int)
  @objc public func useProgram(_ program: Swift.UInt32)
  @objc public func validateProgram(_ program: Swift.UInt32)
  @objc public func vertexAttrib1f(_ index: Swift.UInt32, _ v0: Swift.Float32)
  @objc public func vertexAttrib2f(_ index: Swift.UInt32, _ v0: Swift.Float32, _ v1: Swift.Float32)
  @objc public func vertexAttrib3f(_ index: Swift.UInt32, _ v0: Swift.Float32, _ v1: Swift.Float32, _ v2: Swift.Float32)
  @objc public func vertexAttrib4f(_ index: Swift.UInt32, _ v0: Swift.Float32, _ v1: Swift.Float32, _ v2: Swift.Float32, _ v3: Swift.Float32)
  @objc public func vertexAttrib1fv(_ index: Swift.UInt32, _ value: Swift.UnsafeMutableRawPointer)
  @objc public func vertexAttrib1fv(_ index: Swift.UInt32, _ value: Swift.UnsafeMutableRawPointer, offset: Swift.Int)
  @objc public func vertexAttrib2fv(_ index: Swift.UInt32, _ value: Swift.UnsafeMutableRawPointer)
  @objc public func vertexAttrib2fv(_ index: Swift.UInt32, _ value: Swift.UnsafeMutableRawPointer, offset: Swift.Int)
  @objc public func vertexAttrib3fv(_ index: Swift.UInt32, _ value: Swift.UnsafeMutableRawPointer)
  @objc public func vertexAttrib3fv(_ index: Swift.UInt32, _ value: Swift.UnsafeMutableRawPointer, offset: Swift.Int)
  @objc public func vertexAttrib4fv(_ index: Swift.UInt32, _ value: Swift.UnsafeMutableRawPointer)
  @objc public func vertexAttrib4fv(_ index: Swift.UInt32, _ value: Swift.UnsafeMutableRawPointer, offset: Swift.Int)
  @objc public func vertexAttribPointer(_ index: Swift.UInt32, _ size: Swift.Int32, _ type: Swift.UInt32, _ normalized: Swift.Bool, _ stride: Swift.Int32, _ offset: Swift.Int)
  @objc public func viewport(_ x: Swift.Int32, _ y: Swift.Int32, _ width: Swift.Int32, _ height: Swift.Int32)
  @objc public var DEPTH_BUFFER_BIT: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_BUFFER_BIT: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_BUFFER_BIT: Swift.UInt32 {
    @objc get
  }
  @objc public var POINTS: Swift.UInt32 {
    @objc get
  }
  @objc public var LINES: Swift.UInt32 {
    @objc get
  }
  @objc public var LINE_LOOP: Swift.UInt32 {
    @objc get
  }
  @objc public var LINE_STRIP: Swift.UInt32 {
    @objc get
  }
  @objc public var TRIANGLES: Swift.UInt32 {
    @objc get
  }
  @objc public var TRIANGLE_STRIP: Swift.UInt32 {
    @objc get
  }
  @objc public var TRIANGLE_FAN: Swift.UInt32 {
    @objc get
  }
  @objc public var ONE: Swift.UInt32 {
    @objc get
  }
  @objc public var ZERO: Swift.UInt32 {
    @objc get
  }
  @objc public var SRC_COLOR: Swift.UInt32 {
    @objc get
  }
  @objc public var ONE_MINUS_SRC_COLOR: Swift.UInt32 {
    @objc get
  }
  @objc public var SRC_ALPHA: Swift.UInt32 {
    @objc get
  }
  @objc public var ONE_MINUS_SRC_ALPHA: Swift.UInt32 {
    @objc get
  }
  @objc public var DST_ALPHA: Swift.UInt32 {
    @objc get
  }
  @objc public var ONE_MINUS_DST_ALPHA: Swift.UInt32 {
    @objc get
  }
  @objc public var DST_COLOR: Swift.UInt32 {
    @objc get
  }
  @objc public var ONE_MINUS_DST_COLOR: Swift.UInt32 {
    @objc get
  }
  @objc public var SRC_ALPHA_SATURATE: Swift.UInt32 {
    @objc get
  }
  @objc public var CONSTANT_COLOR: Swift.UInt32 {
    @objc get
  }
  @objc public var ONE_MINUS_CONSTANT_COLOR: Swift.UInt32 {
    @objc get
  }
  @objc public var CONSTANT_ALPHA: Swift.UInt32 {
    @objc get
  }
  @objc public var ONE_MINUS_CONSTANT_ALPHA: Swift.UInt32 {
    @objc get
  }
  @objc public var FUNC_ADD: Swift.UInt32 {
    @objc get
  }
  @objc public var FUNC_SUBTRACT: Swift.UInt32 {
    @objc get
  }
  @objc public var FUNC_REVERSE_SUBTRACT: Swift.UInt32 {
    @objc get
  }
  @objc public var BLEND_EQUATION: Swift.UInt32 {
    @objc get
  }
  @objc public var BLEND_EQUATION_RGB: Swift.UInt32 {
    @objc get
  }
  @objc public var BLEND_EQUATION_ALPHA: Swift.UInt32 {
    @objc get
  }
  @objc public var BLEND_DST_RGB: Swift.UInt32 {
    @objc get
  }
  @objc public var BLEND_SRC_RGB: Swift.UInt32 {
    @objc get
  }
  @objc public var BLEND_DST_ALPHA: Swift.UInt32 {
    @objc get
  }
  @objc public var BLEND_SRC_ALPHA: Swift.UInt32 {
    @objc get
  }
  @objc public var BLEND_COLOR: Swift.UInt32 {
    @objc get
  }
  @objc public var ARRAY_BUFFER_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var ELEMENT_ARRAY_BUFFER_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var LINE_WIDTH: Swift.UInt32 {
    @objc get
  }
  @objc public var ALIASED_POINT_SIZE_RANGE: Swift.UInt32 {
    @objc get
  }
  @objc public var ALIASED_LINE_WIDTH_RANGE: Swift.UInt32 {
    @objc get
  }
  @objc public var CULL_FACE_MODE: Swift.UInt32 {
    @objc get
  }
  @objc public var FRONT_FACE: Swift.UInt32 {
    @objc get
  }
  @objc public var DEPTH_RANGE: Swift.UInt32 {
    @objc get
  }
  @objc public var DEPTH_WRITEMASK: Swift.UInt32 {
    @objc get
  }
  @objc public var DEPTH_CLEAR_VALUE: Swift.UInt32 {
    @objc get
  }
  @objc public var DEPTH_FUNC: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_CLEAR_VALUE: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_FUNC: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_FAIL: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_PASS_DEPTH_FAIL: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_PASS_DEPTH_PASS: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_REF: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_VALUE_MASK: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_WRITEMASK: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_BACK_FUNC: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_BACK_FAIL: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_BACK_PASS_DEPTH_FAIL: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_BACK_PASS_DEPTH_PASS: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_BACK_REF: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_BACK_VALUE_MASK: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_BACK_WRITEMASK: Swift.UInt32 {
    @objc get
  }
  @objc public var VIEWPORT: Swift.UInt32 {
    @objc get
  }
  @objc public var SCISSOR_BOX: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_CLEAR_VALUE: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_WRITEMASK: Swift.UInt32 {
    @objc get
  }
  @objc public var UNPACK_ALIGNMENT: Swift.UInt32 {
    @objc get
  }
  @objc public var PACK_ALIGNMENT: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_TEXTURE_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_VIEWPORT_DIMS: Swift.UInt32 {
    @objc get
  }
  @objc public var SUBPIXEL_BITS: Swift.UInt32 {
    @objc get
  }
  @objc public var RED_BITS: Swift.UInt32 {
    @objc get
  }
  @objc public var GREEN_BITS: Swift.UInt32 {
    @objc get
  }
  @objc public var BLUE_BITS: Swift.UInt32 {
    @objc get
  }
  @objc public var ALPHA_BITS: Swift.UInt32 {
    @objc get
  }
  @objc public var DEPTH_BITS: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_BITS: Swift.UInt32 {
    @objc get
  }
  @objc public var POLYGON_OFFSET_UNITS: Swift.UInt32 {
    @objc get
  }
  @objc public var POLYGON_OFFSET_FACTOR: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_BINDING_2D: Swift.UInt32 {
    @objc get
  }
  @objc public var SAMPLE_BUFFERS: Swift.UInt32 {
    @objc get
  }
  @objc public var SAMPLES: Swift.UInt32 {
    @objc get
  }
  @objc public var SAMPLE_COVERAGE_VALUE: Swift.UInt32 {
    @objc get
  }
  @objc public var SAMPLE_COVERAGE_INVERT: Swift.UInt32 {
    @objc get
  }
  @objc public var COMPRESSED_TEXTURE_FORMATS: Swift.UInt32 {
    @objc get
  }
  @objc public var VENDOR: Swift.UInt32 {
    @objc get
  }
  @objc public var RENDERER: Swift.UInt32 {
    @objc get
  }
  @objc public var VERSION: Swift.UInt32 {
    @objc get
  }
  @objc public var IMPLEMENTATION_COLOR_READ_TYPE: Swift.UInt32 {
    @objc get
  }
  @objc public var IMPLEMENTATION_COLOR_READ_FORMAT: Swift.UInt32 {
    @objc get
  }
  @objc public var BROWSER_DEFAULT_WEBGL: Swift.UInt32 {
    @objc get
  }
  @objc public var STATIC_DRAW: Swift.UInt32 {
    @objc get
  }
  @objc public var STREAM_DRAW: Swift.UInt32 {
    @objc get
  }
  @objc public var DYNAMIC_DRAW: Swift.UInt32 {
    @objc get
  }
  @objc public var ARRAY_BUFFER: Swift.UInt32 {
    @objc get
  }
  @objc public var ELEMENT_ARRAY_BUFFER: Swift.UInt32 {
    @objc get
  }
  @objc public var BUFFER_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var BUFFER_USAGE: Swift.UInt32 {
    @objc get
  }
  @objc public var CURRENT_VERTEX_ATTRIB: Swift.UInt32 {
    @objc get
  }
  @objc public var VERTEX_ATTRIB_ARRAY_ENABLED: Swift.UInt32 {
    @objc get
  }
  @objc public var VERTEX_ATTRIB_ARRAY_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var VERTEX_ATTRIB_ARRAY_STRIDE: Swift.UInt32 {
    @objc get
  }
  @objc public var VERTEX_ATTRIB_ARRAY_TYPE: Swift.UInt32 {
    @objc get
  }
  @objc public var VERTEX_ATTRIB_ARRAY_NORMALIZED: Swift.UInt32 {
    @objc get
  }
  @objc public var VERTEX_ATTRIB_ARRAY_POINTER: Swift.UInt32 {
    @objc get
  }
  @objc public var VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var CULL_FACE: Swift.UInt32 {
    @objc get
  }
  @objc public var FRONT: Swift.UInt32 {
    @objc get
  }
  @objc public var BACK: Swift.UInt32 {
    @objc get
  }
  @objc public var FRONT_AND_BACK: Swift.UInt32 {
    @objc get
  }
  @objc public var BLEND: Swift.UInt32 {
    @objc get
  }
  @objc public var DEPTH_TEST: Swift.UInt32 {
    @objc get
  }
  @objc public var DITHER: Swift.UInt32 {
    @objc get
  }
  @objc public var POLYGON_OFFSET_FILL: Swift.UInt32 {
    @objc get
  }
  @objc public var SAMPLE_ALPHA_TO_COVERAGE: Swift.UInt32 {
    @objc get
  }
  @objc public var SAMPLE_COVERAGE: Swift.UInt32 {
    @objc get
  }
  @objc public var SCISSOR_TEST: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_TEST: Swift.UInt32 {
    @objc get
  }
  @objc public var NO_ERROR: Swift.UInt32 {
    @objc get
  }
  @objc public var INVALID_ENUM: Swift.UInt32 {
    @objc get
  }
  @objc public var INVALID_VALUE: Swift.UInt32 {
    @objc get
  }
  @objc public var INVALID_OPERATION: Swift.UInt32 {
    @objc get
  }
  @objc public var INVALID_FRAMEBUFFER_OPERATION: Swift.UInt32 {
    @objc get
  }
  @objc public var OUT_OF_MEMORY: Swift.UInt32 {
    @objc get
  }
  @objc public var CONTEXT_LOST_WEBGL: Swift.UInt32 {
    @objc get
  }
  @objc public var CW: Swift.UInt32 {
    @objc get
  }
  @objc public var CCW: Swift.UInt32 {
    @objc get
  }
  @objc public var DONT_CARE: Swift.UInt32 {
    @objc get
  }
  @objc public var FASTEST: Swift.UInt32 {
    @objc get
  }
  @objc public var NICEST: Swift.UInt32 {
    @objc get
  }
  @objc public var GENERATE_MIPMAP_HINT: Swift.UInt32 {
    @objc get
  }
  @objc public var BYTE: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_BYTE: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_SHORT: Swift.UInt32 {
    @objc get
  }
  @objc public var SHORT: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_INT: Swift.UInt32 {
    @objc get
  }
  @objc public var INT: Swift.UInt32 {
    @objc get
  }
  @objc public var FLOAT: Swift.UInt32 {
    @objc get
  }
  @objc public var DEPTH_COMPONENT: Swift.UInt32 {
    @objc get
  }
  @objc public var ALPHA: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB: Swift.UInt32 {
    @objc get
  }
  @objc public var RGBA: Swift.UInt32 {
    @objc get
  }
  @objc public var LUMINANCE: Swift.UInt32 {
    @objc get
  }
  @objc public var LUMINANCE_ALPHA: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_SHORT_4_4_4_4: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_SHORT_5_5_5_1: Swift.UInt32 {
    @objc get
  }
  @objc public var UNSIGNED_SHORT_5_6_5: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAGMENT_SHADER: Swift.UInt32 {
    @objc get
  }
  @objc public var VERTEX_SHADER: Swift.UInt32 {
    @objc get
  }
  @objc public var COMPILE_STATUS: Swift.UInt32 {
    @objc get
  }
  @objc public var DELETE_STATUS: Swift.UInt32 {
    @objc get
  }
  @objc public var LINK_STATUS: Swift.UInt32 {
    @objc get
  }
  @objc public var VALIDATE_STATUS: Swift.UInt32 {
    @objc get
  }
  @objc public var ATTACHED_SHADERS: Swift.UInt32 {
    @objc get
  }
  @objc public var ACTIVE_ATTRIBUTES: Swift.UInt32 {
    @objc get
  }
  @objc public var ACTIVE_UNIFORMS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_VERTEX_UNIFORM_VECTORS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_VARYING_VECTORS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_COMBINED_TEXTURE_IMAGE_UNITS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_VERTEX_TEXTURE_IMAGE_UNITS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_TEXTURE_IMAGE_UNITS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_VERTEX_ATTRIBS: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_FRAGMENT_UNIFORM_VECTORS: Swift.UInt32 {
    @objc get
  }
  @objc public var SHADER_TYPE: Swift.UInt32 {
    @objc get
  }
  @objc public var SHADING_LANGUAGE_VERSION: Swift.UInt32 {
    @objc get
  }
  @objc public var CURRENT_PROGRAM: Swift.UInt32 {
    @objc get
  }
  @objc public var NEVER: Swift.UInt32 {
    @objc get
  }
  @objc public var LESS: Swift.UInt32 {
    @objc get
  }
  @objc public var EQUAL: Swift.UInt32 {
    @objc get
  }
  @objc public var LEQUAL: Swift.UInt32 {
    @objc get
  }
  @objc public var GREATER: Swift.UInt32 {
    @objc get
  }
  @objc public var NOTEQUAL: Swift.UInt32 {
    @objc get
  }
  @objc public var GEQUAL: Swift.UInt32 {
    @objc get
  }
  @objc public var ALWAYS: Swift.UInt32 {
    @objc get
  }
  @objc public var KEEP: Swift.UInt32 {
    @objc get
  }
  @objc public var REPLACE: Swift.UInt32 {
    @objc get
  }
  @objc public var INCR: Swift.UInt32 {
    @objc get
  }
  @objc public var DECR: Swift.UInt32 {
    @objc get
  }
  @objc public var INVERT: Swift.UInt32 {
    @objc get
  }
  @objc public var INCR_WRAP: Swift.UInt32 {
    @objc get
  }
  @objc public var DECR_WRAP: Swift.UInt32 {
    @objc get
  }
  @objc public var NEAREST: Swift.UInt32 {
    @objc get
  }
  @objc public var LINEAR: Swift.UInt32 {
    @objc get
  }
  @objc public var NEAREST_MIPMAP_NEAREST: Swift.UInt32 {
    @objc get
  }
  @objc public var LINEAR_MIPMAP_NEAREST: Swift.UInt32 {
    @objc get
  }
  @objc public var NEAREST_MIPMAP_LINEAR: Swift.UInt32 {
    @objc get
  }
  @objc public var LINEAR_MIPMAP_LINEAR: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_MAG_FILTER: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_MIN_FILTER: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_WRAP_S: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_WRAP_T: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_2D: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_CUBE_MAP: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_BINDING_CUBE_MAP: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_CUBE_MAP_POSITIVE_X: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_CUBE_MAP_NEGATIVE_X: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_CUBE_MAP_POSITIVE_Y: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_CUBE_MAP_NEGATIVE_Y: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_CUBE_MAP_POSITIVE_Z: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE_CUBE_MAP_NEGATIVE_Z: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_CUBE_MAP_TEXTURE_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE0: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE1: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE2: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE3: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE4: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE5: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE6: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE7: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE8: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE9: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE10: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE11: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE12: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE13: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE14: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE15: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE16: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE17: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE18: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE19: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE20: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE21: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE22: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE23: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE24: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE25: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE26: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE27: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE28: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE29: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE30: Swift.UInt32 {
    @objc get
  }
  @objc public var TEXTURE31: Swift.UInt32 {
    @objc get
  }
  @objc public var ACTIVE_TEXTURE: Swift.UInt32 {
    @objc get
  }
  @objc public var REPEAT: Swift.UInt32 {
    @objc get
  }
  @objc public var CLAMP_TO_EDGE: Swift.UInt32 {
    @objc get
  }
  @objc public var MIRRORED_REPEAT: Swift.UInt32 {
    @objc get
  }
  @objc public var FLOAT_VEC2: Swift.UInt32 {
    @objc get
  }
  @objc public var FLOAT_VEC3: Swift.UInt32 {
    @objc get
  }
  @objc public var FLOAT_VEC4: Swift.UInt32 {
    @objc get
  }
  @objc public var INT_VEC2: Swift.UInt32 {
    @objc get
  }
  @objc public var INT_VEC3: Swift.UInt32 {
    @objc get
  }
  @objc public var INT_VEC4: Swift.UInt32 {
    @objc get
  }
  @objc public var BOOL: Swift.UInt32 {
    @objc get
  }
  @objc public var BOOL_VEC2: Swift.UInt32 {
    @objc get
  }
  @objc public var BOOL_VEC3: Swift.UInt32 {
    @objc get
  }
  @objc public var BOOL_VEC4: Swift.UInt32 {
    @objc get
  }
  @objc public var FLOAT_MAT2: Swift.UInt32 {
    @objc get
  }
  @objc public var FLOAT_MAT3: Swift.UInt32 {
    @objc get
  }
  @objc public var FLOAT_MAT4: Swift.UInt32 {
    @objc get
  }
  @objc public var SAMPLER_2D: Swift.UInt32 {
    @objc get
  }
  @objc public var SAMPLER_CUBE: Swift.UInt32 {
    @objc get
  }
  @objc public var LOW_FLOAT: Swift.UInt32 {
    @objc get
  }
  @objc public var MEDIUM_FLOAT: Swift.UInt32 {
    @objc get
  }
  @objc public var HIGH_FLOAT: Swift.UInt32 {
    @objc get
  }
  @objc public var LOW_INT: Swift.UInt32 {
    @objc get
  }
  @objc public var MEDIUM_INT: Swift.UInt32 {
    @objc get
  }
  @objc public var HIGH_INT: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER: Swift.UInt32 {
    @objc get
  }
  @objc public var RENDERBUFFER: Swift.UInt32 {
    @objc get
  }
  @objc public var RGBA4: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB565: Swift.UInt32 {
    @objc get
  }
  @objc public var RGB5_A1: Swift.UInt32 {
    @objc get
  }
  @objc public var DEPTH_COMPONENT16: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_INDEX8: Swift.UInt32 {
    @objc get
  }
  @objc public var DEPTH_STENCIL: Swift.UInt32 {
    @objc get
  }
  @objc public var RENDERBUFFER_WIDTH: Swift.UInt32 {
    @objc get
  }
  @objc public var RENDERBUFFER_HEIGHT: Swift.UInt32 {
    @objc get
  }
  @objc public var RENDERBUFFER_INTERNAL_FORMAT: Swift.UInt32 {
    @objc get
  }
  @objc public var RENDERBUFFER_RED_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var RENDERBUFFER_GREEN_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var RENDERBUFFER_BLUE_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var RENDERBUFFER_ALPHA_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var RENDERBUFFER_DEPTH_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var RENDERBUFFER_STENCIL_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Swift.UInt32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT0: Swift.UInt32 {
    @objc get
  }
  @objc public var DEPTH_ATTACHMENT: Swift.UInt32 {
    @objc get
  }
  @objc public var STENCIL_ATTACHMENT: Swift.UInt32 {
    @objc get
  }
  @objc public var DEPTH_STENCIL_ATTACHMENT: Swift.UInt32 {
    @objc get
  }
  @objc public var NONE: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_COMPLETE: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_UNSUPPORTED: Swift.UInt32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var RENDERBUFFER_BINDING: Swift.UInt32 {
    @objc get
  }
  @objc public var MAX_RENDERBUFFER_SIZE: Swift.UInt32 {
    @objc get
  }
  @objc public var UNPACK_COLORSPACE_CONVERSION_WEBGL: Swift.UInt32 {
    @objc get
  }
  @objc public var UNPACK_FLIP_Y_WEBGL: Swift.UInt32 {
    @objc get
  }
  @objc public var UNPACK_PREMULTIPLY_ALPHA_WEBGL: Swift.UInt32 {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(TNSImageBitmap) public class TNSImageBitmap : ObjectiveC.NSObject {
  @objc public static var queue: Dispatch.DispatchQueue {
    @objc get
  }
  @objc public static func createFromImageBitmap(_ imageBitmap: CanvasNative.TNSImageBitmap, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromImageBitmap(_ imageBitmap: CanvasNative.TNSImageBitmap, _ sx: Swift.Float32, _ sy: Swift.Float32, _ sWidth: Swift.Float32, _ sHeight: Swift.Float32, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromImageAsset(_ imageAsset: CanvasNative.TNSImageAsset, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromImageAsset(_ imageAsset: CanvasNative.TNSImageAsset, _ sx: Swift.Float32, _ sy: Swift.Float32, _ sWidth: Swift.Float32, _ sHeight: Swift.Float32, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromImageData(_ imageData: CanvasNative.TNSImageData, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromImageData(_ imageData: CanvasNative.TNSImageData, _ sx: Swift.Float32, _ sy: Swift.Float32, _ sWidth: Swift.Float32, _ sHeight: Swift.Float32, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromCanvas(_ canvas: CanvasNative.TNSCanvas, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromCanvas(_ canvas: CanvasNative.TNSCanvas, _ sx: Swift.Float32, _ sy: Swift.Float32, _ sWidth: Swift.Float32, _ sHeight: Swift.Float32, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromData(_ data: Foundation.NSData, _ imageWidth: Swift.Float32, _ imageHeight: Swift.Float32, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromData(_ data: Foundation.NSData, _ imageWidth: Swift.Float32, _ imageHeight: Swift.Float32, _ sx: Swift.Float32, _ sy: Swift.Float32, _ sWidth: Swift.Float32, _ sHeight: Swift.Float32, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromDataEncoded(_ data: Foundation.NSData, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromDataEncoded(_ data: Foundation.NSData, _ sx: Swift.Float32, _ sy: Swift.Float32, _ sWidth: Swift.Float32, _ sHeight: Swift.Float32, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromBytes(_ bytes: [Swift.UInt8], _ imageWidth: Swift.Float32, _ imageHeight: Swift.Float32, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromBytes(_ bytes: [Swift.UInt8], _ imageWidth: Swift.Float32, _ imageHeight: Swift.Float32, _ sx: Swift.Float32, _ sy: Swift.Float32, _ sWidth: Swift.Float32, _ sHeight: Swift.Float32, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromBytesEncoded(_ bytes: [Swift.UInt8], _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromBytesEncoded(_ bytes: [Swift.UInt8], _ sx: Swift.Float32, _ sy: Swift.Float32, _ sWidth: Swift.Float32, _ sHeight: Swift.Float32, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromUIImage(_ canvas: UIKit.UIImage, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public static func createFromUIImage(_ canvas: UIKit.UIImage, _ sx: Swift.Float32, _ sy: Swift.Float32, _ sWidth: Swift.Float32, _ sHeight: Swift.Float32, _ options: CanvasNative.TNSImageBitmapOptions, _ callback: @escaping (CanvasNative.TNSImageBitmap?, Swift.String?) -> Swift.Void)
  @objc public var width: Swift.Int32 {
    @objc get
  }
  @objc public var height: Swift.Int32 {
    @objc get
  }
  @objc public func close()
  @objc public var error: Swift.String? {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_OES_fbo_render_mipmap) public class TNS_OES_fbo_render_mipmap : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc(TNSImageSmoothingQuality) public enum TNSImageSmoothingQuality : Swift.UInt32, Swift.RawRepresentable {
  case Low
  case Medium
  case High
  public typealias RawValue = Swift.UInt32
  public var rawValue: CanvasNative.TNSImageSmoothingQuality.RawValue {
    get
  }
  public init?(rawValue: CanvasNative.TNSImageSmoothingQuality.RawValue)
  public init?(string: Swift.String)
}
@_inheritsConvenienceInitializers @objc(Utils) public class Utils : ObjectiveC.NSObject {
  @objc public static func createTextureCache(_ context: CanvasNative.TNSWebGLRenderingContext) -> CoreVideo.CVOpenGLESTextureCache?
  @objc public static func createImage(_ texturecache: CoreVideo.CVOpenGLESTextureCache, _ buffer: CoreVideo.CVImageBuffer, _ textureAttributes: CoreFoundation.CFDictionary?, _ target: OpenGLES.GLenum, _ internalFormat: OpenGLES.GLint, _ width: OpenGLES.GLsizei, _ height: OpenGLES.GLsizei, _ format: OpenGLES.GLenum, _ type: OpenGLES.GLenum, _ planeIndex: Swift.Int) -> CoreVideo.CVOpenGLESTexture?
  @objc public static func setupRender() -> CanvasNative.TNSRender
  @objc public static func drawFrame(_ player: AVFoundation.AVPlayer, _ output: AVFoundation.AVPlayerItemVideoOutput, _ videoSize: CoreFoundation.CGSize, _ render: CanvasNative.TNSRender, _ internalFormat: Swift.Int32, _ format: Swift.Int32, _ flipYWebGL: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(TNSWebGLShaderPrecisionFormat) public class TNSWebGLShaderPrecisionFormat : ObjectiveC.NSObject {
  @objc public var rangeMin: Swift.Int32 {
    @objc get
  }
  @objc public var rangeMax: Swift.Int32 {
    @objc get
  }
  @objc public var precision: Swift.Int32 {
    @objc get
  }
  @objc public init(rangeMin: Swift.Int32, rangeMax: Swift.Int32, precision: Swift.Int32)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_OES_texture_half_float_linear) public class TNS_OES_texture_half_float_linear : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_OES_texture_float_linear) public class TNS_OES_texture_float_linear : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_EXT_color_buffer_half_float) public class TNS_EXT_color_buffer_half_float : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var RGBA16F_EXT: Swift.Int32 {
    @objc get
  }
  @objc public var RGB16F_EXT: Swift.Int32 {
    @objc get
  }
  @objc public var FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: Swift.Int32 {
    @objc get
  }
  @objc public var UNSIGNED_NORMALIZED_EXT: Swift.Int32 {
    @objc get
  }
  @objc deinit
}
@objcMembers @objc(TNSCanvasRenderingContext2D) public class TNSCanvasRenderingContext2D : CanvasNative.TNSCanvasRenderingContext {
  @objc public init(_ canvas: CanvasNative.TNSCanvas)
  @objc public var font: Swift.String {
    @objc get
    @objc set
  }
  @objc public var filter: Swift.String {
    @objc get
    @objc set
  }
  @objc public var globalAlpha: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var globalCompositeOperation: CanvasNative.TNSCompositeOperationType {
    @objc get
    @objc set
  }
  @objc public var imageSmoothingEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var imageSmoothingQuality: CanvasNative.TNSImageSmoothingQuality {
    @objc get
    @objc set
  }
  @objc public var lineCap: CanvasNative.TNSLineCap {
    @objc get
    @objc set
  }
  @objc public var lineDashOffset: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var lineWidth: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var lineJoin: CanvasNative.TNSLineJoin {
    @objc get
    @objc set
  }
  @objc public var miterLimit: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var shadowBlur: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var shadowColor: Swift.String {
    @objc get
    @objc set
  }
  @objc public var shadowOffsetX: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var shadowOffsetY: Swift.Float {
    @objc get
    @objc set
  }
  @objc public var textAlign: CanvasNative.TNSTextAlignment {
    @objc get
    @objc set
  }
  @objc public var textBaseline: CanvasNative.TNSTextBaseLine {
    @objc get
    @objc set
  }
  @objc public func setFillStyleWithString(_ color: Swift.String)
  @objc public var fillStyle: CanvasNative.ICanvasColorStyle {
    @objc get
    @objc set
  }
  @objc public func setStrokeStyleWithString(_ color: Swift.String)
  @objc public var strokeStyle: CanvasNative.ICanvasColorStyle {
    @objc get
    @objc set
  }
  @objc public func fillRect(_ x: Swift.Float, _ y: Swift.Float, _ width: Swift.Float, _ height: Swift.Float)
  @objc public func strokeRect(_ x: Swift.Float, _ y: Swift.Float, _ width: Swift.Float, _ height: Swift.Float)
  @objc public func fillText(_ text: Swift.String, _ x: Swift.Float, _ y: Swift.Float)
  @objc public func fillText(_ text: Swift.String, _ x: Swift.Float, _ y: Swift.Float, _ width: Swift.Float)
  @objc public func strokeText(_ text: Swift.String, _ x: Swift.Float, _ y: Swift.Float)
  @objc public func strokeText(_ text: Swift.String, _ x: Swift.Float, _ y: Swift.Float, _ width: Swift.Float)
  @objc public func rect(_ x: Swift.Float, _ y: Swift.Float, _ width: Swift.Float, _ height: Swift.Float)
  @objc public func roundRect(x: Swift.Float, y: Swift.Float, width: Swift.Float, height: Swift.Float, topLeft: Swift.Float, topRight: Swift.Float, bottomRight: Swift.Float, bottomLeft: Swift.Float)
  @objc public func roundRect(x: Swift.Float, y: Swift.Float, width: Swift.Float, height: Swift.Float, radii: Swift.Float)
  @objc public func roundRect(_ x: Swift.Float, _ y: Swift.Float, _ width: Swift.Float, _ height: Swift.Float, _ radii: [Swift.Float])
  @objc public func fill()
  @objc public func fill(value: Any)
  @objc public func fill(_ path: CanvasNative.TNSPath2D, _ rule: CanvasNative.TNSFillRule)
  @objc public func stroke()
  @objc public func stroke(_ path: CanvasNative.TNSPath2D?)
  @objc public func beginPath()
  @objc public func moveTo(_ x: Swift.Float, _ y: Swift.Float)
  @objc public func lineTo(_ x: Swift.Float, _ y: Swift.Float)
  @objc public func closePath()
  @objc public func arc(_ x: Swift.Float, _ y: Swift.Float, _ radius: Swift.Float, _ startAngle: Swift.Float, _ endAngle: Swift.Float)
  @objc public func arc(_ x: Swift.Float, _ y: Swift.Float, _ radius: Swift.Float, _ startAngle: Swift.Float, _ endAngle: Swift.Float, _ anticlockwise: Swift.Bool)
  @objc public func arcTo(_ x1: Swift.Float, _ y1: Swift.Float, _ x2: Swift.Float, _ y2: Swift.Float, _ radius: Swift.Float)
  @objc public func bezierCurveTo(_ cp1x: Swift.Float, _ cp1y: Swift.Float, _ cp2x: Swift.Float, _ cp2y: Swift.Float, _ x: Swift.Float, _ y: Swift.Float)
  @objc public func ellipse(_ x: Swift.Float, _ y: Swift.Float, _ radiusX: Swift.Float, _ radiusY: Swift.Float, _ rotation: Swift.Float, _ startAngle: Swift.Float, _ endAngle: Swift.Float)
  @objc public func ellipse(_ x: Swift.Float, _ y: Swift.Float, _ radiusX: Swift.Float, _ radiusY: Swift.Float, _ rotation: Swift.Float, _ startAngle: Swift.Float, _ endAngle: Swift.Float, _ anticlockwise: Swift.Bool)
  @objc public func clip()
  @objc public func clip(_ value: Any)
  @objc public func clip(_ path: CanvasNative.TNSPath2D, _ rule: CanvasNative.TNSFillRule)
  @objc public func clearRect(_ x: Swift.Float, _ y: Swift.Float, _ width: Swift.Float, _ height: Swift.Float)
  @objc public func setLineDash(_ segments: [Swift.Float32])
  @objc public func getCanvas() -> CanvasNative.TNSCanvas
  @objc public func createLinearGradient(_ x0: Swift.Float, _ y0: Swift.Float, _ x1: Swift.Float, _ y1: Swift.Float) -> CanvasNative.TNSColorStyle.TNSLinearGradient
  @objc public func createRadialGradient(_ x0: Swift.Float, _ y0: Swift.Float, _ r0: Swift.Float, _ x1: Swift.Float, _ y1: Swift.Float, _ r1: Swift.Float) -> CanvasNative.TNSColorStyle.TNSRadialGradient
  @objc public func createConicGradient(_ startAngle: Swift.Float, _ x: Swift.Float, _ y: Swift.Float) -> CanvasNative.TNSColorStyle.TNSConicGradient
  @objc public func createPattern(_ value: Any, _ repetition: CanvasNative.TNSPatternRepetition) -> Any?
  @objc public func setTransform(_ a: Swift.Float, _ b: Swift.Float, _ c: Swift.Float, _ d: Swift.Float, _ e: Swift.Float, _ f: Swift.Float)
  @objc public func scale(_ x: Swift.Float, _ y: Swift.Float)
  @objc public func rotate(_ angle: Swift.Float)
  @objc public func translate(_ x: Swift.Float, _ y: Swift.Float)
  @objc public func quadraticCurveTo(_ cpx: Swift.Float, _ cpy: Swift.Float, _ x: Swift.Float, _ y: Swift.Float)
  @objc public func drawImage(_ image: Any, _ dx: Swift.Float, _ dy: Swift.Float)
  @objc public func drawImage(_ image: Any, _ dx: Swift.Float, _ dy: Swift.Float, _ dWidth: Swift.Float, _ dHeight: Swift.Float)
  @objc public func drawImage(_ image: Any, _ sx: Swift.Float, _ sy: Swift.Float, _ sWidth: Swift.Float, _ sHeight: Swift.Float, _ dx: Swift.Float, _ dy: Swift.Float, _ dWidth: Swift.Float, _ dHeight: Swift.Float)
  @objc public func createImageData(_ width: Swift.Int32, _ height: Swift.Int32) -> CanvasNative.TNSImageData
  @objc public func createImageData(_ imageData: CanvasNative.TNSImageData) -> CanvasNative.TNSImageData
  @objc public func getImageData(_ sx: Swift.Float, _ sy: Swift.Float, _ sw: Swift.Float, _ sh: Swift.Float) -> CanvasNative.TNSImageData
  @objc public func putImageData(_ imageData: CanvasNative.TNSImageData, _ dx: Swift.Float, _ dy: Swift.Float)
  @objc public func putImageData(_ imageData: CanvasNative.TNSImageData, _ dx: Swift.Float, _ dy: Swift.Float, _ dirtyX: Swift.Float, _ dirtyY: Swift.Float, _ dirtyWidth: Swift.Float32, _ dirtyHeight: Swift.Float32)
  @objc public func getLineDash() -> [Swift.Float32]
  @objc public func save()
  @objc public func restore()
  @objc public func measureText(_ text: Swift.String) -> CanvasNative.TNSTextMetrics
  @objc public func resetTransform()
  @objc public func transform(_ a: Swift.Float, _ b: Swift.Float, _ c: Swift.Float, _ d: Swift.Float, _ e: Swift.Float, _ f: Swift.Float)
  @objc public func isPointInPath(_ x: Swift.Float, _ y: Swift.Float) -> Swift.Bool
  @objc public func isPointInPath(_ x: Swift.Float, _ y: Swift.Float, _ fillRule: CanvasNative.TNSFillRule) -> Swift.Bool
  @objc public func isPointInPath(_ path: CanvasNative.TNSPath2D, _ x: Swift.Float, _ y: Swift.Float, _ fillRule: CanvasNative.TNSFillRule) -> Swift.Bool
  @objc public func isPointInStroke(_ x: Swift.Float, _ y: Swift.Float) -> Swift.Bool
  @objc public func isPointInStroke(_ path: CanvasNative.TNSPath2D, _ x: Swift.Float, _ y: Swift.Float) -> Swift.Bool
  @objc deinit
}
@objcMembers @objc(TNS_WEBGL_lose_context) public class TNS_WEBGL_lose_context : ObjectiveC.NSObject {
  @objc public init(canvas: CanvasNative.TNSCanvas)
  @objc public func loseContext()
  @objc public func restoreContext()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_WEBGL_compressed_texture_etc) public class TNS_WEBGL_compressed_texture_etc : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var COMPRESSED_R11_EAC: Swift.Int32 {
    @objc get
  }
  @objc public var COMPRESSED_SIGNED_R11_EAC: Swift.Int32 {
    @objc get
  }
  @objc public var COMPRESSED_RG11_EAC: Swift.Int32 {
    @objc get
  }
  @objc public var COMPRESSED_SIGNED_RG11_EAC: Swift.Int32 {
    @objc get
  }
  @objc public var COMPRESSED_RGB8_ETC2: Swift.Int32 {
    @objc get
  }
  @objc public var COMPRESSED_RGBA8_ETC2_EAC: Swift.Int32 {
    @objc get
  }
  @objc public var COMPRESSED_SRGB8_ETC2: Swift.Int32 {
    @objc get
  }
  @objc public var COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: Swift.Int32 {
    @objc get
  }
  @objc public var COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: Swift.Int32 {
    @objc get
  }
  @objc public var COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: Swift.Int32 {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_EXT_shader_texture_lod) public class TNS_EXT_shader_texture_lod : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc(TNSImageAssetFormat) public enum TNSImageAssetFormat : Swift.Int, Swift.RawRepresentable {
  public init(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias RawValue = Swift.Int
  case JPG
  case PNG
  case ICO
  case BMP
  case TIFF
}
@objc(TNSTextBaseLine) public enum TNSTextBaseLine : Swift.Int, Swift.RawRepresentable {
  case Top
  case Hanging
  case Middle
  case Alphabetic
  case Ideographic
  case Bottom
  public typealias RawValue = Swift.UInt32
  public var rawValue: CanvasNative.TNSTextBaseLine.RawValue {
    get
  }
  public init?(rawValue: CanvasNative.TNSTextBaseLine.RawValue)
  public init?(string: Swift.String)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(CanvasGLKView) @_Concurrency.MainActor(unsafe) public class CanvasGLKView : GLKit.GLKView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setNeedsDisplay()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setNeedsDisplay(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(CanvasCPUView) @_Concurrency.MainActor(unsafe) public class CanvasCPUView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var ignorePixelScaling: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
public protocol RenderListener {
  func didDraw()
}
public enum ContextType : Swift.Int, Swift.RawRepresentable {
  case none
  case webGL
  case twoD
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class GLRenderer : ObjectiveC.NSObject, GLKit.GLKViewDelegate {
  public var attributes: CanvasNative.TNSContextAttributes
  public func updateDirection(_ direction: Swift.String)
  public var invalidateState: Swift.Int {
    get
    set
  }
  public var context: Swift.Int64
  public var view: UIKit.UIView {
    get
  }
  public var didMoveOffMain: Swift.Bool
  public var drawingBufferWidth: Swift.Int {
    get
  }
  public var drawingBufferHeight: Swift.Int {
    get
  }
  public var width: Swift.Float {
    get
  }
  public var height: Swift.Float {
    get
  }
  public func setupContext()
  public init(useCpu: Swift.Bool)
  public func setRenderListener(listener: CanvasNative.RenderListener?)
  public var isOpaque: Swift.Bool {
    get
    set
  }
  @objc deinit
  @discardableResult
  public func ensureIsContextIsCurrent() -> Swift.Bool
  public func resize()
  public func setup()
  public var contextType: CanvasNative.ContextType
  public func render()
  public func flush()
  public func ensureIsReady()
  public func pause()
  public func resume()
  @objc public func glkView(_ view: GLKit.GLKView, drawIn rect: CoreFoundation.CGRect)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(TNSIndexedParameter) public class TNSIndexedParameter : ObjectiveC.NSObject {
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_EXT_color_buffer_float) public class TNS_EXT_color_buffer_float : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var R16F: Swift.Int32 {
    @objc get
  }
  @objc public var RG16F: Swift.Int32 {
    @objc get
  }
  @objc public var RGB16F: Swift.Int32 {
    @objc get
  }
  @objc public var R32F: Swift.Int32 {
    @objc get
  }
  @objc public var RG32F: Swift.Int32 {
    @objc get
  }
  @objc public var RGBA32F: Swift.Int32 {
    @objc get
  }
  @objc public var R11F_G11F_B10F: Swift.Int32 {
    @objc get
  }
  @objc deinit
}
@objc(TNSCompositeOperationType) public enum TNSCompositeOperationType : Swift.Int, Swift.RawRepresentable {
  case SourceOver
  case SourceIn
  case SourceOut
  case SourceAtop
  case DestinationOver
  case DestinationIn
  case DestinationOut
  case DestinationAtop
  case Lighter
  case Copy
  case Xor
  case Multiply
  case Screen
  case Overlay
  case Darken
  case Lighten
  case ColorDodge
  case ColorBurn
  case HardLight
  case SoftLight
  case Difference
  case Exclusion
  case Hue
  case Saturation
  case Color
  case Luminosity
  public typealias RawValue = Swift.UInt32
  public var rawValue: CanvasNative.TNSCompositeOperationType.RawValue {
    get
  }
  public init?(rawValue: CanvasNative.TNSCompositeOperationType.RawValue)
  public init?(string: Swift.String)
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNSImageAsset) public class TNSImageAsset : ObjectiveC.NSObject {
  @objc public static var _queue: Dispatch.DispatchQueue?
  @objc override dynamic public init()
  @objc public func loadImageFromPath(path: Swift.String) -> Swift.Bool
  @objc public func loadImageFromUrl(url: Swift.String) -> Swift.Bool
  @objc public func loadImageFromUrlAsync(url: Swift.String, callback: @escaping (Swift.String?) -> ())
  @objc public func loadImageFromPathAsync(path: Swift.String, callback: @escaping (Swift.String?) -> ())
  @objc public func loadImageFromBuffer(_ buffer: Foundation.NSData) -> Swift.Bool
  @objc public func loadImageFromBufferAsync(_ buffer: Foundation.NSData, callback: @escaping (Swift.String?) -> ())
  @objc public func loadImageFromBytes(array: [Swift.UInt8]) -> Swift.Bool
  @objc public func loadImageFromBytesAsync(array: [Swift.UInt8], callback: @escaping (Swift.String?) -> ())
  @objc public func loadImageFromImage(image: UIKit.UIImage) -> Swift.Bool
  @objc public func loadImageFromImageAsync(image: UIKit.UIImage, callback: @escaping (Swift.String?) -> ())
  @objc public func getRawBytes() -> Swift.UnsafeMutablePointer<Swift.UInt8>?
  @objc public var width: Swift.Int32 {
    @objc get
  }
  @objc public var height: Swift.Int32 {
    @objc get
  }
  @objc public func flipX()
  @objc public func flipY()
  @objc public func scale(x: Swift.UInt32, y: Swift.UInt32)
  @objc public func save(path: Swift.String, format: CanvasNative.TNSImageAssetFormat) -> Swift.Bool
  @objc public func saveAsync(path: Swift.String, format: CanvasNative.TNSImageAssetFormat, callback: @escaping (Swift.Bool) -> ())
  @objc public var error: Swift.String? {
    @objc get
  }
  @objc deinit
}
@objc(TNSImageBitmapColorSpaceConversion) public enum TNSImageBitmapColorSpaceConversion : Swift.Int, Swift.RawRepresentable {
  case Default
  case None
  public typealias RawValue = Swift.Int32
  public var rawValue: CanvasNative.TNSImageBitmapColorSpaceConversion.RawValue {
    get
  }
  public init?(rawValue: CanvasNative.TNSImageBitmapColorSpaceConversion.RawValue)
  public init?(string: Swift.String)
}
@objc(TNSImageBitmapResizeQuality) public enum TNSImageBitmapResizeQuality : Swift.Int, Swift.RawRepresentable {
  case Low
  case Medium
  case High
  case Pixelated
  public typealias RawValue = Swift.Int32
  public var rawValue: CanvasNative.TNSImageBitmapResizeQuality.RawValue {
    get
  }
  public init?(rawValue: CanvasNative.TNSImageBitmapResizeQuality.RawValue)
  public init?(string: Swift.String)
}
@_inheritsConvenienceInitializers @objc(TNSCanvasRenderingContext) public class TNSCanvasRenderingContext : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_WEBGL_draw_buffers) public class TNS_WEBGL_draw_buffers : ObjectiveC.NSObject {
  @objc public var COLOR_ATTACHMENT0_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT1_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT2_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT3_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT4_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT5_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT6_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT7_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT8_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT9_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT10_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT11_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT12_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT13_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT14_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var COLOR_ATTACHMENT15_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var DRAW_BUFFER0_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var DRAW_BUFFER1_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var DRAW_BUFFER2_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var DRAW_BUFFER3_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var DRAW_BUFFER4_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var DRAW_BUFFER5_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var DRAW_BUFFER6_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var DRAW_BUFFER7_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var DRAW_BUFFER8_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var DRAW_BUFFER9_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var DRAW_BUFFER10_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var DRAW_BUFFER11_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var DRAW_BUFFER12_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var DRAW_BUFFER13_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var DRAW_BUFFER14_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var DRAW_BUFFER15_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var MAX_COLOR_ATTACHMENTS_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public var MAX_DRAW_BUFFERS_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc public func drawBuffersWEBGL(buffers: [Swift.Int32])
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNS_WEBGL_depth_texture) public class TNS_WEBGL_depth_texture : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var UNSIGNED_INT_24_8_WEBGL: Swift.Int32 {
    @objc get
  }
  @objc deinit
}
@objc(CanvasColorStyleType) public enum CanvasColorStyleType : Swift.Int, Swift.RawRepresentable {
  case Color
  case Gradient
  case Pattern
  public typealias RawValue = Swift.String
  public var rawValue: CanvasNative.CanvasColorStyleType.RawValue {
    get
  }
  public init?(rawValue: CanvasNative.CanvasColorStyleType.RawValue)
}
@objc public protocol ICanvasColorStyle {
  @objc func getStyleType() -> CanvasNative.CanvasColorStyleType
}
@objc public enum TNSPatternRepetition : Swift.Int, Swift.RawRepresentable {
  case Repeat
  case RepeatX
  case RepeatY
  case NoRepeat
  public typealias RawValue = Swift.UInt32
  public var rawValue: Swift.UInt32 {
    get
  }
  public init?(rawValue: CanvasNative.TNSPatternRepetition.RawValue)
  public init?(rawValue: Swift.String)
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNSColorStyle) public class TNSColorStyle : ObjectiveC.NSObject {
  @objcMembers @objc(TNSColor) public class TNSColor : ObjectiveC.NSObject, CanvasNative.ICanvasColorStyle {
    @objc public init(_ color: Swift.String)
    @objc public var color: Swift.String {
      @objc get
    }
    @objc public func getStyleType() -> CanvasNative.CanvasColorStyleType
    @objc deinit
  }
  @_hasMissingDesignatedInitializers @objcMembers @objc(TNSGradient) public class TNSGradient : ObjectiveC.NSObject, CanvasNative.ICanvasColorStyle {
    @objc public func getStyleType() -> CanvasNative.CanvasColorStyleType
    @objc public func addColorStop(_ offset: Swift.Float, _ color: Swift.String)
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(TNSLinearGradient) public class TNSLinearGradient : CanvasNative.TNSColorStyle.TNSGradient {
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(TNSRadialGradient) public class TNSRadialGradient : CanvasNative.TNSColorStyle.TNSGradient {
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(TNSConicGradient) public class TNSConicGradient : CanvasNative.TNSColorStyle.TNSGradient {
    @objc deinit
  }
  @_hasMissingDesignatedInitializers @objcMembers @objc(TNSPattern) public class TNSPattern : ObjectiveC.NSObject, CanvasNative.ICanvasColorStyle {
    @objc public func setTransform(matrix: CanvasNative.TNSDOMMatrix)
    @objc deinit
    @objc public func getStyleType() -> CanvasNative.CanvasColorStyleType
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(TNSTextMetrics) public class TNSTextMetrics : ObjectiveC.NSObject {
  @objc deinit
  @objc public var width: Swift.Float {
    @objc get
  }
  @objc public var actualBoundingBoxLeft: Swift.Float {
    @objc get
  }
  @objc public var actualBoundingBoxRight: Swift.Float {
    @objc get
  }
  @objc public var actualBoundingBoxAscent: Swift.Float {
    @objc get
  }
  @objc public var actualBoundingBoxDescent: Swift.Float {
    @objc get
  }
  @objc public var fontBoundingBoxAscent: Swift.Float {
    @objc get
  }
  @objc public var fontBoundingBoxDescent: Swift.Float {
    @objc get
  }
  @objc public var emHeightAscent: Swift.Float {
    @objc get
  }
  @objc public var emHeightDescent: Swift.Float {
    @objc get
  }
  @objc public var hangingBaseline: Swift.Float {
    @objc get
  }
  @objc public var alphabeticBaseline: Swift.Float {
    @objc get
  }
  @objc public var ideographicBaseline: Swift.Float {
    @objc get
  }
}
extension CanvasNative.TNSTextAlignment : Swift.Equatable {}
extension CanvasNative.TNSTextAlignment : Swift.Hashable {}
extension CanvasNative.TNSFillRule : Swift.Equatable {}
extension CanvasNative.TNSFillRule : Swift.Hashable {}
extension CanvasNative.TNSTextDirection : Swift.Equatable {}
extension CanvasNative.TNSTextDirection : Swift.Hashable {}
extension CanvasNative.TNSImageBitmapPremultiplyAlpha : Swift.Equatable {}
extension CanvasNative.TNSImageBitmapPremultiplyAlpha : Swift.Hashable {}
extension CanvasNative.TNSLineJoin : Swift.Equatable {}
extension CanvasNative.TNSLineJoin : Swift.Hashable {}
extension CanvasNative.TNSLineCap : Swift.Equatable {}
extension CanvasNative.TNSLineCap : Swift.Hashable {}
extension CanvasNative.TNSImageSmoothingQuality : Swift.Equatable {}
extension CanvasNative.TNSImageSmoothingQuality : Swift.Hashable {}
extension CanvasNative.TNSImageAssetFormat : Swift.Equatable {}
extension CanvasNative.TNSImageAssetFormat : Swift.Hashable {}
extension CanvasNative.TNSTextBaseLine : Swift.Equatable {}
extension CanvasNative.TNSTextBaseLine : Swift.Hashable {}
extension CanvasNative.ContextType : Swift.Equatable {}
extension CanvasNative.ContextType : Swift.Hashable {}
extension CanvasNative.TNSCompositeOperationType : Swift.Equatable {}
extension CanvasNative.TNSCompositeOperationType : Swift.Hashable {}
extension CanvasNative.TNSImageBitmapColorSpaceConversion : Swift.Equatable {}
extension CanvasNative.TNSImageBitmapColorSpaceConversion : Swift.Hashable {}
extension CanvasNative.TNSImageBitmapResizeQuality : Swift.Equatable {}
extension CanvasNative.TNSImageBitmapResizeQuality : Swift.Hashable {}
extension CanvasNative.CanvasColorStyleType : Swift.Equatable {}
extension CanvasNative.CanvasColorStyleType : Swift.Hashable {}
extension CanvasNative.TNSPatternRepetition : Swift.Equatable {}
extension CanvasNative.TNSPatternRepetition : Swift.Hashable {}
