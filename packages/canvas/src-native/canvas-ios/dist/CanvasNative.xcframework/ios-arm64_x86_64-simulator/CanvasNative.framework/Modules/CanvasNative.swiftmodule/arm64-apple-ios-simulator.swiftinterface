// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CanvasNative
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
@_exported import CanvasNative
import CoreVideo
import Foundation
import GLKit
import OpenGLES
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@objc(NSCCanvasListener) public protocol NSCCanvasListener {
  @objc func contextReady()
}
@objc @_inheritsConvenienceInitializers public class CanvasHelpers : ObjectiveC.NSObject {
  public static func getBytesFromUIImage(_ image: UIKit.UIImage) -> Foundation.NSMutableData
  public static func createPattern(_ context: Swift.Int64, _ image: UIKit.UIImage, _ repetition: Swift.String) -> Swift.Int64
  public static func loadImageAssetWithContext(_ asset: Swift.Int64, _ image: UIKit.UIImage) -> Swift.Bool
  public static func drawImage(context: Swift.Int64, image: UIKit.UIImage, dx: Swift.Float, dy: Swift.Float)
  public static func drawImage(context: Swift.Int64, image: UIKit.UIImage, dx: Swift.Float, dy: Swift.Float, dw: Swift.Float, dh: Swift.Float)
  public static func drawImage(context: Swift.Int64, image: UIKit.UIImage, sx: Swift.Float, sy: Swift.Float, sw: Swift.Float, sh: Swift.Float, dx: Swift.Float, dy: Swift.Float, dw: Swift.Float, dh: Swift.Float)
  public static func initGLWithView(_ view: Swift.Int64, _ width: Swift.Int32, _ height: Swift.Int32, _ alpha: Swift.Bool, _ antialias: Swift.Bool, _ depth: Swift.Bool, _ fail_if_major_performance_caveat: Swift.Bool, _ power_preference: Swift.String, _ premultiplied_alpha: Swift.Bool, _ preserve_drawing_buffer: Swift.Bool, _ stencil: Swift.Bool, _ desynchronized: Swift.Bool, _ xr_compatible: Swift.Bool, _ version: Swift.Int32, _ is_canvas: Swift.Bool) -> Swift.Int64
  public static func releaseGL(_ context: Swift.Int64)
  public static func getGLPointer(_ context: Swift.Int64) -> Swift.Int64
  public static func releaseGLPointer(_ context: Swift.Int64)
  public static func create2DContext(_ context: Swift.Int64, _ width: Swift.Int32, _ height: Swift.Int32, _ alpha: Swift.Bool, _ density: Swift.Float, _ samples: Swift.Int32, _ font_color: Swift.Int32, _ ppi: Swift.Float, _ direction: Swift.Int32) -> Swift.Int64
  public static func updateGLSurfaceWithView(_ view: Swift.Int64, _ width: Swift.Int32, _ height: Swift.Int32, _ context: Swift.Int64)
  public static func test2D(_ context: Swift.Int64)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(NSCCanvas) @_Concurrency.MainActor(unsafe) public class NSCCanvas : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public static func getViews() -> Foundation.NSMapTable<Foundation.NSString, CanvasNative.NSCCanvas>
  @objc @_Concurrency.MainActor(unsafe) public func getViewPtr() -> Swift.UnsafeMutableRawPointer
  @objc @_Concurrency.MainActor(unsafe) public var ignorePixelScaling: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var nativeGL: Swift.Int64 {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var nativeContext: Swift.Int64 {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var drawingBufferWidth: Swift.Int {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var drawingBufferHeight: Swift.Int {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var width: Swift.Float {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var height: Swift.Float {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public func initContext(_ type: Swift.String, _ alpha: Swift.Bool = true, _ antialias: Swift.Bool = true, _ depth: Swift.Bool = true, _ failIfMajorPerformanceCaveat: Swift.Bool = false, _ powerPreference: Swift.String = "default", _ premultipliedAlpha: Swift.Bool = true, _ preserveDrawingBuffer: Swift.Bool = false, _ stencil: Swift.Bool = false, _ desynchronized: Swift.Bool = false, _ xrCompatible: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) public func create2DContext(_ alpha: Swift.Bool, _ antialias: Swift.Bool, _ depth: Swift.Bool, _ failIfMajorPerformanceCaveat: Swift.Bool, _ powerPreference: Swift.String, _ premultipliedAlpha: Swift.Bool, _ preserveDrawingBuffer: Swift.Bool, _ stencil: Swift.Bool, _ desynchronized: Swift.Bool, _ xrCompatible: Swift.Bool, _ fontColor: Swift.Int32) -> Swift.Int64
  @objc @_Concurrency.MainActor(unsafe) public func forceLayout(_ width: CoreFoundation.CGFloat, _ height: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public func render()
  @objc @_Concurrency.MainActor(unsafe) public func context2DTest(_ context: Swift.Int64)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public func setListener(_ listener: CanvasNative.NSCCanvasListener?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(TNSRender) public class NSCRender : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func createSurface()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(TNSSVG) @_Concurrency.MainActor(unsafe) public class NSCSVG : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var ignorePixelScaling: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var src: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var srcPath: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(NSCImageBitmap) public class NSCImageBitmap : ObjectiveC.NSObject {
  @objc public static let queue: Dispatch.DispatchQueue
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Utils) public class Utils : ObjectiveC.NSObject {
  @objc public static func createTextureCache() -> CoreVideo.CVOpenGLESTextureCache?
  @objc public static func createImage(_ texturecache: CoreVideo.CVOpenGLESTextureCache, _ buffer: CoreVideo.CVImageBuffer, _ textureAttributes: CoreFoundation.CFDictionary?, _ target: OpenGLES.GLenum, _ internalFormat: OpenGLES.GLint, _ width: OpenGLES.GLsizei, _ height: OpenGLES.GLsizei, _ format: OpenGLES.GLenum, _ type: OpenGLES.GLenum, _ planeIndex: Swift.Int) -> CoreVideo.CVOpenGLESTexture?
  @objc public static func setupRender() -> CanvasNative.NSCRender
  @objc public static func drawFrame(_ player: AVFoundation.AVPlayer, _ output: AVFoundation.AVPlayerItemVideoOutput, _ videoSize: CoreFoundation.CGSize, _ render: CanvasNative.NSCRender, _ internalFormat: Swift.Int32, _ format: Swift.Int32, _ flipYWebGL: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(NSCCanvasRenderingContext2D) public class NSCCanvasRenderingContext2D : CanvasNative.NSCCanvasRenderingContext {
  @objc public static func createPattern(_ context: Swift.Int64, _ src: UIKit.UIImage, _ repetition: Swift.String) -> Swift.Int64
  @objc public static func drawImage(_ context: Swift.Int64, _ image: UIKit.UIImage, _ dx: Swift.Float, _ dy: Swift.Float)
  @objc public static func drawImage(_ context: Swift.Int64, _ image: UIKit.UIImage, _ dx: Swift.Float, _ dy: Swift.Float, _ dWidth: Swift.Float, _ dHeight: Swift.Float)
  @objc public static func drawImage(_ context: Swift.Int64, _ image: UIKit.UIImage, _ sx: Swift.Float, _ sy: Swift.Float, _ sWidth: Swift.Float, _ sHeight: Swift.Float, _ dx: Swift.Float, _ dy: Swift.Float, _ dWidth: Swift.Float, _ dHeight: Swift.Float)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(CanvasGLKView) @_Concurrency.MainActor(unsafe) public class CanvasGLKView : GLKit.GLKView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setNeedsDisplay()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setNeedsDisplay(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(CanvasCPUView) @_Concurrency.MainActor(unsafe) public class CanvasCPUView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var ignorePixelScaling: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(NSCImageAsset) public class NSCImageAsset : ObjectiveC.NSObject {
  @objc public static func loadImageFromImageSync(_ context: Swift.Int64, _ image: UIKit.UIImage) -> Swift.Bool
  @objc public static func loadImageFromImage(_ context: Swift.Int64, _ image: UIKit.UIImage, _ callback: @escaping (Swift.Bool) -> ())
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NSCCanvasRenderingContext) public class NSCCanvasRenderingContext : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
