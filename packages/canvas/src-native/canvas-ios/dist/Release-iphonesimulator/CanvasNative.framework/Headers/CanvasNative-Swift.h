#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef CANVASNATIVE_SWIFT_H
#define CANVASNATIVE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreVideo;
@import Dispatch;
@import Foundation;
@import GLKit;
@import ObjectiveC;
@import OpenGLES;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CanvasNative",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSCoder;

SWIFT_CLASS_NAMED("CanvasCPUView")
@interface CanvasCPUView : UIView
@property (nonatomic) BOOL ignorePixelScaling;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)drawRect:(CGRect)rect;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, CanvasColorStyleType, "CanvasColorStyleType", open) {
  CanvasColorStyleTypeColor = 0,
  CanvasColorStyleTypeGradient = 1,
  CanvasColorStyleTypePattern = 2,
};

@class EAGLContext;

SWIFT_CLASS_NAMED("CanvasGLKView")
@interface CanvasGLKView : GLKView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame context:(EAGLContext * _Nonnull)context SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12CanvasNative10GLRenderer")
@interface GLRenderer : NSObject <GLKViewDelegate>
- (void)glkView:(GLKView * _Nonnull)view drawInRect:(CGRect)rect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP12CanvasNative17ICanvasColorStyle_")
@protocol ICanvasColorStyle
- (enum CanvasColorStyleType)getStyleType SWIFT_WARN_UNUSED_RESULT;
@end

@class NSString;

SWIFT_CLASS_NAMED("TNSAnimationFrame")
@interface TNSAnimationFrame : NSObject
+ (void)requestAnimationFrameToLoop:(void (^ _Nonnull)(float))toLoop;
+ (void)cancelAnimationFrameWithId:(NSString * _Nonnull)id;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TNSDOMMatrix;
@class UIImage;
@protocol TNSCanvasListener;
@class TNSCanvasRenderingContext;
@class TNSContextAttributes;

SWIFT_CLASS_NAMED("TNSCanvas")
@interface TNSCanvas : UIView
+ (NSMapTable<NSString *, TNSCanvas *> * _Nonnull)getViews SWIFT_WARN_UNUSED_RESULT;
- (void * _Nullable)getViewPtr SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL ignorePixelScaling;
+ (TNSDOMMatrix * _Nonnull)createSVGMatrix SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL handleInvalidationManually;
- (void)didDraw;
- (NSString * _Nonnull)toDataURL SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toDataURL:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toDataURL:(NSString * _Nonnull)type :(float)format SWIFT_WARN_UNUSED_RESULT;
- (void)toDataURLAsync:(void (^ _Nonnull)(NSString * _Nonnull))callback;
- (void)toDataURLAsync:(NSString * _Nonnull)type :(void (^ _Nonnull)(NSString * _Nonnull))callback;
- (void)toDataURLAsync:(NSString * _Nonnull)type :(float)format :(void (^ _Nonnull)(NSString * _Nonnull))callback;
- (NSArray<NSNumber *> * _Nonnull)snapshot SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getImage SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Nonnull)snapshotEncoded SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isGL;
- (GLint)getId SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) float width;
@property (nonatomic, readonly) float height;
- (void)updateDirection:(NSString * _Nonnull)direction;
@property (nonatomic) int64_t context;
- (void)doDraw;
- (void)flush;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame useCpu:(BOOL)useCpu OBJC_DESIGNATED_INITIALIZER;
- (void)setListener:(id <TNSCanvasListener> _Nullable)listener;
@property (nonatomic, readonly) float fps;
+ (void)layoutView:(UIView * _Nonnull)view :(CGFloat)width :(CGFloat)height;
- (void)layoutSubviews;
- (void)resume;
- (void)pause;
- (void)moveToMain;
- (void)moveOffMain;
- (void)handleMoveOffMain;
- (void)handleMoveToMain;
- (TNSCanvasRenderingContext * _Nullable)getContext:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
- (TNSCanvasRenderingContext * _Nullable)getContextWithType:(NSString * _Nonnull)type attributes:(NSString * _Nonnull)attributes SWIFT_WARN_UNUSED_RESULT;
- (TNSCanvasRenderingContext * _Nullable)getContext:(NSString * _Nonnull)type contextAttributes:(NSDictionary<NSString *, id> * _Nonnull)contextAttributes SWIFT_WARN_UNUSED_RESULT;
- (TNSCanvasRenderingContext * _Nullable)getContextWithType:(NSString * _Nonnull)type contextAttributes:(TNSContextAttributes * _Nonnull)contextAttributes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL_NAMED("TNSCanvasListener")
@protocol TNSCanvasListener
- (void)contextReady;
@end


SWIFT_CLASS_NAMED("TNSCanvasRenderingContext")
@interface TNSCanvasRenderingContext : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum TNSCompositeOperationType : NSInteger;
enum TNSImageSmoothingQuality : uint32_t;
enum TNSLineCap : NSInteger;
enum TNSLineJoin : NSInteger;
enum TNSTextAlignment : NSInteger;
enum TNSTextBaseLine : NSInteger;
@class TNSPath2D;
enum TNSFillRule : NSInteger;
@class TNSLinearGradient;
@class TNSRadialGradient;
@class TNSConicGradient;
enum TNSPatternRepetition : NSInteger;
@class TNSImageData;
@class TNSTextMetrics;

SWIFT_CLASS_NAMED("TNSCanvasRenderingContext2D")
@interface TNSCanvasRenderingContext2D : TNSCanvasRenderingContext
- (nonnull instancetype)init:(TNSCanvas * _Nonnull)canvas OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nonnull font;
@property (nonatomic, copy) NSString * _Nonnull filter;
@property (nonatomic) float globalAlpha;
@property (nonatomic) enum TNSCompositeOperationType globalCompositeOperation;
@property (nonatomic) BOOL imageSmoothingEnabled;
@property (nonatomic) enum TNSImageSmoothingQuality imageSmoothingQuality;
@property (nonatomic) enum TNSLineCap lineCap;
@property (nonatomic) float lineDashOffset;
@property (nonatomic) float lineWidth;
@property (nonatomic) enum TNSLineJoin lineJoin;
@property (nonatomic) float miterLimit;
@property (nonatomic) float shadowBlur;
@property (nonatomic, copy) NSString * _Nonnull shadowColor;
@property (nonatomic) float shadowOffsetX;
@property (nonatomic) float shadowOffsetY;
@property (nonatomic) enum TNSTextAlignment textAlign;
@property (nonatomic) enum TNSTextBaseLine textBaseline;
- (void)setFillStyleWithString:(NSString * _Nonnull)color;
@property (nonatomic, strong) id <ICanvasColorStyle> _Nonnull fillStyle;
- (void)setStrokeStyleWithString:(NSString * _Nonnull)color;
@property (nonatomic, strong) id <ICanvasColorStyle> _Nonnull strokeStyle;
- (void)fillRect:(float)x :(float)y :(float)width :(float)height;
- (void)strokeRect:(float)x :(float)y :(float)width :(float)height;
- (void)fillText:(NSString * _Nonnull)text :(float)x :(float)y;
- (void)fillText:(NSString * _Nonnull)text :(float)x :(float)y :(float)width;
- (void)strokeText:(NSString * _Nonnull)text :(float)x :(float)y;
- (void)strokeText:(NSString * _Nonnull)text :(float)x :(float)y :(float)width;
- (void)rect:(float)x :(float)y :(float)width :(float)height;
- (void)roundRectWithX:(float)x y:(float)y width:(float)width height:(float)height topLeft:(float)topLeft topRight:(float)topRight bottomRight:(float)bottomRight bottomLeft:(float)bottomLeft;
- (void)roundRectWithX:(float)x y:(float)y width:(float)width height:(float)height radii:(float)radii;
- (void)roundRect:(float)x :(float)y :(float)width :(float)height :(NSArray<NSNumber *> * _Nonnull)radii;
- (void)fill;
- (void)fillWithValue:(id _Nonnull)value;
- (void)fill:(TNSPath2D * _Nonnull)path :(enum TNSFillRule)rule;
- (void)stroke;
- (void)stroke:(TNSPath2D * _Nullable)path;
- (void)beginPath;
- (void)moveTo:(float)x :(float)y;
- (void)lineTo:(float)x :(float)y;
- (void)closePath;
- (void)arc:(float)x :(float)y :(float)radius :(float)startAngle :(float)endAngle;
- (void)arc:(float)x :(float)y :(float)radius :(float)startAngle :(float)endAngle :(BOOL)anticlockwise;
- (void)arcTo:(float)x1 :(float)y1 :(float)x2 :(float)y2 :(float)radius;
- (void)bezierCurveTo:(float)cp1x :(float)cp1y :(float)cp2x :(float)cp2y :(float)x :(float)y;
- (void)ellipse:(float)x :(float)y :(float)radiusX :(float)radiusY :(float)rotation :(float)startAngle :(float)endAngle;
- (void)ellipse:(float)x :(float)y :(float)radiusX :(float)radiusY :(float)rotation :(float)startAngle :(float)endAngle :(BOOL)anticlockwise;
- (void)clip;
- (void)clip:(id _Nonnull)value;
- (void)clip:(TNSPath2D * _Nonnull)path :(enum TNSFillRule)rule;
- (void)clearRect:(float)x :(float)y :(float)width :(float)height;
- (void)setLineDash:(NSArray<NSNumber *> * _Nonnull)segments;
- (TNSCanvas * _Nonnull)getCanvas SWIFT_WARN_UNUSED_RESULT;
- (TNSLinearGradient * _Nonnull)createLinearGradient:(float)x0 :(float)y0 :(float)x1 :(float)y1 SWIFT_WARN_UNUSED_RESULT;
- (TNSRadialGradient * _Nonnull)createRadialGradient:(float)x0 :(float)y0 :(float)r0 :(float)x1 :(float)y1 :(float)r1 SWIFT_WARN_UNUSED_RESULT;
- (TNSConicGradient * _Nonnull)createConicGradient:(float)startAngle :(float)x :(float)y SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)createPattern:(id _Nonnull)value :(enum TNSPatternRepetition)repetition SWIFT_WARN_UNUSED_RESULT;
- (void)setTransform:(float)a :(float)b :(float)c :(float)d :(float)e :(float)f;
- (void)scale:(float)x :(float)y;
- (void)rotate:(float)angle;
- (void)translate:(float)x :(float)y;
- (void)quadraticCurveTo:(float)cpx :(float)cpy :(float)x :(float)y;
- (void)drawImage:(id _Nonnull)image :(float)dx :(float)dy;
- (void)drawImage:(id _Nonnull)image :(float)dx :(float)dy :(float)dWidth :(float)dHeight;
- (void)drawImage:(id _Nonnull)image :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(float)dx :(float)dy :(float)dWidth :(float)dHeight;
- (TNSImageData * _Nonnull)createImageData:(int32_t)width :(int32_t)height SWIFT_WARN_UNUSED_RESULT;
- (TNSImageData * _Nonnull)createImageData:(TNSImageData * _Nonnull)imageData SWIFT_WARN_UNUSED_RESULT;
- (TNSImageData * _Nonnull)getImageData:(float)sx :(float)sy :(float)sw :(float)sh SWIFT_WARN_UNUSED_RESULT;
- (void)putImageData:(TNSImageData * _Nonnull)imageData :(float)dx :(float)dy;
- (void)putImageData:(TNSImageData * _Nonnull)imageData :(float)dx :(float)dy :(float)dirtyX :(float)dirtyY :(float)dirtyWidth :(float)dirtyHeight;
- (NSArray<NSNumber *> * _Nonnull)getLineDash SWIFT_WARN_UNUSED_RESULT;
- (void)save;
- (void)restore;
- (TNSTextMetrics * _Nonnull)measureText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)resetTransform;
- (void)transform:(float)a :(float)b :(float)c :(float)d :(float)e :(float)f;
- (BOOL)isPointInPath:(float)x :(float)y SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPointInPath:(float)x :(float)y :(enum TNSFillRule)fillRule SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPointInPath:(TNSPath2D * _Nonnull)path :(float)x :(float)y :(enum TNSFillRule)fillRule SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPointInStroke:(float)x :(float)y SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPointInStroke:(TNSPath2D * _Nonnull)path :(float)x :(float)y SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("TNSColorStyle")
@interface TNSColorStyle : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNSColor")
@interface TNSColor : NSObject <ICanvasColorStyle>
- (nonnull instancetype)init:(NSString * _Nonnull)color OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull color;
- (enum CanvasColorStyleType)getStyleType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("TNSGradient")
@interface TNSGradient : NSObject <ICanvasColorStyle>
- (enum CanvasColorStyleType)getStyleType SWIFT_WARN_UNUSED_RESULT;
- (void)addColorStop:(float)offset :(NSString * _Nonnull)color;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("TNSLinearGradient")
@interface TNSLinearGradient : TNSGradient
@end


SWIFT_CLASS_NAMED("TNSRadialGradient")
@interface TNSRadialGradient : TNSGradient
@end


SWIFT_CLASS_NAMED("TNSConicGradient")
@interface TNSConicGradient : TNSGradient
@end


SWIFT_CLASS_NAMED("TNSPattern")
@interface TNSPattern : NSObject <ICanvasColorStyle>
- (void)setTransformWithMatrix:(TNSDOMMatrix * _Nonnull)matrix;
- (enum CanvasColorStyleType)getStyleType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TNSCompositeOperationType, "TNSCompositeOperationType", open) {
  TNSCompositeOperationTypeSourceOver = 0,
  TNSCompositeOperationTypeSourceIn = 1,
  TNSCompositeOperationTypeSourceOut = 2,
  TNSCompositeOperationTypeSourceAtop = 3,
  TNSCompositeOperationTypeDestinationOver = 4,
  TNSCompositeOperationTypeDestinationIn = 5,
  TNSCompositeOperationTypeDestinationOut = 6,
  TNSCompositeOperationTypeDestinationAtop = 7,
  TNSCompositeOperationTypeLighter = 8,
  TNSCompositeOperationTypeCopy = 9,
  TNSCompositeOperationTypeXor = 10,
  TNSCompositeOperationTypeMultiply = 11,
  TNSCompositeOperationTypeScreen = 12,
  TNSCompositeOperationTypeOverlay = 13,
  TNSCompositeOperationTypeDarken = 14,
  TNSCompositeOperationTypeLighten = 15,
  TNSCompositeOperationTypeColorDodge = 16,
  TNSCompositeOperationTypeColorBurn = 17,
  TNSCompositeOperationTypeHardLight = 18,
  TNSCompositeOperationTypeSoftLight = 19,
  TNSCompositeOperationTypeDifference = 20,
  TNSCompositeOperationTypeExclusion = 21,
  TNSCompositeOperationTypeHue = 22,
  TNSCompositeOperationTypeSaturation = 23,
  TNSCompositeOperationTypeColor = 24,
  TNSCompositeOperationTypeLuminosity = 25,
};


SWIFT_CLASS_NAMED("TNSContextAttributes")
@interface TNSContextAttributes : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNSDOMMatrix")
@interface TNSDOMMatrix : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) float a;
@property (nonatomic) float b;
@property (nonatomic) float c;
@property (nonatomic) float d;
@property (nonatomic) float e;
@property (nonatomic) float f;
@property (nonatomic) float m11;
@property (nonatomic) float m12;
@property (nonatomic) float m13;
@property (nonatomic) float m14;
@property (nonatomic) float m21;
@property (nonatomic) float m22;
@property (nonatomic) float m23;
@property (nonatomic) float m24;
@property (nonatomic) float m31;
@property (nonatomic) float m32;
@property (nonatomic) float m33;
@property (nonatomic) float m34;
@property (nonatomic) float m41;
@property (nonatomic) float m42;
@property (nonatomic) float m43;
@property (nonatomic) float m44;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TNSFillRule, "TNSFillRule", open) {
  TNSFillRuleNonZero = 0,
  TNSFillRuleEvenOdd = 1,
};


SWIFT_CLASS_NAMED("TNSFramebufferAttachmentParameter")
@interface TNSFramebufferAttachmentParameter : NSObject
@property (nonatomic, readonly) BOOL isTexture;
@property (nonatomic, readonly) BOOL isRenderbuffer;
@property (nonatomic, readonly) int32_t value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIsTexture:(BOOL)isTexture isRenderbuffer:(BOOL)isRenderbuffer value:(int32_t)value OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;
enum TNSImageAssetFormat : NSInteger;

SWIFT_CLASS_NAMED("TNSImageAsset")
@interface TNSImageAsset : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) dispatch_queue_t _Nullable _queue;)
+ (dispatch_queue_t _Nullable)_queue SWIFT_WARN_UNUSED_RESULT;
+ (void)set_queue:(dispatch_queue_t _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)loadImageFromPathWithPath:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
- (BOOL)loadImageFromUrlWithUrl:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (void)loadImageFromUrlAsyncWithUrl:(NSString * _Nonnull)url callback:(void (^ _Nonnull)(NSString * _Nullable))callback;
- (void)loadImageFromPathAsyncWithPath:(NSString * _Nonnull)path callback:(void (^ _Nonnull)(NSString * _Nullable))callback;
- (BOOL)loadImageFromBuffer:(NSData * _Nonnull)buffer SWIFT_WARN_UNUSED_RESULT;
- (void)loadImageFromBufferAsync:(NSData * _Nonnull)buffer callback:(void (^ _Nonnull)(NSString * _Nullable))callback;
- (BOOL)loadImageFromBytesWithArray:(NSArray<NSNumber *> * _Nonnull)array SWIFT_WARN_UNUSED_RESULT;
- (void)loadImageFromBytesAsyncWithArray:(NSArray<NSNumber *> * _Nonnull)array callback:(void (^ _Nonnull)(NSString * _Nullable))callback;
- (BOOL)loadImageFromImageWithImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
- (void)loadImageFromImageAsyncWithImage:(UIImage * _Nonnull)image callback:(void (^ _Nonnull)(NSString * _Nullable))callback;
- (uint8_t * _Nullable)getRawBytes SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) int32_t width;
@property (nonatomic, readonly) int32_t height;
- (void)flipX;
- (void)flipY;
- (void)scaleWithX:(uint32_t)x y:(uint32_t)y;
- (BOOL)saveWithPath:(NSString * _Nonnull)path format:(enum TNSImageAssetFormat)format SWIFT_WARN_UNUSED_RESULT;
- (void)saveAsyncWithPath:(NSString * _Nonnull)path format:(enum TNSImageAssetFormat)format callback:(void (^ _Nonnull)(BOOL))callback;
@property (nonatomic, readonly, copy) NSString * _Nullable error;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TNSImageAssetFormat, "TNSImageAssetFormat", open) {
  TNSImageAssetFormatJPG = 0,
  TNSImageAssetFormatPNG = 1,
  TNSImageAssetFormatICO = 2,
  TNSImageAssetFormatBMP = 3,
  TNSImageAssetFormatTIFF = 4,
};

@class TNSImageBitmapOptions;

SWIFT_CLASS_NAMED("TNSImageBitmap")
@interface TNSImageBitmap : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) dispatch_queue_t _Nonnull queue;)
+ (dispatch_queue_t _Nonnull)queue SWIFT_WARN_UNUSED_RESULT;
+ (void)createFromImageBitmap:(TNSImageBitmap * _Nonnull)imageBitmap :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromImageBitmap:(TNSImageBitmap * _Nonnull)imageBitmap :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromImageAsset:(TNSImageAsset * _Nonnull)imageAsset :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromImageAsset:(TNSImageAsset * _Nonnull)imageAsset :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromImageData:(TNSImageData * _Nonnull)imageData :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromImageData:(TNSImageData * _Nonnull)imageData :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromCanvas:(TNSCanvas * _Nonnull)canvas :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromCanvas:(TNSCanvas * _Nonnull)canvas :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromData:(NSData * _Nonnull)data :(float)imageWidth :(float)imageHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromData:(NSData * _Nonnull)data :(float)imageWidth :(float)imageHeight :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromDataEncoded:(NSData * _Nonnull)data :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromDataEncoded:(NSData * _Nonnull)data :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromBytes:(NSArray<NSNumber *> * _Nonnull)bytes :(float)imageWidth :(float)imageHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromBytes:(NSArray<NSNumber *> * _Nonnull)bytes :(float)imageWidth :(float)imageHeight :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromBytesEncoded:(NSArray<NSNumber *> * _Nonnull)bytes :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromBytesEncoded:(NSArray<NSNumber *> * _Nonnull)bytes :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromUIImage:(UIImage * _Nonnull)canvas :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromUIImage:(UIImage * _Nonnull)canvas :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
@property (nonatomic, readonly) int32_t width;
@property (nonatomic, readonly) int32_t height;
- (void)close;
@property (nonatomic, readonly, copy) NSString * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TNSImageBitmapColorSpaceConversion, "TNSImageBitmapColorSpaceConversion", open) {
  TNSImageBitmapColorSpaceConversionDefault = 0,
  TNSImageBitmapColorSpaceConversionNone = 1,
};

enum TNSImageBitmapPremultiplyAlpha : NSInteger;
enum TNSImageBitmapResizeQuality : NSInteger;

SWIFT_CLASS_NAMED("TNSImageBitmapOptions")
@interface TNSImageBitmapOptions : NSObject
@property (nonatomic) BOOL flipY;
@property (nonatomic) enum TNSImageBitmapPremultiplyAlpha premultiplyAlpha;
@property (nonatomic) enum TNSImageBitmapColorSpaceConversion colorSpaceConversion;
@property (nonatomic) enum TNSImageBitmapResizeQuality resizeQuality;
@property (nonatomic) float resizeWidth;
@property (nonatomic) float resizeHeight;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TNSImageBitmapPremultiplyAlpha, "TNSImageBitmapPremultiplyAlpha", open) {
  TNSImageBitmapPremultiplyAlphaDefault = 0,
  TNSImageBitmapPremultiplyAlphaPremultiply = 1,
  TNSImageBitmapPremultiplyAlphaNone = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, TNSImageBitmapResizeQuality, "TNSImageBitmapResizeQuality", open) {
  TNSImageBitmapResizeQualityLow = 0,
  TNSImageBitmapResizeQualityMedium = 1,
  TNSImageBitmapResizeQualityHigh = 2,
  TNSImageBitmapResizeQualityPixelated = 3,
};


SWIFT_CLASS_NAMED("TNSImageData")
@interface TNSImageData : NSObject
@property (nonatomic, readonly, strong) NSData * _Nonnull data;
@property (nonatomic, readonly) int32_t width;
@property (nonatomic, readonly) int32_t height;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(uint32_t, TNSImageSmoothingQuality, "TNSImageSmoothingQuality", open) {
  TNSImageSmoothingQualityLow = 0,
  TNSImageSmoothingQualityMedium = 1,
  TNSImageSmoothingQualityHigh = 2,
};


SWIFT_CLASS_NAMED("TNSIndexedParameter")
@interface TNSIndexedParameter : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TNSLineCap, "TNSLineCap", open) {
  TNSLineCapButt = 0,
  TNSLineCapRound = 1,
  TNSLineCapSquare = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, TNSLineJoin, "TNSLineJoin", open) {
  TNSLineJoinRound = 0,
  TNSLineJoinBevel = 1,
  TNSLineJoinMiter = 2,
};


SWIFT_CLASS_NAMED("TNSPath2D")
@interface TNSPath2D : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPath:(TNSPath2D * _Nonnull)path OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithData:(NSString * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (void)addPath:(TNSPath2D * _Nonnull)path;
- (void)addPath:(TNSPath2D * _Nonnull)path :(TNSDOMMatrix * _Nullable)transform;
- (void)closePath;
- (void)moveTo:(float)x :(float)y;
- (void)lineTo:(float)x :(float)y;
- (void)bezierCurveTo:(float)cp1x :(float)cp1y :(float)cp2x :(float)cp2y :(float)x :(float)y;
- (void)quadraticCurveTo:(float)cpx :(float)cpy :(float)x :(float)y;
- (void)arc:(float)x :(float)y :(float)radius :(float)startAngle :(float)endAngle;
- (void)arc:(float)x :(float)y :(float)radius :(float)startAngle :(float)endAngle :(BOOL)anticlockwise;
- (void)arcTo:(float)x1 :(float)y1 :(float)x2 :(float)y2 :(float)radius;
- (void)ellipse:(float)x :(float)y :(float)radiusX :(float)radiusY :(float)rotation :(float)startAngle :(float)endAngle;
- (void)ellipse:(float)x :(float)y :(float)radiusX :(float)radiusY :(float)rotation :(float)startAngle :(float)endAngle :(BOOL)anticlockwise;
- (void)rect:(float)x :(float)y :(float)width :(float)height;
- (void)roundRect:(float)x :(float)y :(float)width :(float)height :(float)topLeft :(float)topRight :(float)bottomRight :(float)bottomLeft;
- (void)roundRectWithRadii:(float)x :(float)y :(float)width :(float)height :(float)radii;
- (void)roundRectWithX:(float)x y:(float)y width:(float)width height:(float)height radii:(NSArray<NSNumber *> * _Nonnull)radii;
@end

typedef SWIFT_ENUM(NSInteger, TNSPatternRepetition, open) {
  TNSPatternRepetitionRepeat = 0,
  TNSPatternRepetitionRepeatX = 1,
  TNSPatternRepetitionRepeatY = 2,
  TNSPatternRepetitionNoRepeat = 3,
};


SWIFT_CLASS_NAMED("TNSRender")
@interface TNSRender : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)createSurface;
@end


SWIFT_CLASS_NAMED("TNSSVG")
@interface TNSSVG : UIView
@property (nonatomic) BOOL ignorePixelScaling;
@property (nonatomic, copy) NSString * _Nullable src;
@property (nonatomic, copy) NSString * _Nullable srcPath;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)drawRect:(CGRect)rect;
- (UIImage * _Nullable)toImage SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)toData SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TNSTextAlignment, "TNSTextAlignment", open) {
  TNSTextAlignmentStart = 0,
  TNSTextAlignmentLeft = 1,
  TNSTextAlignmentCenter = 2,
  TNSTextAlignmentRight = 3,
  TNSTextAlignmentEnd = 4,
};

typedef SWIFT_ENUM_NAMED(NSInteger, TNSTextBaseLine, "TNSTextBaseLine", open) {
  TNSTextBaseLineTop = 0,
  TNSTextBaseLineHanging = 1,
  TNSTextBaseLineMiddle = 2,
  TNSTextBaseLineAlphabetic = 3,
  TNSTextBaseLineIdeographic = 4,
  TNSTextBaseLineBottom = 5,
};


SWIFT_CLASS_NAMED("TNSTextDecoder")
@interface TNSTextDecoder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEncoding:(NSString * _Nonnull)encoding OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull encoding;
- (NSString * _Nonnull)decodeWithBuffer:(NSData * _Nonnull)buffer SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithBuffer:(NSData * _Nonnull)buffer offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithBuffer:(NSData * _Nonnull)buffer offset:(NSInteger)offset length:(NSInteger)length SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithU8:(void * _Nonnull)buffer :(NSInteger)size SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithU8:(void * _Nonnull)buffer :(NSInteger)size offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI8:(void * _Nonnull)buffer :(NSInteger)size SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI8:(void * _Nonnull)buffer :(NSInteger)size offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithU16:(void * _Nonnull)buffer :(NSInteger)size SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithU16:(void * _Nonnull)buffer :(NSInteger)size offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI16:(void * _Nonnull)buffer :(NSInteger)size SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI16:(void * _Nonnull)buffer :(NSInteger)size offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI32:(void * _Nonnull)buffer :(NSInteger)size SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI32:(void * _Nonnull)buffer :(NSInteger)size offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithU32:(void * _Nonnull)buffer :(NSInteger)size SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithU32:(void * _Nonnull)buffer :(NSInteger)size offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithBytes:(NSArray<NSNumber *> * _Nonnull)bytes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI8:(NSArray<NSNumber *> * _Nonnull)bytes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithU16:(NSArray<NSNumber *> * _Nonnull)bytes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI16:(NSArray<NSNumber *> * _Nonnull)bytes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI32:(NSArray<NSNumber *> * _Nonnull)bytes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithU32:(NSArray<NSNumber *> * _Nonnull)bytes SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TNSTextDirection, "TNSTextDirection", open) {
  TNSTextDirectionLtr = 0,
  TNSTextDirectionRtl = 1,
};


SWIFT_CLASS_NAMED("TNSTextEncoder")
@interface TNSTextEncoder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEncoding:(NSString * _Nonnull)encoding OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull encoding;
- (NSData * _Nonnull)encodeWithText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)encodeWithPointer:(int8_t const * _Nullable)text SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("TNSTextMetrics")
@interface TNSTextMetrics : NSObject
@property (nonatomic, readonly) float width;
@property (nonatomic, readonly) float actualBoundingBoxLeft;
@property (nonatomic, readonly) float actualBoundingBoxRight;
@property (nonatomic, readonly) float actualBoundingBoxAscent;
@property (nonatomic, readonly) float actualBoundingBoxDescent;
@property (nonatomic, readonly) float fontBoundingBoxAscent;
@property (nonatomic, readonly) float fontBoundingBoxDescent;
@property (nonatomic, readonly) float emHeightAscent;
@property (nonatomic, readonly) float emHeightDescent;
@property (nonatomic, readonly) float hangingBaseline;
@property (nonatomic, readonly) float alphabeticBaseline;
@property (nonatomic, readonly) float ideographicBaseline;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNull;
@class TNSWebGLActiveInfo;
@class TNSWebGLShaderPrecisionFormat;

SWIFT_CLASS_NAMED("TNSWebGLRenderingContext")
@interface TNSWebGLRenderingContext : TNSCanvasRenderingContext
- (nonnull instancetype)init:(TNSCanvas * _Nonnull)canvas OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(TNSCanvas * _Nonnull)canvas :(NSDictionary<NSString *, id> * _Nonnull)attrs OBJC_DESIGNATED_INITIALIZER;
- (TNSCanvas * _Nonnull)getCanvas SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) int32_t drawingBufferWidth;
@property (nonatomic, readonly) int32_t drawingBufferHeight;
- (void)activeTexture:(uint32_t)texture;
- (void)attachShader:(uint32_t)program :(uint32_t)shader;
- (void)bindAttribLocation:(uint32_t)program :(uint32_t)index :(NSString * _Nonnull)name;
- (void)bindBuffer:(uint32_t)target :(uint32_t)buffer;
- (void)bindFramebuffer:(uint32_t)target :(uint32_t)framebuffer;
- (void)bindRenderbuffer:(uint32_t)target :(uint32_t)renderbuffer;
- (void)bindTexture:(uint32_t)target :(uint32_t)texture;
- (void)blendColor:(float)red :(float)green :(float)blue :(float)alpha;
- (void)blendEquation:(uint32_t)mode;
- (void)blendEquationSeparate:(uint32_t)modeRGB :(uint32_t)modeAlpha;
- (void)blendFunc:(uint32_t)sfactor :(uint32_t)dfactor;
- (void)blendFuncSeparate:(uint32_t)srcRGB :(uint32_t)dstRGB :(uint32_t)srcAlpha :(uint32_t)dstAlpha;
- (void)bufferData:(uint32_t)target size:(NSInteger)size :(uint32_t)usage;
- (void)bufferData:(uint32_t)target srcData:(NSNull * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferData:(uint32_t)target i8:(NSArray<NSNumber *> * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferData:(uint32_t)target srcData:(void * _Nonnull)srcData size:(NSInteger)size :(uint32_t)usage;
- (void)bufferData:(uint32_t)target srcData:(void * _Nonnull)srcData size:(NSInteger)size :(uint32_t)usage offset:(NSInteger)offset;
- (void)bufferData:(uint32_t)target u8:(NSArray<NSNumber *> * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferData:(uint32_t)target i16:(NSArray<NSNumber *> * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferData:(uint32_t)target u16:(NSArray<NSNumber *> * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferData:(uint32_t)target i32:(NSArray<NSNumber *> * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferData:(uint32_t)target u32:(NSArray<NSNumber *> * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferData:(uint32_t)target f32:(NSArray<NSNumber *> * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferData:(uint32_t)target f64:(NSArray<NSNumber *> * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset :(NSNull * _Nonnull)srcData;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset i8:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset srcData:(void * _Nonnull)srcData size:(NSInteger)size;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset srcData:(void * _Nonnull)srcData size:(NSInteger)size os:(NSInteger)os;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset u8:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset i16:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset u16:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset i32:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset u32:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset f32:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset f64:(NSArray<NSNumber *> * _Nonnull)srcData;
- (uint32_t)checkFramebufferStatus:(uint32_t)target SWIFT_WARN_UNUSED_RESULT;
- (void)clear:(uint32_t)mask;
- (void)clearColor:(float)red :(float)green :(float)blue :(float)alpha;
- (void)clearDepth:(float)depth;
- (void)clearStencil:(int32_t)stencil;
- (void)colorMask:(BOOL)red :(BOOL)green :(BOOL)blue :(BOOL)alpha;
- (void)commit;
- (void)compileShader:(uint32_t)shader;
- (void)compressedTexImage2D:(uint32_t)target :(int32_t)level :(uint32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(NSData * _Nullable)pixels;
- (void)compressedTexSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)width :(int32_t)height :(uint32_t)format :(NSData * _Nullable)pixels;
- (void)copyTexImage2D:(uint32_t)target :(int32_t)level :(uint32_t)internalformat :(int32_t)x :(int32_t)y :(int32_t)width :(int32_t)height :(int32_t)border;
- (void)copyTexSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)x :(int32_t)y :(int32_t)width :(int32_t)height;
- (uint32_t)createBuffer SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)createFramebuffer SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)createProgram SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)createRenderbuffer SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)createShader:(uint32_t)type SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)createTexture SWIFT_WARN_UNUSED_RESULT;
- (void)cullFace:(uint32_t)mode;
- (void)deleteBuffer:(uint32_t)buffer;
- (void)deleteFramebuffer:(uint32_t)frameBuffer;
- (void)deleteProgram:(uint32_t)program;
- (void)deleteRenderbuffer:(uint32_t)renderbuffer;
- (void)deleteShader:(uint32_t)shader;
- (void)deleteTexture:(uint32_t)texture;
- (void)depthFunc:(uint32_t)fn;
- (void)depthMask:(BOOL)flag;
- (void)depthRange:(float)zNear :(float)zFar;
- (void)detachShader:(uint32_t)program :(uint32_t)shader;
- (void)disable:(uint32_t)cap;
- (void)disableVertexAttribArray:(uint32_t)index;
- (void)drawArrays:(uint32_t)mode :(int32_t)first :(int32_t)count;
- (void)drawElements:(uint32_t)mode :(int32_t)count :(uint32_t)type :(NSInteger)offset;
- (void)enable:(uint32_t)cap;
- (void)enableVertexAttribArray:(uint32_t)index;
- (void)finish;
- (void)flush;
- (void)framebufferRenderbuffer:(uint32_t)target :(uint32_t)attachment :(uint32_t)renderbuffertarget :(uint32_t)renderbuffer;
- (void)framebufferTexture2D:(uint32_t)target :(uint32_t)attachment :(uint32_t)textarget :(uint32_t)texture :(int32_t)level;
- (void)frontFace:(uint32_t)mode;
- (void)generateMipmap:(uint32_t)target;
- (TNSWebGLActiveInfo * _Nonnull)getActiveAttrib:(uint32_t)program :(uint32_t)index SWIFT_WARN_UNUSED_RESULT;
- (TNSWebGLActiveInfo * _Nonnull)getActiveUniform:(uint32_t)program :(uint32_t)index SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Nonnull)getAttachedShaders:(uint32_t)program SWIFT_WARN_UNUSED_RESULT;
- (int32_t)getAttribLocation:(uint32_t)program :(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (int32_t)getBufferParameter:(uint32_t)target :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getContextAttributes SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getError SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getExtension:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (TNSFramebufferAttachmentParameter * _Nonnull)getFramebufferAttachmentParameter:(uint32_t)target :(uint32_t)attachment :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getParameter:(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getProgramInfoLog:(uint32_t)program SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getProgramParameter:(uint32_t)program :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (int32_t)getRenderbufferParameter:(uint32_t)target :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getShaderInfoLog:(uint32_t)shader SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getShaderParameter:(uint32_t)shader :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (TNSWebGLShaderPrecisionFormat * _Nonnull)getShaderPrecisionFormat:(uint32_t)shaderType :(uint32_t)precisionType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getShaderSource:(uint32_t)shader SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getSupportedExtensions SWIFT_WARN_UNUSED_RESULT;
- (int32_t)getTexParameter:(uint32_t)target :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getUniform:(uint32_t)program :(int32_t)location SWIFT_WARN_UNUSED_RESULT;
- (int32_t)getUniformLocation:(uint32_t)program :(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getVertexAttrib:(uint32_t)index :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getVertexAttribOffset:(uint32_t)index :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (void)hint:(uint32_t)target :(uint32_t)mode;
- (BOOL)isBuffer:(uint32_t)buffer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isContextLost SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEnabled:(uint32_t)cap SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isFramebuffer:(uint32_t)framebuffer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isProgram:(uint32_t)program SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isRenderbuffer:(uint32_t)renderbuffer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isShader:(uint32_t)shader SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isTexture:(uint32_t)texture SWIFT_WARN_UNUSED_RESULT;
- (void)lineWidth:(float)width;
- (void)linkProgram:(uint32_t)program;
- (void)pixelStorei:(uint32_t)pname :(uint32_t)param;
- (void)polygonOffset:(float)factor :(float)units;
- (void)readPixels:(int32_t)x :(int32_t)y :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type :(void * _Nonnull)pixels;
- (void)readPixels:(int32_t)x :(int32_t)y :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type :(void * _Nonnull)pixels offset:(NSInteger)offset;
- (void)renderbufferStorage:(uint32_t)target :(uint32_t)internalFormat :(int32_t)width :(int32_t)height;
- (void)sampleCoverage:(float)value :(BOOL)invert;
- (void)scissor:(int32_t)x :(int32_t)y :(int32_t)width :(int32_t)height;
- (void)shaderSource:(uint32_t)shader :(NSString * _Nonnull)source;
- (void)stencilFunc:(uint32_t)fn :(int32_t)ref :(uint32_t)mask;
- (void)stencilFuncSeparate:(uint32_t)face :(uint32_t)fn :(int32_t)ref :(uint32_t)mask;
- (void)stencilMask:(uint32_t)mask;
- (void)stencilMaskSeparate:(uint32_t)face :(uint32_t)mask;
- (void)stencilOp:(uint32_t)fail :(uint32_t)zfail :(uint32_t)zpass;
- (void)stencilOpSeparate:(uint32_t)face :(uint32_t)fail :(uint32_t)zfail :(uint32_t)zpass;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(uint32_t)format :(uint32_t)type data:(NSData * _Nonnull)data;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(uint32_t)format :(uint32_t)type u8:(NSArray<NSNumber *> * _Nonnull)pixels;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(uint32_t)format :(uint32_t)type pixels:(void const * _Nonnull)pixels size:(NSInteger)size;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(uint32_t)format :(uint32_t)type pixels:(void const * _Nonnull)pixels size:(NSInteger)size offset:(NSInteger)offset;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(uint32_t)format :(uint32_t)type u16:(NSArray<NSNumber *> * _Nonnull)pixels;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(uint32_t)format :(uint32_t)type u32:(NSArray<NSNumber *> * _Nonnull)pixels;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(uint32_t)format :(uint32_t)type f32:(NSArray<NSNumber *> * _Nonnull)pixels;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(uint32_t)format :(uint32_t)type :(NSNull * _Nonnull)pixels;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(uint32_t)format :(uint32_t)type pixels:(UIImage * _Nonnull)pixels;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(uint32_t)format :(uint32_t)type asset:(TNSImageAsset * _Nonnull)asset;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(uint32_t)format :(uint32_t)type bitmap:(TNSImageBitmap * _Nonnull)bitmap;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(uint32_t)format :(uint32_t)type :(NSNull * _Nonnull)pixels;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(uint32_t)format :(uint32_t)type canvas:(TNSCanvas * _Nonnull)canvas;
- (void)texParameterf:(uint32_t)target :(uint32_t)pname :(float)param;
- (void)texParameteri:(uint32_t)target :(uint32_t)pname :(int32_t)param;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type data:(NSData * _Nonnull)data;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type u8:(NSArray<NSNumber *> * _Nonnull)pixels;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type pixels:(void * _Nonnull)pixels size:(NSInteger)size;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type pixels:(void * _Nonnull)pixels size:(NSInteger)size offset:(NSInteger)offset;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type u16:(NSArray<NSNumber *> * _Nonnull)pixels;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type f32:(NSArray<NSNumber *> * _Nonnull)pixels;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type :(NSNull * _Nonnull)pixels;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(uint32_t)format :(uint32_t)type pixels:(UIImage * _Nonnull)pixels;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(uint32_t)format :(uint32_t)type asset:(TNSImageAsset * _Nonnull)asset;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(uint32_t)format :(uint32_t)type bitmap:(TNSImageBitmap * _Nonnull)bitmap;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(uint32_t)format :(uint32_t)type canvas:(TNSCanvas * _Nonnull)canvas;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(uint32_t)format :(uint32_t)type :(NSNull * _Nonnull)pixels;
- (void)uniform1f:(int32_t)location :(float)v0;
- (void)uniform1fv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size;
- (void)uniform1fv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform1i:(int32_t)location :(int32_t)v0;
- (void)uniform1iv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size;
- (void)uniform1iv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform2f:(int32_t)location :(float)v0 :(float)v1;
- (void)uniform2fv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size;
- (void)uniform2fv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform2i:(int32_t)location :(int32_t)v0 :(int32_t)v1;
- (void)uniform2iv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size;
- (void)uniform2iv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform3f:(int32_t)location :(float)v0 :(float)v1 :(float)v2;
- (void)uniform3fv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size;
- (void)uniform3fv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform3i:(int32_t)location :(int32_t)v0 :(int32_t)v1 :(int32_t)v2;
- (void)uniform3iv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size;
- (void)uniform3iv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform4f:(int32_t)location :(float)v0 :(float)v1 :(float)v2 :(float)v3;
- (void)uniform4fv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size;
- (void)uniform4fv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform4i:(int32_t)location :(int32_t)v0 :(int32_t)v1 :(int32_t)v2 :(int32_t)v3;
- (void)uniform4iv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size;
- (void)uniform4iv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformMatrix2fv:(int32_t)location :(BOOL)transpose :(void * _Nonnull)value :(NSInteger)size;
- (void)uniformMatrix2fv:(int32_t)location :(BOOL)transpose :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformMatrix3fv:(int32_t)location :(BOOL)transpose :(void * _Nonnull)value :(NSInteger)size;
- (void)uniformMatrix3fv:(int32_t)location :(BOOL)transpose :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformMatrix4fv:(int32_t)location :(BOOL)transpose :(void * _Nonnull)value :(NSInteger)size;
- (void)uniformMatrix4fv:(int32_t)location :(BOOL)transpose :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)useProgram:(uint32_t)program;
- (void)validateProgram:(uint32_t)program;
- (void)vertexAttrib1f:(uint32_t)index :(float)v0;
- (void)vertexAttrib2f:(uint32_t)index :(float)v0 :(float)v1;
- (void)vertexAttrib3f:(uint32_t)index :(float)v0 :(float)v1 :(float)v2;
- (void)vertexAttrib4f:(uint32_t)index :(float)v0 :(float)v1 :(float)v2 :(float)v3;
- (void)vertexAttrib1fv:(uint32_t)index :(void * _Nonnull)value;
- (void)vertexAttrib1fv:(uint32_t)index :(void * _Nonnull)value offset:(NSInteger)offset;
- (void)vertexAttrib2fv:(uint32_t)index :(void * _Nonnull)value;
- (void)vertexAttrib2fv:(uint32_t)index :(void * _Nonnull)value offset:(NSInteger)offset;
- (void)vertexAttrib3fv:(uint32_t)index :(void * _Nonnull)value;
- (void)vertexAttrib3fv:(uint32_t)index :(void * _Nonnull)value offset:(NSInteger)offset;
- (void)vertexAttrib4fv:(uint32_t)index :(void * _Nonnull)value;
- (void)vertexAttrib4fv:(uint32_t)index :(void * _Nonnull)value offset:(NSInteger)offset;
- (void)vertexAttribPointer:(uint32_t)index :(int32_t)size :(uint32_t)type :(BOOL)normalized :(int32_t)stride :(NSInteger)offset;
- (void)viewport:(int32_t)x :(int32_t)y :(int32_t)width :(int32_t)height;
@property (nonatomic, readonly) uint32_t DEPTH_BUFFER_BIT;
@property (nonatomic, readonly) uint32_t COLOR_BUFFER_BIT;
@property (nonatomic, readonly) uint32_t STENCIL_BUFFER_BIT;
@property (nonatomic, readonly) uint32_t POINTS;
@property (nonatomic, readonly) uint32_t LINES;
@property (nonatomic, readonly) uint32_t LINE_LOOP;
@property (nonatomic, readonly) uint32_t LINE_STRIP;
@property (nonatomic, readonly) uint32_t TRIANGLES;
@property (nonatomic, readonly) uint32_t TRIANGLE_STRIP;
@property (nonatomic, readonly) uint32_t TRIANGLE_FAN;
@property (nonatomic, readonly) uint32_t ONE;
@property (nonatomic, readonly) uint32_t ZERO;
@property (nonatomic, readonly) uint32_t SRC_COLOR;
@property (nonatomic, readonly) uint32_t ONE_MINUS_SRC_COLOR;
@property (nonatomic, readonly) uint32_t SRC_ALPHA;
@property (nonatomic, readonly) uint32_t ONE_MINUS_SRC_ALPHA;
@property (nonatomic, readonly) uint32_t DST_ALPHA;
@property (nonatomic, readonly) uint32_t ONE_MINUS_DST_ALPHA;
@property (nonatomic, readonly) uint32_t DST_COLOR;
@property (nonatomic, readonly) uint32_t ONE_MINUS_DST_COLOR;
@property (nonatomic, readonly) uint32_t SRC_ALPHA_SATURATE;
@property (nonatomic, readonly) uint32_t CONSTANT_COLOR;
@property (nonatomic, readonly) uint32_t ONE_MINUS_CONSTANT_COLOR;
@property (nonatomic, readonly) uint32_t CONSTANT_ALPHA;
@property (nonatomic, readonly) uint32_t ONE_MINUS_CONSTANT_ALPHA;
@property (nonatomic, readonly) uint32_t FUNC_ADD;
@property (nonatomic, readonly) uint32_t FUNC_SUBTRACT;
@property (nonatomic, readonly) uint32_t FUNC_REVERSE_SUBTRACT;
@property (nonatomic, readonly) uint32_t BLEND_EQUATION;
@property (nonatomic, readonly) uint32_t BLEND_EQUATION_RGB;
@property (nonatomic, readonly) uint32_t BLEND_EQUATION_ALPHA;
@property (nonatomic, readonly) uint32_t BLEND_DST_RGB;
@property (nonatomic, readonly) uint32_t BLEND_SRC_RGB;
@property (nonatomic, readonly) uint32_t BLEND_DST_ALPHA;
@property (nonatomic, readonly) uint32_t BLEND_SRC_ALPHA;
@property (nonatomic, readonly) uint32_t BLEND_COLOR;
@property (nonatomic, readonly) uint32_t ARRAY_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t ELEMENT_ARRAY_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t LINE_WIDTH;
@property (nonatomic, readonly) uint32_t ALIASED_POINT_SIZE_RANGE;
@property (nonatomic, readonly) uint32_t ALIASED_LINE_WIDTH_RANGE;
@property (nonatomic, readonly) uint32_t CULL_FACE_MODE;
@property (nonatomic, readonly) uint32_t FRONT_FACE;
@property (nonatomic, readonly) uint32_t DEPTH_RANGE;
@property (nonatomic, readonly) uint32_t DEPTH_WRITEMASK;
@property (nonatomic, readonly) uint32_t DEPTH_CLEAR_VALUE;
@property (nonatomic, readonly) uint32_t DEPTH_FUNC;
@property (nonatomic, readonly) uint32_t STENCIL_CLEAR_VALUE;
@property (nonatomic, readonly) uint32_t STENCIL_FUNC;
@property (nonatomic, readonly) uint32_t STENCIL_FAIL;
@property (nonatomic, readonly) uint32_t STENCIL_PASS_DEPTH_FAIL;
@property (nonatomic, readonly) uint32_t STENCIL_PASS_DEPTH_PASS;
@property (nonatomic, readonly) uint32_t STENCIL_REF;
@property (nonatomic, readonly) uint32_t STENCIL_VALUE_MASK;
@property (nonatomic, readonly) uint32_t STENCIL_WRITEMASK;
@property (nonatomic, readonly) uint32_t STENCIL_BACK_FUNC;
@property (nonatomic, readonly) uint32_t STENCIL_BACK_FAIL;
@property (nonatomic, readonly) uint32_t STENCIL_BACK_PASS_DEPTH_FAIL;
@property (nonatomic, readonly) uint32_t STENCIL_BACK_PASS_DEPTH_PASS;
@property (nonatomic, readonly) uint32_t STENCIL_BACK_REF;
@property (nonatomic, readonly) uint32_t STENCIL_BACK_VALUE_MASK;
@property (nonatomic, readonly) uint32_t STENCIL_BACK_WRITEMASK;
@property (nonatomic, readonly) uint32_t VIEWPORT;
@property (nonatomic, readonly) uint32_t SCISSOR_BOX;
@property (nonatomic, readonly) uint32_t COLOR_CLEAR_VALUE;
@property (nonatomic, readonly) uint32_t COLOR_WRITEMASK;
@property (nonatomic, readonly) uint32_t UNPACK_ALIGNMENT;
@property (nonatomic, readonly) uint32_t PACK_ALIGNMENT;
@property (nonatomic, readonly) uint32_t MAX_TEXTURE_SIZE;
@property (nonatomic, readonly) uint32_t MAX_VIEWPORT_DIMS;
@property (nonatomic, readonly) uint32_t SUBPIXEL_BITS;
@property (nonatomic, readonly) uint32_t RED_BITS;
@property (nonatomic, readonly) uint32_t GREEN_BITS;
@property (nonatomic, readonly) uint32_t BLUE_BITS;
@property (nonatomic, readonly) uint32_t ALPHA_BITS;
@property (nonatomic, readonly) uint32_t DEPTH_BITS;
@property (nonatomic, readonly) uint32_t STENCIL_BITS;
@property (nonatomic, readonly) uint32_t POLYGON_OFFSET_UNITS;
@property (nonatomic, readonly) uint32_t POLYGON_OFFSET_FACTOR;
@property (nonatomic, readonly) uint32_t TEXTURE_BINDING_2D;
@property (nonatomic, readonly) uint32_t SAMPLE_BUFFERS;
@property (nonatomic, readonly) uint32_t SAMPLES;
@property (nonatomic, readonly) uint32_t SAMPLE_COVERAGE_VALUE;
@property (nonatomic, readonly) uint32_t SAMPLE_COVERAGE_INVERT;
@property (nonatomic, readonly) uint32_t COMPRESSED_TEXTURE_FORMATS;
@property (nonatomic, readonly) uint32_t VENDOR;
@property (nonatomic, readonly) uint32_t RENDERER;
@property (nonatomic, readonly) uint32_t VERSION;
@property (nonatomic, readonly) uint32_t IMPLEMENTATION_COLOR_READ_TYPE;
@property (nonatomic, readonly) uint32_t IMPLEMENTATION_COLOR_READ_FORMAT;
@property (nonatomic, readonly) uint32_t BROWSER_DEFAULT_WEBGL;
@property (nonatomic, readonly) uint32_t STATIC_DRAW;
@property (nonatomic, readonly) uint32_t STREAM_DRAW;
@property (nonatomic, readonly) uint32_t DYNAMIC_DRAW;
@property (nonatomic, readonly) uint32_t ARRAY_BUFFER;
@property (nonatomic, readonly) uint32_t ELEMENT_ARRAY_BUFFER;
@property (nonatomic, readonly) uint32_t BUFFER_SIZE;
@property (nonatomic, readonly) uint32_t BUFFER_USAGE;
@property (nonatomic, readonly) uint32_t CURRENT_VERTEX_ATTRIB;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_ENABLED;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_SIZE;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_STRIDE;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_TYPE;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_NORMALIZED;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_POINTER;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t CULL_FACE;
@property (nonatomic, readonly) uint32_t FRONT;
@property (nonatomic, readonly) uint32_t BACK;
@property (nonatomic, readonly) uint32_t FRONT_AND_BACK;
@property (nonatomic, readonly) uint32_t BLEND;
@property (nonatomic, readonly) uint32_t DEPTH_TEST;
@property (nonatomic, readonly) uint32_t DITHER;
@property (nonatomic, readonly) uint32_t POLYGON_OFFSET_FILL;
@property (nonatomic, readonly) uint32_t SAMPLE_ALPHA_TO_COVERAGE;
@property (nonatomic, readonly) uint32_t SAMPLE_COVERAGE;
@property (nonatomic, readonly) uint32_t SCISSOR_TEST;
@property (nonatomic, readonly) uint32_t STENCIL_TEST;
@property (nonatomic, readonly) uint32_t NO_ERROR;
@property (nonatomic, readonly) uint32_t INVALID_ENUM;
@property (nonatomic, readonly) uint32_t INVALID_VALUE;
@property (nonatomic, readonly) uint32_t INVALID_OPERATION;
@property (nonatomic, readonly) uint32_t INVALID_FRAMEBUFFER_OPERATION;
@property (nonatomic, readonly) uint32_t OUT_OF_MEMORY;
@property (nonatomic, readonly) uint32_t CONTEXT_LOST_WEBGL;
@property (nonatomic, readonly) uint32_t CW;
@property (nonatomic, readonly) uint32_t CCW;
@property (nonatomic, readonly) uint32_t DONT_CARE;
@property (nonatomic, readonly) uint32_t FASTEST;
@property (nonatomic, readonly) uint32_t NICEST;
@property (nonatomic, readonly) uint32_t GENERATE_MIPMAP_HINT;
@property (nonatomic, readonly) uint32_t BYTE;
@property (nonatomic, readonly) uint32_t UNSIGNED_BYTE;
@property (nonatomic, readonly) uint32_t UNSIGNED_SHORT;
@property (nonatomic, readonly) uint32_t SHORT;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT;
@property (nonatomic, readonly) uint32_t INT;
@property (nonatomic, readonly) uint32_t FLOAT;
@property (nonatomic, readonly) uint32_t DEPTH_COMPONENT;
@property (nonatomic, readonly) uint32_t ALPHA;
@property (nonatomic, readonly) uint32_t RGB;
@property (nonatomic, readonly) uint32_t RGBA;
@property (nonatomic, readonly) uint32_t LUMINANCE;
@property (nonatomic, readonly) uint32_t LUMINANCE_ALPHA;
@property (nonatomic, readonly) uint32_t UNSIGNED_SHORT_4_4_4_4;
@property (nonatomic, readonly) uint32_t UNSIGNED_SHORT_5_5_5_1;
@property (nonatomic, readonly) uint32_t UNSIGNED_SHORT_5_6_5;
@property (nonatomic, readonly) uint32_t FRAGMENT_SHADER;
@property (nonatomic, readonly) uint32_t VERTEX_SHADER;
@property (nonatomic, readonly) uint32_t COMPILE_STATUS;
@property (nonatomic, readonly) uint32_t DELETE_STATUS;
@property (nonatomic, readonly) uint32_t LINK_STATUS;
@property (nonatomic, readonly) uint32_t VALIDATE_STATUS;
@property (nonatomic, readonly) uint32_t ATTACHED_SHADERS;
@property (nonatomic, readonly) uint32_t ACTIVE_ATTRIBUTES;
@property (nonatomic, readonly) uint32_t ACTIVE_UNIFORMS;
@property (nonatomic, readonly) uint32_t MAX_VERTEX_UNIFORM_VECTORS;
@property (nonatomic, readonly) uint32_t MAX_VARYING_VECTORS;
@property (nonatomic, readonly) uint32_t MAX_COMBINED_TEXTURE_IMAGE_UNITS;
@property (nonatomic, readonly) uint32_t MAX_VERTEX_TEXTURE_IMAGE_UNITS;
@property (nonatomic, readonly) uint32_t MAX_TEXTURE_IMAGE_UNITS;
@property (nonatomic, readonly) uint32_t MAX_VERTEX_ATTRIBS;
@property (nonatomic, readonly) uint32_t MAX_FRAGMENT_UNIFORM_VECTORS;
@property (nonatomic, readonly) uint32_t SHADER_TYPE;
@property (nonatomic, readonly) uint32_t SHADING_LANGUAGE_VERSION;
@property (nonatomic, readonly) uint32_t CURRENT_PROGRAM;
@property (nonatomic, readonly) uint32_t NEVER;
@property (nonatomic, readonly) uint32_t LESS;
@property (nonatomic, readonly) uint32_t EQUAL;
@property (nonatomic, readonly) uint32_t LEQUAL;
@property (nonatomic, readonly) uint32_t GREATER;
@property (nonatomic, readonly) uint32_t NOTEQUAL;
@property (nonatomic, readonly) uint32_t GEQUAL;
@property (nonatomic, readonly) uint32_t ALWAYS;
@property (nonatomic, readonly) uint32_t KEEP;
@property (nonatomic, readonly) uint32_t REPLACE;
@property (nonatomic, readonly) uint32_t INCR;
@property (nonatomic, readonly) uint32_t DECR;
@property (nonatomic, readonly) uint32_t INVERT;
@property (nonatomic, readonly) uint32_t INCR_WRAP;
@property (nonatomic, readonly) uint32_t DECR_WRAP;
@property (nonatomic, readonly) uint32_t NEAREST;
@property (nonatomic, readonly) uint32_t LINEAR;
@property (nonatomic, readonly) uint32_t NEAREST_MIPMAP_NEAREST;
@property (nonatomic, readonly) uint32_t LINEAR_MIPMAP_NEAREST;
@property (nonatomic, readonly) uint32_t NEAREST_MIPMAP_LINEAR;
@property (nonatomic, readonly) uint32_t LINEAR_MIPMAP_LINEAR;
@property (nonatomic, readonly) uint32_t TEXTURE_MAG_FILTER;
@property (nonatomic, readonly) uint32_t TEXTURE_MIN_FILTER;
@property (nonatomic, readonly) uint32_t TEXTURE_WRAP_S;
@property (nonatomic, readonly) uint32_t TEXTURE_WRAP_T;
@property (nonatomic, readonly) uint32_t TEXTURE_2D;
@property (nonatomic, readonly) uint32_t TEXTURE;
@property (nonatomic, readonly) uint32_t TEXTURE_CUBE_MAP;
@property (nonatomic, readonly) uint32_t TEXTURE_BINDING_CUBE_MAP;
@property (nonatomic, readonly) uint32_t TEXTURE_CUBE_MAP_POSITIVE_X;
@property (nonatomic, readonly) uint32_t TEXTURE_CUBE_MAP_NEGATIVE_X;
@property (nonatomic, readonly) uint32_t TEXTURE_CUBE_MAP_POSITIVE_Y;
@property (nonatomic, readonly) uint32_t TEXTURE_CUBE_MAP_NEGATIVE_Y;
@property (nonatomic, readonly) uint32_t TEXTURE_CUBE_MAP_POSITIVE_Z;
@property (nonatomic, readonly) uint32_t TEXTURE_CUBE_MAP_NEGATIVE_Z;
@property (nonatomic, readonly) uint32_t MAX_CUBE_MAP_TEXTURE_SIZE;
@property (nonatomic, readonly) uint32_t TEXTURE0;
@property (nonatomic, readonly) uint32_t TEXTURE1;
@property (nonatomic, readonly) uint32_t TEXTURE2;
@property (nonatomic, readonly) uint32_t TEXTURE3;
@property (nonatomic, readonly) uint32_t TEXTURE4;
@property (nonatomic, readonly) uint32_t TEXTURE5;
@property (nonatomic, readonly) uint32_t TEXTURE6;
@property (nonatomic, readonly) uint32_t TEXTURE7;
@property (nonatomic, readonly) uint32_t TEXTURE8;
@property (nonatomic, readonly) uint32_t TEXTURE9;
@property (nonatomic, readonly) uint32_t TEXTURE10;
@property (nonatomic, readonly) uint32_t TEXTURE11;
@property (nonatomic, readonly) uint32_t TEXTURE12;
@property (nonatomic, readonly) uint32_t TEXTURE13;
@property (nonatomic, readonly) uint32_t TEXTURE14;
@property (nonatomic, readonly) uint32_t TEXTURE15;
@property (nonatomic, readonly) uint32_t TEXTURE16;
@property (nonatomic, readonly) uint32_t TEXTURE17;
@property (nonatomic, readonly) uint32_t TEXTURE18;
@property (nonatomic, readonly) uint32_t TEXTURE19;
@property (nonatomic, readonly) uint32_t TEXTURE20;
@property (nonatomic, readonly) uint32_t TEXTURE21;
@property (nonatomic, readonly) uint32_t TEXTURE22;
@property (nonatomic, readonly) uint32_t TEXTURE23;
@property (nonatomic, readonly) uint32_t TEXTURE24;
@property (nonatomic, readonly) uint32_t TEXTURE25;
@property (nonatomic, readonly) uint32_t TEXTURE26;
@property (nonatomic, readonly) uint32_t TEXTURE27;
@property (nonatomic, readonly) uint32_t TEXTURE28;
@property (nonatomic, readonly) uint32_t TEXTURE29;
@property (nonatomic, readonly) uint32_t TEXTURE30;
@property (nonatomic, readonly) uint32_t TEXTURE31;
@property (nonatomic, readonly) uint32_t ACTIVE_TEXTURE;
@property (nonatomic, readonly) uint32_t REPEAT;
@property (nonatomic, readonly) uint32_t CLAMP_TO_EDGE;
@property (nonatomic, readonly) uint32_t MIRRORED_REPEAT;
@property (nonatomic, readonly) uint32_t FLOAT_VEC2;
@property (nonatomic, readonly) uint32_t FLOAT_VEC3;
@property (nonatomic, readonly) uint32_t FLOAT_VEC4;
@property (nonatomic, readonly) uint32_t INT_VEC2;
@property (nonatomic, readonly) uint32_t INT_VEC3;
@property (nonatomic, readonly) uint32_t INT_VEC4;
@property (nonatomic, readonly) uint32_t BOOL;
@property (nonatomic, readonly) uint32_t BOOL_VEC2;
@property (nonatomic, readonly) uint32_t BOOL_VEC3;
@property (nonatomic, readonly) uint32_t BOOL_VEC4;
@property (nonatomic, readonly) uint32_t FLOAT_MAT2;
@property (nonatomic, readonly) uint32_t FLOAT_MAT3;
@property (nonatomic, readonly) uint32_t FLOAT_MAT4;
@property (nonatomic, readonly) uint32_t SAMPLER_2D;
@property (nonatomic, readonly) uint32_t SAMPLER_CUBE;
@property (nonatomic, readonly) uint32_t LOW_FLOAT;
@property (nonatomic, readonly) uint32_t MEDIUM_FLOAT;
@property (nonatomic, readonly) uint32_t HIGH_FLOAT;
@property (nonatomic, readonly) uint32_t LOW_INT;
@property (nonatomic, readonly) uint32_t MEDIUM_INT;
@property (nonatomic, readonly) uint32_t HIGH_INT;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER;
@property (nonatomic, readonly) uint32_t RENDERBUFFER;
@property (nonatomic, readonly) uint32_t RGBA4;
@property (nonatomic, readonly) uint32_t RGB565;
@property (nonatomic, readonly) uint32_t RGB5_A1;
@property (nonatomic, readonly) uint32_t DEPTH_COMPONENT16;
@property (nonatomic, readonly) uint32_t STENCIL_INDEX8;
@property (nonatomic, readonly) uint32_t DEPTH_STENCIL;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_WIDTH;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_HEIGHT;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_INTERNAL_FORMAT;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_RED_SIZE;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_GREEN_SIZE;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_BLUE_SIZE;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_ALPHA_SIZE;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_DEPTH_SIZE;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_STENCIL_SIZE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT0;
@property (nonatomic, readonly) uint32_t DEPTH_ATTACHMENT;
@property (nonatomic, readonly) uint32_t STENCIL_ATTACHMENT;
@property (nonatomic, readonly) uint32_t DEPTH_STENCIL_ATTACHMENT;
@property (nonatomic, readonly) uint32_t NONE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_COMPLETE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_UNSUPPORTED;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_BINDING;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_BINDING;
@property (nonatomic, readonly) uint32_t MAX_RENDERBUFFER_SIZE;
@property (nonatomic, readonly) uint32_t UNPACK_COLORSPACE_CONVERSION_WEBGL;
@property (nonatomic, readonly) uint32_t UNPACK_FLIP_Y_WEBGL;
@property (nonatomic, readonly) uint32_t UNPACK_PREMULTIPLY_ALPHA_WEBGL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("TNSWebGL2RenderingContext")
@interface TNSWebGL2RenderingContext : TNSWebGLRenderingContext
- (nonnull instancetype)init:(TNSCanvas * _Nonnull)canvas OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(TNSCanvas * _Nonnull)canvas :(NSDictionary<NSString *, id> * _Nonnull)attrs OBJC_DESIGNATED_INITIALIZER;
- (void)beginQuery:(uint32_t)target :(uint32_t)query;
- (void)beginTransformFeedback:(uint32_t)primitiveMode;
- (void)bindBufferBase:(uint32_t)target :(uint32_t)index :(uint32_t)buffer;
- (void)bindBufferRange:(uint32_t)target :(uint32_t)index :(uint32_t)buffer :(NSInteger)offset :(NSInteger)size;
- (void)bindSampler:(uint32_t)unit :(uint32_t)sampler;
- (void)bindTransformFeedback:(uint32_t)target :(uint32_t)transformFeedback;
- (void)bindVertexArray:(uint32_t)vertexArray;
- (void)blitFramebuffer:(int32_t)srcX0 :(int32_t)srcY0 :(int32_t)srcX1 :(int32_t)srcY1 :(int32_t)dstX0 :(int32_t)dstY0 :(int32_t)dstX1 :(int32_t)dstY1 :(uint32_t)mask :(uint32_t)filter;
- (void)clearBufferfv:(uint32_t)buffer :(int32_t)drawbuffer :(void const * _Nonnull)values;
- (void)clearBufferfv:(uint32_t)buffer :(int32_t)drawbuffer :(void const * _Nonnull)values offset:(NSInteger)offset;
- (void)clearBufferiv:(uint32_t)buffer :(int32_t)drawbuffer :(void const * _Nonnull)values;
- (void)clearBufferiv:(uint32_t)buffer :(int32_t)drawbuffer :(void const * _Nonnull)values offset:(NSInteger)offset;
- (void)clearBufferuiv:(uint32_t)buffer :(int32_t)drawbuffer :(void const * _Nonnull)values;
- (void)clearBufferuiv:(uint32_t)buffer :(int32_t)drawbuffer :(void const * _Nonnull)values offset:(NSInteger)offset;
- (void)clearBufferfi:(uint32_t)buffer :(int32_t)drawbuffer :(float)depth :(int32_t)stencil;
- (int32_t)clientWaitSync:(GLsync _Nonnull)sync :(uint32_t)flags :(uint64_t)timeout SWIFT_WARN_UNUSED_RESULT;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(int32_t)imageSize :(int32_t)offset;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format i8:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset :(int32_t)srcLengthOverride;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format u8:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset :(int32_t)srcLengthOverride;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format i16:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset :(int32_t)srcLengthOverride;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format u16:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset :(int32_t)srcLengthOverride;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format i32:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset :(int32_t)srcLengthOverride;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format u32:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset :(int32_t)srcLengthOverride;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format f32:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset :(int32_t)srcLengthOverride;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format f64:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset :(int32_t)srcLengthOverride;
- (void)copyBufferSubData:(uint32_t)readTarget :(uint32_t)writeTarget :(NSInteger)readOffset :(NSInteger)writeOffset :(NSInteger)size;
- (void)copyTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)x :(int32_t)y :(int32_t)width :(int32_t)height;
- (uint32_t)createQuery SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)createSampler SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)createVertexArray SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)createTransformFeedback SWIFT_WARN_UNUSED_RESULT;
- (void)deleteQuery:(uint32_t)query;
- (void)deleteSampler:(uint32_t)sampler;
- (void)deleteSync:(GLsync _Nonnull)sync;
- (void)deleteTransformFeedback:(uint32_t)transformFeedback;
- (void)deleteVertexArray:(uint32_t)vertexArray;
- (void)drawArraysInstanced:(uint32_t)mode :(int32_t)first :(int32_t)count :(int32_t)instanceCount;
- (void)drawElementsInstanced:(uint32_t)mode :(int32_t)count :(uint32_t)type :(NSInteger)offset :(int32_t)instanceCount;
- (void)drawRangeElements:(uint32_t)mode :(uint32_t)start :(uint32_t)end :(int32_t)count :(uint32_t)type :(NSInteger)offset;
- (void)drawBuffers:(NSArray<NSNumber *> * _Nonnull)buffers;
- (void)endQuery:(uint32_t)target;
- (void)endTransformFeedback;
- (void)fenceSync:(uint32_t)condition :(uint32_t)flags;
- (void)framebufferTextureLayer:(uint32_t)target :(uint32_t)attachment :(uint32_t)texture :(int32_t)level :(int32_t)layer;
- (NSString * _Nonnull)getActiveUniformBlockName:(uint32_t)program :(uint32_t)uniformBlockIndex SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getActiveUniformBlockParameter:(uint32_t)program :(uint32_t)uniformBlockIndex :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getActiveUniforms:(uint32_t)program :(NSArray<NSNumber *> * _Nonnull)uniformIndices :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (void)getBufferSubData:(uint32_t)target :(NSInteger)srcByteOffset :(void * _Nonnull)dstData size:(NSInteger)size :(int32_t)dstOffset :(int32_t)length;
- (void)getBufferSubData:(uint32_t)target :(NSInteger)srcByteOffset :(void * _Nonnull)dstData size:(NSInteger)size :(int32_t)dstOffset :(int32_t)length offset:(NSInteger)offset;
- (int32_t)getFragDataLocation:(uint32_t)program :(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getIndexedParameter:(uint32_t)target :(uint32_t)index SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getInternalformatParameter:(uint32_t)target :(uint32_t)internalformat :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getParameter:(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getQuery:(uint32_t)target :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getQueryParameter:(uint32_t)query :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getSamplerParameter:(uint32_t)sampler :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getSyncParameter:(GLsync _Nonnull)sync :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getTransformFeedbackVarying:(uint32_t)program :(uint32_t)index SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getUniformBlockIndex:(uint32_t)program :(NSString * _Nonnull)uniformBlockName SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Nonnull)getUniformIndices:(uint32_t)program :(NSArray<NSString *> * _Nonnull)uniformNames SWIFT_WARN_UNUSED_RESULT;
- (void)invalidateFramebuffer:(uint32_t)target :(NSArray<NSNumber *> * _Nonnull)attachments;
- (void)invalidateSubFramebuffer:(uint32_t)target :(NSArray<NSNumber *> * _Nonnull)attachments :(int32_t)x :(int32_t)y :(int32_t)width :(int32_t)height;
- (BOOL)isQuery:(uint32_t)query SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSampler:(uint32_t)sampler SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSync:(GLsync _Nonnull)sync SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isTransformFeedback:(uint32_t)transformFeedback SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isVertexArray:(uint32_t)vertexArray SWIFT_WARN_UNUSED_RESULT;
- (void)pauseTransformFeedback;
- (void)readBuffer:(uint32_t)src;
- (void)renderbufferStorageMultisample:(uint32_t)target :(int32_t)samples :(uint32_t)internalFormat :(int32_t)width :(int32_t)height;
- (void)resumeTransformFeedback;
- (void)samplerParameteri:(uint32_t)sampler :(uint32_t)pname :(int32_t)param;
- (void)samplerParameterf:(uint32_t)sampler :(uint32_t)pname :(float)param;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type data:(NSData * _Nonnull)data;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type offset:(NSInteger)offset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type pixels:(void const * _Nonnull)pixels size:(NSInteger)size;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type pixels:(void const * _Nonnull)pixels size:(NSInteger)size pixelOffset:(NSInteger)pixelOffset srcOffset:(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type i8:(NSArray<NSNumber *> * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type u8:(NSArray<NSNumber *> * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type i16:(NSArray<NSNumber *> * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type u16:(NSArray<NSNumber *> * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type i32:(NSArray<NSNumber *> * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type u32:(NSArray<NSNumber *> * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type f32:(NSArray<NSNumber *> * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type f64:(NSArray<NSNumber *> * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type i8:(NSArray<NSNumber *> * _Nonnull)source :(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type u8:(NSArray<NSNumber *> * _Nonnull)source :(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type i16:(NSArray<NSNumber *> * _Nonnull)source :(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type u16:(NSArray<NSNumber *> * _Nonnull)source :(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type i32:(NSArray<NSNumber *> * _Nonnull)source :(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type u32:(NSArray<NSNumber *> * _Nonnull)source :(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type f32:(NSArray<NSNumber *> * _Nonnull)source :(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type f64:(NSArray<NSNumber *> * _Nonnull)source :(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type source:(UIImage * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type asset:(TNSImageAsset * _Nonnull)asset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type bitmap:(TNSImageBitmap * _Nonnull)bitmap;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type canvas:(TNSCanvas * _Nonnull)canvas;
- (void)texStorage2D:(uint32_t)target :(int32_t)levels :(uint32_t)internalformat :(int32_t)width :(int32_t)height;
- (void)texStorage3D:(uint32_t)target :(int32_t)levels :(uint32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type data:(NSData * _Nonnull)data;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type offset:(int32_t)offset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type i8:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type u8:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type i16:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type u16:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type i32:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type u32:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type f32:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type f64:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type i8:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type u8:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type i16:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type u16:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type i32:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type u32:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type f32:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type f64:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type srcData:(UIImage * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type canvas:(TNSCanvas * _Nonnull)canvas;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type asset:(TNSImageAsset * _Nonnull)asset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type bitmap:(TNSImageBitmap * _Nonnull)bitmap;
- (void)transformFeedbackVaryings:(uint32_t)program :(NSArray<NSString *> * _Nonnull)varyings :(uint32_t)bufferMode;
- (void)uniform1ui:(int32_t)location :(uint32_t)v0;
- (void)uniform2ui:(int32_t)location :(uint32_t)v0 :(uint32_t)v1;
- (void)uniform3ui:(int32_t)location :(uint32_t)v0 :(uint32_t)v1 :(uint32_t)v2;
- (void)uniform4ui:(int32_t)location :(uint32_t)v0 :(uint32_t)v1 :(uint32_t)v2 :(uint32_t)v3;
- (void)uniform1uiv:(int32_t)location :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniform1uiv:(int32_t)location :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform2uiv:(int32_t)location :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniform2uiv:(int32_t)location :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform3uiv:(int32_t)location :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniform3uiv:(int32_t)location :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform4uiv:(int32_t)location :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniform4uiv:(int32_t)location :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformBlockBinding:(uint32_t)program :(uint32_t)uniformBlockIndex :(uint32_t)uniformBlockBinding;
- (void)uniformMatrix3x2fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniformMatrix3x2fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformMatrix4x2fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniformMatrix4x2fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformMatrix2x3fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniformMatrix2x3fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformMatrix4x3fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniformMatrix4x3fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformMatrix2x4fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniformMatrix2x4fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformMatrix3x4fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniformMatrix3x4fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)vertexAttribDivisor:(uint32_t)index :(uint32_t)divisor;
- (void)vertexAttribI4i:(uint32_t)index :(int32_t)v0 :(int32_t)v1 :(int32_t)v2 :(int32_t)v3;
- (void)vertexAttribI4ui:(uint32_t)index :(uint32_t)v0 :(uint32_t)v1 :(uint32_t)v2 :(uint32_t)v3;
- (void)vertexAttribI4iv:(uint32_t)index :(void const * _Nonnull)value;
- (void)vertexAttribI4iv:(uint32_t)index :(void const * _Nonnull)value offset:(NSInteger)offset;
- (void)vertexAttribI4uiv:(uint32_t)index :(void const * _Nonnull)value;
- (void)vertexAttribI4uiv:(uint32_t)index :(void const * _Nonnull)value offset:(NSInteger)offset;
@property (nonatomic, readonly) uint32_t READ_BUFFER;
@property (nonatomic, readonly) uint32_t UNPACK_ROW_LENGTH;
@property (nonatomic, readonly) uint32_t UNPACK_SKIP_ROWS;
@property (nonatomic, readonly) uint32_t UNPACK_SKIP_PIXELS;
@property (nonatomic, readonly) uint32_t PACK_ROW_LENGTH;
@property (nonatomic, readonly) uint32_t PACK_SKIP_ROWS;
@property (nonatomic, readonly) uint32_t PACK_SKIP_PIXELS;
@property (nonatomic, readonly) uint32_t TEXTURE_BINDING_3D;
@property (nonatomic, readonly) uint32_t UNPACK_SKIP_IMAGES;
@property (nonatomic, readonly) uint32_t UNPACK_IMAGE_HEIGHT;
@property (nonatomic, readonly) uint32_t MAX_3D_TEXTURE_SIZE;
@property (nonatomic, readonly) uint32_t MAX_ELEMENTS_VERTICES;
@property (nonatomic, readonly) uint32_t MAX_ELEMENTS_INDICES;
@property (nonatomic, readonly) uint32_t MAX_TEXTURE_LOD_BIAS;
@property (nonatomic, readonly) uint32_t MAX_FRAGMENT_UNIFORM_COMPONENTS;
@property (nonatomic, readonly) uint32_t MAX_VERTEX_UNIFORM_COMPONENTS;
@property (nonatomic, readonly) uint32_t MAX_ARRAY_TEXTURE_LAYERS;
@property (nonatomic, readonly) uint32_t MIN_PROGRAM_TEXEL_OFFSET;
@property (nonatomic, readonly) uint32_t MAX_PROGRAM_TEXEL_OFFSET;
@property (nonatomic, readonly) uint32_t MAX_VARYING_COMPONENTS;
@property (nonatomic, readonly) uint32_t FRAGMENT_SHADER_DERIVATIVE_HINT;
@property (nonatomic, readonly) uint32_t RASTERIZER_DISCARD;
@property (nonatomic, readonly) uint32_t VERTEX_ARRAY_BINDING;
@property (nonatomic, readonly) uint32_t MAX_VERTEX_OUTPUT_COMPONENTS;
@property (nonatomic, readonly) uint32_t MAX_FRAGMENT_INPUT_COMPONENTS;
@property (nonatomic, readonly) uint32_t MAX_SERVER_WAIT_TIMEOUT;
@property (nonatomic, readonly) uint32_t MAX_ELEMENT_INDEX;
@property (nonatomic, readonly) uint32_t RED;
@property (nonatomic, readonly) uint32_t RGB8;
@property (nonatomic, readonly) uint32_t RGBA8;
@property (nonatomic, readonly) uint32_t RGB10_A2;
@property (nonatomic, readonly) uint32_t TEXTURE_3D;
@property (nonatomic, readonly) uint32_t TEXTURE_WRAP_R;
@property (nonatomic, readonly) uint32_t TEXTURE_MIN_LOD;
@property (nonatomic, readonly) uint32_t TEXTURE_MAX_LOD;
@property (nonatomic, readonly) uint32_t TEXTURE_BASE_LEVEL;
@property (nonatomic, readonly) uint32_t TEXTURE_MAX_LEVEL;
@property (nonatomic, readonly) uint32_t TEXTURE_COMPARE_MODE;
@property (nonatomic, readonly) uint32_t TEXTURE_COMPARE_FUNC;
@property (nonatomic, readonly) uint32_t SRGB;
@property (nonatomic, readonly) uint32_t SRGB8;
@property (nonatomic, readonly) uint32_t SRGB8_ALPHA8;
@property (nonatomic, readonly) uint32_t COMPARE_REF_TO_TEXTURE;
@property (nonatomic, readonly) uint32_t RGBA32F;
@property (nonatomic, readonly) uint32_t RGB32F;
@property (nonatomic, readonly) uint32_t RGBA16F;
@property (nonatomic, readonly) uint32_t RGB16F;
@property (nonatomic, readonly) uint32_t TEXTURE_2D_ARRAY;
@property (nonatomic, readonly) uint32_t TEXTURE_BINDING_2D_ARRAY;
@property (nonatomic, readonly) uint32_t R11F_G11F_B10F;
@property (nonatomic, readonly) uint32_t RGB9_E5;
@property (nonatomic, readonly) uint32_t RGBA32UI;
@property (nonatomic, readonly) uint32_t RGB32UI;
@property (nonatomic, readonly) uint32_t RGBA16UI;
@property (nonatomic, readonly) uint32_t RGB16UI;
@property (nonatomic, readonly) uint32_t RGBA8UI;
@property (nonatomic, readonly) uint32_t RGB8UI;
@property (nonatomic, readonly) uint32_t RGBA32I;
@property (nonatomic, readonly) uint32_t RGB32I;
@property (nonatomic, readonly) uint32_t RGBA16I;
@property (nonatomic, readonly) uint32_t RGB16I;
@property (nonatomic, readonly) uint32_t RGBA8I;
@property (nonatomic, readonly) uint32_t RGB8I;
@property (nonatomic, readonly) uint32_t RED_INTEGER;
@property (nonatomic, readonly) uint32_t RGB_INTEGER;
@property (nonatomic, readonly) uint32_t RGBA_INTEGER;
@property (nonatomic, readonly) uint32_t R8;
@property (nonatomic, readonly) uint32_t RG8;
@property (nonatomic, readonly) uint32_t R16F;
@property (nonatomic, readonly) uint32_t R32F;
@property (nonatomic, readonly) uint32_t RG16F;
@property (nonatomic, readonly) uint32_t RG32F;
@property (nonatomic, readonly) uint32_t R8I;
@property (nonatomic, readonly) uint32_t R8UI;
@property (nonatomic, readonly) uint32_t R16I;
@property (nonatomic, readonly) uint32_t R16UI;
@property (nonatomic, readonly) uint32_t R32I;
@property (nonatomic, readonly) uint32_t R32UI;
@property (nonatomic, readonly) uint32_t RG8I;
@property (nonatomic, readonly) uint32_t RG8UI;
@property (nonatomic, readonly) uint32_t RG16I;
@property (nonatomic, readonly) uint32_t RG16UI;
@property (nonatomic, readonly) uint32_t RG32I;
@property (nonatomic, readonly) uint32_t RG32UI;
@property (nonatomic, readonly) uint32_t R8_SNORM;
@property (nonatomic, readonly) uint32_t RG8_SNORM;
@property (nonatomic, readonly) uint32_t RGB8_SNORM;
@property (nonatomic, readonly) uint32_t RGBA8_SNORM;
@property (nonatomic, readonly) uint32_t RGB10_A2UI;
@property (nonatomic, readonly) uint32_t TEXTURE_IMMUTABLE_FORMAT;
@property (nonatomic, readonly) uint32_t TEXTURE_IMMUTABLE_LEVELS;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_2_10_10_10_REV;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_10F_11F_11F_REV;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_5_9_9_9_REV;
@property (nonatomic, readonly) uint32_t FLOAT_32_UNSIGNED_INT_24_8_REV;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_24_8;
@property (nonatomic, readonly) uint32_t HALF_FLOAT;
@property (nonatomic, readonly) uint32_t RG;
@property (nonatomic, readonly) uint32_t RG_INTEGER;
@property (nonatomic, readonly) uint32_t INT_2_10_10_10_REV;
@property (nonatomic, readonly) uint32_t QUERY_RESULT_AVAILABLE;
@property (nonatomic, readonly) uint32_t QUERY_RESULT;
@property (nonatomic, readonly) uint32_t CURRENT_QUERY;
@property (nonatomic, readonly) uint32_t ANY_SAMPLES_PASSED;
@property (nonatomic, readonly) uint32_t ANY_SAMPLES_PASSED_CONSERVATIVE;
@property (nonatomic, readonly) uint32_t MAX_DRAW_BUFFERS;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER0;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER1;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER2;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER3;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER4;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER5;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER6;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER7;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER8;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER9;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER10;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER11;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER12;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER13;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER14;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER15;
@property (nonatomic, readonly) uint32_t MAX_COLOR_ATTACHMENTS;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT1;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT2;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT3;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT4;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT5;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT6;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT7;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT8;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT9;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT10;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT11;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT12;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT13;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT14;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT15;
@property (nonatomic, readonly) uint32_t SAMPLER_3D;
@property (nonatomic, readonly) uint32_t SAMPLER_2D_SHADOW;
@property (nonatomic, readonly) uint32_t SAMPLER_2D_ARRAY;
@property (nonatomic, readonly) uint32_t SAMPLER_2D_ARRAY_SHADOW;
@property (nonatomic, readonly) uint32_t SAMPLER_CUBE_SHADOW;
@property (nonatomic, readonly) uint32_t INT_SAMPLER_2D;
@property (nonatomic, readonly) uint32_t INT_SAMPLER_3D;
@property (nonatomic, readonly) uint32_t INT_SAMPLER_CUBE;
@property (nonatomic, readonly) uint32_t INT_SAMPLER_2D_ARRAY;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_SAMPLER_2D;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_SAMPLER_3D;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_SAMPLER_CUBE;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_SAMPLER_2D_ARRAY;
@property (nonatomic, readonly) uint32_t MAX_SAMPLES;
@property (nonatomic, readonly) uint32_t SAMPLER_BINDING;
@property (nonatomic, readonly) uint32_t PIXEL_PACK_BUFFER;
@property (nonatomic, readonly) uint32_t PIXEL_UNPACK_BUFFER;
@property (nonatomic, readonly) uint32_t PIXEL_PACK_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t PIXEL_UNPACK_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t COPY_READ_BUFFER;
@property (nonatomic, readonly) uint32_t COPY_WRITE_BUFFER;
@property (nonatomic, readonly) uint32_t COPY_READ_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t COPY_WRITE_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t FLOAT_MAT2x3;
@property (nonatomic, readonly) uint32_t FLOAT_MAT2x4;
@property (nonatomic, readonly) uint32_t FLOAT_MAT3x2;
@property (nonatomic, readonly) uint32_t FLOAT_MAT3x4;
@property (nonatomic, readonly) uint32_t FLOAT_MAT4x2;
@property (nonatomic, readonly) uint32_t FLOAT_MAT4x3;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_VEC2;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_VEC3;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_VEC4;
@property (nonatomic, readonly) uint32_t UNSIGNED_NORMALIZED;
@property (nonatomic, readonly) uint32_t SIGNED_NORMALIZED;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_INTEGER;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_DIVISOR;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_BUFFER_MODE;
@property (nonatomic, readonly) uint32_t MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_VARYINGS;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_BUFFER_START;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_BUFFER_SIZE;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
@property (nonatomic, readonly) uint32_t MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
@property (nonatomic, readonly) uint32_t MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
@property (nonatomic, readonly) uint32_t INTERLEAVED_ATTRIBS;
@property (nonatomic, readonly) uint32_t SEPARATE_ATTRIBS;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_BUFFER;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_PAUSED;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_ACTIVE;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_BINDING;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_RED_SIZE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_DEFAULT;
@property (nonatomic, readonly) uint32_t DEPTH_STENCIL_ATTACHMENT;
@property (nonatomic, readonly) uint32_t DEPTH_STENCIL;
@property (nonatomic, readonly) uint32_t DEPTH24_STENCIL8;
@property (nonatomic, readonly) uint32_t DRAW_FRAMEBUFFER_BINDING;
@property (nonatomic, readonly) uint32_t READ_FRAMEBUFFER;
@property (nonatomic, readonly) uint32_t DRAW_FRAMEBUFFER;
@property (nonatomic, readonly) uint32_t READ_FRAMEBUFFER_BINDING;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_SAMPLES;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
@property (nonatomic, readonly) uint32_t UNIFORM_BUFFER;
@property (nonatomic, readonly) uint32_t UNIFORM_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t UNIFORM_BUFFER_START;
@property (nonatomic, readonly) uint32_t UNIFORM_BUFFER_SIZE;
@property (nonatomic, readonly) uint32_t MAX_VERTEX_UNIFORM_BLOCKS;
@property (nonatomic, readonly) uint32_t MAX_FRAGMENT_UNIFORM_BLOCKS;
@property (nonatomic, readonly) uint32_t MAX_COMBINED_UNIFORM_BLOCKS;
@property (nonatomic, readonly) uint32_t MAX_UNIFORM_BUFFER_BINDINGS;
@property (nonatomic, readonly) uint32_t MAX_UNIFORM_BLOCK_SIZE;
@property (nonatomic, readonly) uint32_t MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
@property (nonatomic, readonly) uint32_t MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
@property (nonatomic, readonly) uint32_t UNIFORM_BUFFER_OFFSET_ALIGNMENT;
@property (nonatomic, readonly) uint32_t ACTIVE_UNIFORM_BLOCKS;
@property (nonatomic, readonly) uint32_t UNIFORM_TYPE;
@property (nonatomic, readonly) uint32_t UNIFORM_SIZE;
@property (nonatomic, readonly) uint32_t UNIFORM_BLOCK_INDEX;
@property (nonatomic, readonly) uint32_t UNIFORM_OFFSET;
@property (nonatomic, readonly) uint32_t UNIFORM_ARRAY_STRIDE;
@property (nonatomic, readonly) uint32_t UNIFORM_MATRIX_STRIDE;
@property (nonatomic, readonly) uint32_t UNIFORM_IS_ROW_MAJOR;
@property (nonatomic, readonly) uint32_t UNIFORM_BLOCK_BINDING;
@property (nonatomic, readonly) uint32_t UNIFORM_BLOCK_DATA_SIZE;
@property (nonatomic, readonly) uint32_t UNIFORM_BLOCK_ACTIVE_UNIFORMS;
@property (nonatomic, readonly) uint32_t UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
@property (nonatomic, readonly) uint32_t UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
@property (nonatomic, readonly) uint32_t UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
@property (nonatomic, readonly) uint32_t OBJECT_TYPE;
@property (nonatomic, readonly) uint32_t SYNC_CONDITION;
@property (nonatomic, readonly) uint32_t SYNC_STATUS;
@property (nonatomic, readonly) uint32_t SYNC_FLAGS;
@property (nonatomic, readonly) uint32_t SYNC_FENCE;
@property (nonatomic, readonly) uint32_t SYNC_GPU_COMMANDS_COMPLETE;
@property (nonatomic, readonly) uint32_t UNSIGNALED;
@property (nonatomic, readonly) uint32_t SIGNALED;
@property (nonatomic, readonly) uint32_t ALREADY_SIGNALED;
@property (nonatomic, readonly) uint32_t TIMEOUT_EXPIRED;
@property (nonatomic, readonly) uint32_t CONDITION_SATISFIED;
@property (nonatomic, readonly) uint32_t WAIT_FAILED;
@property (nonatomic, readonly) uint32_t SYNC_FLUSH_COMMANDS_BIT;
@property (nonatomic, readonly) uint32_t COLOR;
@property (nonatomic, readonly) uint32_t DEPTH;
@property (nonatomic, readonly) uint32_t STENCIL;
@property (nonatomic, readonly) uint32_t MIN;
@property (nonatomic, readonly) uint32_t MAX;
@property (nonatomic, readonly) uint32_t DEPTH_COMPONENT24;
@property (nonatomic, readonly) uint32_t STREAM_READ;
@property (nonatomic, readonly) uint32_t STREAM_COPY;
@property (nonatomic, readonly) uint32_t STATIC_READ;
@property (nonatomic, readonly) uint32_t STATIC_COPY;
@property (nonatomic, readonly) uint32_t DYNAMIC_READ;
@property (nonatomic, readonly) uint32_t DYNAMIC_COPY;
@property (nonatomic, readonly) uint32_t DEPTH_COMPONENT32F;
@property (nonatomic, readonly) uint32_t DEPTH32F_STENCIL8;
@property (nonatomic, readonly) NSInteger INVALID_INDEX;
@property (nonatomic, readonly) uint64_t TIMEOUT_IGNORED;
@property (nonatomic, readonly) uint32_t MAX_CLIENT_WAIT_TIMEOUT_WEBGL;
@end


SWIFT_CLASS_NAMED("TNSWebGLActiveInfo")
@interface TNSWebGLActiveInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) int32_t size;
@property (nonatomic, readonly) uint32_t type;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name size:(int32_t)size type:(uint32_t)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("TNSWebGLShaderPrecisionFormat")
@interface TNSWebGLShaderPrecisionFormat : NSObject
@property (nonatomic, readonly) int32_t rangeMin;
@property (nonatomic, readonly) int32_t rangeMax;
@property (nonatomic, readonly) int32_t precision;
- (nonnull instancetype)initWithRangeMin:(int32_t)rangeMin rangeMax:(int32_t)rangeMax precision:(int32_t)precision OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("TNS_ANGLE_instanced_arrays")
@interface TNS_ANGLE_instanced_arrays : NSObject
@property (nonatomic, readonly) int32_t VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE;
- (nonnull instancetype)initWithContext:(TNSWebGLRenderingContext * _Nonnull)context OBJC_DESIGNATED_INITIALIZER;
- (void)drawArraysInstancedANGLEWithMode:(int32_t)mode first:(int32_t)first count:(int32_t)count primcount:(int32_t)primcount;
- (void)drawElementsInstancedANGLEWithMode:(int32_t)mode count:(int32_t)count type:(int32_t)type offset:(int32_t)offset primcount:(int32_t)primcount;
- (void)vertexAttribDivisorANGLEWithIndex:(int32_t)index divisor:(int32_t)divisor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("TNS_EXT_blend_minmax")
@interface TNS_EXT_blend_minmax : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t MIN_EXT;
@property (nonatomic, readonly) int32_t MAX_EXT;
@end


SWIFT_CLASS_NAMED("TNS_EXT_color_buffer_float")
@interface TNS_EXT_color_buffer_float : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t R16F;
@property (nonatomic, readonly) int32_t RG16F;
@property (nonatomic, readonly) int32_t RGB16F;
@property (nonatomic, readonly) int32_t R32F;
@property (nonatomic, readonly) int32_t RG32F;
@property (nonatomic, readonly) int32_t RGBA32F;
@property (nonatomic, readonly) int32_t R11F_G11F_B10F;
@end


SWIFT_CLASS_NAMED("TNS_EXT_color_buffer_half_float")
@interface TNS_EXT_color_buffer_half_float : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t RGBA16F_EXT;
@property (nonatomic, readonly) int32_t RGB16F_EXT;
@property (nonatomic, readonly) int32_t FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT;
@property (nonatomic, readonly) int32_t UNSIGNED_NORMALIZED_EXT;
@end


SWIFT_CLASS_NAMED("TNS_EXT_sRGB")
@interface TNS_EXT_sRGB : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t SRGB_EXT;
@property (nonatomic, readonly) int32_t SRGB_ALPHA_EXT;
@property (nonatomic, readonly) int32_t SRGB8_ALPHA8_EXT;
@property (nonatomic, readonly) int32_t FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT;
@end


SWIFT_CLASS_NAMED("TNS_EXT_shader_texture_lod")
@interface TNS_EXT_shader_texture_lod : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNS_EXT_texture_filter_anisotropic")
@interface TNS_EXT_texture_filter_anisotropic : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t MAX_TEXTURE_MAX_ANISOTROPY_EXT;
@property (nonatomic, readonly) int32_t TEXTURE_MAX_ANISOTROPY_EXT;
@end


SWIFT_CLASS_NAMED("TNS_OES_element_index_uint")
@interface TNS_OES_element_index_uint : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t UNSIGNED_INT;
@end


SWIFT_CLASS_NAMED("TNS_OES_fbo_render_mipmap")
@interface TNS_OES_fbo_render_mipmap : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNS_OES_standard_derivatives")
@interface TNS_OES_standard_derivatives : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNS_OES_texture_float")
@interface TNS_OES_texture_float : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNS_OES_texture_float_linear")
@interface TNS_OES_texture_float_linear : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNS_OES_texture_half_float")
@interface TNS_OES_texture_half_float : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t HALF_FLOAT_OES;
@end


SWIFT_CLASS_NAMED("TNS_OES_texture_half_float_linear")
@interface TNS_OES_texture_half_float_linear : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNS_OES_vertex_array_object")
@interface TNS_OES_vertex_array_object : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t VERTEX_ARRAY_BINDING_OES;
- (uint32_t)createVertexArrayOES SWIFT_WARN_UNUSED_RESULT;
- (void)deleteVertexArrayOESWithArrayObject:(uint32_t)arrayObject;
- (BOOL)isVertexArrayOESWithArrayObject:(uint32_t)arrayObject SWIFT_WARN_UNUSED_RESULT;
- (void)bindVertexArrayOESWithArrayObject:(uint32_t)arrayObject;
@end


SWIFT_CLASS_NAMED("TNS_WEBGL_color_buffer_float")
@interface TNS_WEBGL_color_buffer_float : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t RGBA32F_EXT;
@property (nonatomic, readonly) int32_t RGB32F_EXT;
@property (nonatomic, readonly) int32_t FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT;
@property (nonatomic, readonly) int32_t UNSIGNED_NORMALIZED_EXT;
@end


SWIFT_CLASS_NAMED("TNS_WEBGL_compressed_texture_etc")
@interface TNS_WEBGL_compressed_texture_etc : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t COMPRESSED_R11_EAC;
@property (nonatomic, readonly) int32_t COMPRESSED_SIGNED_R11_EAC;
@property (nonatomic, readonly) int32_t COMPRESSED_RG11_EAC;
@property (nonatomic, readonly) int32_t COMPRESSED_SIGNED_RG11_EAC;
@property (nonatomic, readonly) int32_t COMPRESSED_RGB8_ETC2;
@property (nonatomic, readonly) int32_t COMPRESSED_RGBA8_ETC2_EAC;
@property (nonatomic, readonly) int32_t COMPRESSED_SRGB8_ETC2;
@property (nonatomic, readonly) int32_t COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;
@property (nonatomic, readonly) int32_t COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;
@property (nonatomic, readonly) int32_t COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;
@end


SWIFT_CLASS_NAMED("TNS_WEBGL_compressed_texture_etc1")
@interface TNS_WEBGL_compressed_texture_etc1 : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t COMPRESSED_RGB_ETC1_WEBGL;
@end


SWIFT_CLASS_NAMED("TNS_WEBGL_compressed_texture_pvrtc")
@interface TNS_WEBGL_compressed_texture_pvrtc : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
@property (nonatomic, readonly) int32_t COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
@property (nonatomic, readonly) int32_t COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
@property (nonatomic, readonly) int32_t COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
@end


SWIFT_CLASS_NAMED("TNS_WEBGL_depth_texture")
@interface TNS_WEBGL_depth_texture : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t UNSIGNED_INT_24_8_WEBGL;
@end


SWIFT_CLASS_NAMED("TNS_WEBGL_draw_buffers")
@interface TNS_WEBGL_draw_buffers : NSObject
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT0_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT1_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT2_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT3_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT4_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT5_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT6_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT7_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT8_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT9_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT10_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT11_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT12_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT13_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT14_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT15_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER0_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER1_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER2_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER3_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER4_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER5_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER6_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER7_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER8_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER9_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER10_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER11_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER12_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER13_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER14_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER15_WEBGL;
@property (nonatomic, readonly) int32_t MAX_COLOR_ATTACHMENTS_WEBGL;
@property (nonatomic, readonly) int32_t MAX_DRAW_BUFFERS_WEBGL;
- (void)drawBuffersWEBGLWithBuffers:(NSArray<NSNumber *> * _Nonnull)buffers;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNS_WEBGL_lose_context")
@interface TNS_WEBGL_lose_context : NSObject
- (nonnull instancetype)initWithCanvas:(TNSCanvas * _Nonnull)canvas OBJC_DESIGNATED_INITIALIZER;
- (void)loseContext;
- (void)restoreContext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVPlayer;
@class AVPlayerItemVideoOutput;

SWIFT_CLASS_NAMED("Utils")
@interface Utils : NSObject
+ (CVOpenGLESTextureCacheRef _Nullable)createTextureCache:(TNSWebGLRenderingContext * _Nonnull)context SWIFT_WARN_UNUSED_RESULT;
+ (CVOpenGLESTextureRef _Nullable)createImage:(CVOpenGLESTextureCacheRef _Nonnull)texturecache :(CVImageBufferRef _Nonnull)buffer :(CFDictionaryRef _Nullable)textureAttributes :(GLenum)target :(GLint)internalFormat :(GLsizei)width :(GLsizei)height :(GLenum)format :(GLenum)type :(NSInteger)planeIndex SWIFT_WARN_UNUSED_RESULT;
+ (TNSRender * _Nonnull)setupRender SWIFT_WARN_UNUSED_RESULT;
+ (void)drawFrame:(AVPlayer * _Nonnull)player :(AVPlayerItemVideoOutput * _Nonnull)output :(CGSize)videoSize :(TNSRender * _Nonnull)render :(int32_t)internalFormat :(int32_t)format :(BOOL)flipYWebGL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef CANVASNATIVE_SWIFT_H
#define CANVASNATIVE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreVideo;
@import Dispatch;
@import Foundation;
@import GLKit;
@import ObjectiveC;
@import OpenGLES;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CanvasNative",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSCoder;

SWIFT_CLASS_NAMED("CanvasCPUView")
@interface CanvasCPUView : UIView
@property (nonatomic) BOOL ignorePixelScaling;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)drawRect:(CGRect)rect;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, CanvasColorStyleType, "CanvasColorStyleType", open) {
  CanvasColorStyleTypeColor = 0,
  CanvasColorStyleTypeGradient = 1,
  CanvasColorStyleTypePattern = 2,
};

@class EAGLContext;

SWIFT_CLASS_NAMED("CanvasGLKView")
@interface CanvasGLKView : GLKView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame context:(EAGLContext * _Nonnull)context SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12CanvasNative10GLRenderer")
@interface GLRenderer : NSObject <GLKViewDelegate>
- (void)glkView:(GLKView * _Nonnull)view drawInRect:(CGRect)rect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP12CanvasNative17ICanvasColorStyle_")
@protocol ICanvasColorStyle
- (enum CanvasColorStyleType)getStyleType SWIFT_WARN_UNUSED_RESULT;
@end

@class NSString;

SWIFT_CLASS_NAMED("TNSAnimationFrame")
@interface TNSAnimationFrame : NSObject
+ (void)requestAnimationFrameToLoop:(void (^ _Nonnull)(float))toLoop;
+ (void)cancelAnimationFrameWithId:(NSString * _Nonnull)id;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TNSDOMMatrix;
@class UIImage;
@protocol TNSCanvasListener;
@class TNSCanvasRenderingContext;
@class TNSContextAttributes;

SWIFT_CLASS_NAMED("TNSCanvas")
@interface TNSCanvas : UIView
+ (NSMapTable<NSString *, TNSCanvas *> * _Nonnull)getViews SWIFT_WARN_UNUSED_RESULT;
- (void * _Nullable)getViewPtr SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL ignorePixelScaling;
+ (TNSDOMMatrix * _Nonnull)createSVGMatrix SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL handleInvalidationManually;
- (void)didDraw;
- (NSString * _Nonnull)toDataURL SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toDataURL:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toDataURL:(NSString * _Nonnull)type :(float)format SWIFT_WARN_UNUSED_RESULT;
- (void)toDataURLAsync:(void (^ _Nonnull)(NSString * _Nonnull))callback;
- (void)toDataURLAsync:(NSString * _Nonnull)type :(void (^ _Nonnull)(NSString * _Nonnull))callback;
- (void)toDataURLAsync:(NSString * _Nonnull)type :(float)format :(void (^ _Nonnull)(NSString * _Nonnull))callback;
- (NSArray<NSNumber *> * _Nonnull)snapshot SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getImage SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Nonnull)snapshotEncoded SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isGL;
- (GLint)getId SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) float width;
@property (nonatomic, readonly) float height;
- (void)updateDirection:(NSString * _Nonnull)direction;
@property (nonatomic) int64_t context;
- (void)doDraw;
- (void)flush;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame useCpu:(BOOL)useCpu OBJC_DESIGNATED_INITIALIZER;
- (void)setListener:(id <TNSCanvasListener> _Nullable)listener;
@property (nonatomic, readonly) float fps;
+ (void)layoutView:(UIView * _Nonnull)view :(CGFloat)width :(CGFloat)height;
- (void)layoutSubviews;
- (void)resume;
- (void)pause;
- (void)moveToMain;
- (void)moveOffMain;
- (void)handleMoveOffMain;
- (void)handleMoveToMain;
- (TNSCanvasRenderingContext * _Nullable)getContext:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
- (TNSCanvasRenderingContext * _Nullable)getContextWithType:(NSString * _Nonnull)type attributes:(NSString * _Nonnull)attributes SWIFT_WARN_UNUSED_RESULT;
- (TNSCanvasRenderingContext * _Nullable)getContext:(NSString * _Nonnull)type contextAttributes:(NSDictionary<NSString *, id> * _Nonnull)contextAttributes SWIFT_WARN_UNUSED_RESULT;
- (TNSCanvasRenderingContext * _Nullable)getContextWithType:(NSString * _Nonnull)type contextAttributes:(TNSContextAttributes * _Nonnull)contextAttributes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL_NAMED("TNSCanvasListener")
@protocol TNSCanvasListener
- (void)contextReady;
@end


SWIFT_CLASS_NAMED("TNSCanvasRenderingContext")
@interface TNSCanvasRenderingContext : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum TNSCompositeOperationType : NSInteger;
enum TNSImageSmoothingQuality : uint32_t;
enum TNSLineCap : NSInteger;
enum TNSLineJoin : NSInteger;
enum TNSTextAlignment : NSInteger;
enum TNSTextBaseLine : NSInteger;
@class TNSPath2D;
enum TNSFillRule : NSInteger;
@class TNSLinearGradient;
@class TNSRadialGradient;
@class TNSConicGradient;
enum TNSPatternRepetition : NSInteger;
@class TNSImageData;
@class TNSTextMetrics;

SWIFT_CLASS_NAMED("TNSCanvasRenderingContext2D")
@interface TNSCanvasRenderingContext2D : TNSCanvasRenderingContext
- (nonnull instancetype)init:(TNSCanvas * _Nonnull)canvas OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nonnull font;
@property (nonatomic, copy) NSString * _Nonnull filter;
@property (nonatomic) float globalAlpha;
@property (nonatomic) enum TNSCompositeOperationType globalCompositeOperation;
@property (nonatomic) BOOL imageSmoothingEnabled;
@property (nonatomic) enum TNSImageSmoothingQuality imageSmoothingQuality;
@property (nonatomic) enum TNSLineCap lineCap;
@property (nonatomic) float lineDashOffset;
@property (nonatomic) float lineWidth;
@property (nonatomic) enum TNSLineJoin lineJoin;
@property (nonatomic) float miterLimit;
@property (nonatomic) float shadowBlur;
@property (nonatomic, copy) NSString * _Nonnull shadowColor;
@property (nonatomic) float shadowOffsetX;
@property (nonatomic) float shadowOffsetY;
@property (nonatomic) enum TNSTextAlignment textAlign;
@property (nonatomic) enum TNSTextBaseLine textBaseline;
- (void)setFillStyleWithString:(NSString * _Nonnull)color;
@property (nonatomic, strong) id <ICanvasColorStyle> _Nonnull fillStyle;
- (void)setStrokeStyleWithString:(NSString * _Nonnull)color;
@property (nonatomic, strong) id <ICanvasColorStyle> _Nonnull strokeStyle;
- (void)fillRect:(float)x :(float)y :(float)width :(float)height;
- (void)strokeRect:(float)x :(float)y :(float)width :(float)height;
- (void)fillText:(NSString * _Nonnull)text :(float)x :(float)y;
- (void)fillText:(NSString * _Nonnull)text :(float)x :(float)y :(float)width;
- (void)strokeText:(NSString * _Nonnull)text :(float)x :(float)y;
- (void)strokeText:(NSString * _Nonnull)text :(float)x :(float)y :(float)width;
- (void)rect:(float)x :(float)y :(float)width :(float)height;
- (void)roundRectWithX:(float)x y:(float)y width:(float)width height:(float)height topLeft:(float)topLeft topRight:(float)topRight bottomRight:(float)bottomRight bottomLeft:(float)bottomLeft;
- (void)roundRectWithX:(float)x y:(float)y width:(float)width height:(float)height radii:(float)radii;
- (void)roundRect:(float)x :(float)y :(float)width :(float)height :(NSArray<NSNumber *> * _Nonnull)radii;
- (void)fill;
- (void)fillWithValue:(id _Nonnull)value;
- (void)fill:(TNSPath2D * _Nonnull)path :(enum TNSFillRule)rule;
- (void)stroke;
- (void)stroke:(TNSPath2D * _Nullable)path;
- (void)beginPath;
- (void)moveTo:(float)x :(float)y;
- (void)lineTo:(float)x :(float)y;
- (void)closePath;
- (void)arc:(float)x :(float)y :(float)radius :(float)startAngle :(float)endAngle;
- (void)arc:(float)x :(float)y :(float)radius :(float)startAngle :(float)endAngle :(BOOL)anticlockwise;
- (void)arcTo:(float)x1 :(float)y1 :(float)x2 :(float)y2 :(float)radius;
- (void)bezierCurveTo:(float)cp1x :(float)cp1y :(float)cp2x :(float)cp2y :(float)x :(float)y;
- (void)ellipse:(float)x :(float)y :(float)radiusX :(float)radiusY :(float)rotation :(float)startAngle :(float)endAngle;
- (void)ellipse:(float)x :(float)y :(float)radiusX :(float)radiusY :(float)rotation :(float)startAngle :(float)endAngle :(BOOL)anticlockwise;
- (void)clip;
- (void)clip:(id _Nonnull)value;
- (void)clip:(TNSPath2D * _Nonnull)path :(enum TNSFillRule)rule;
- (void)clearRect:(float)x :(float)y :(float)width :(float)height;
- (void)setLineDash:(NSArray<NSNumber *> * _Nonnull)segments;
- (TNSCanvas * _Nonnull)getCanvas SWIFT_WARN_UNUSED_RESULT;
- (TNSLinearGradient * _Nonnull)createLinearGradient:(float)x0 :(float)y0 :(float)x1 :(float)y1 SWIFT_WARN_UNUSED_RESULT;
- (TNSRadialGradient * _Nonnull)createRadialGradient:(float)x0 :(float)y0 :(float)r0 :(float)x1 :(float)y1 :(float)r1 SWIFT_WARN_UNUSED_RESULT;
- (TNSConicGradient * _Nonnull)createConicGradient:(float)startAngle :(float)x :(float)y SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)createPattern:(id _Nonnull)value :(enum TNSPatternRepetition)repetition SWIFT_WARN_UNUSED_RESULT;
- (void)setTransform:(float)a :(float)b :(float)c :(float)d :(float)e :(float)f;
- (void)scale:(float)x :(float)y;
- (void)rotate:(float)angle;
- (void)translate:(float)x :(float)y;
- (void)quadraticCurveTo:(float)cpx :(float)cpy :(float)x :(float)y;
- (void)drawImage:(id _Nonnull)image :(float)dx :(float)dy;
- (void)drawImage:(id _Nonnull)image :(float)dx :(float)dy :(float)dWidth :(float)dHeight;
- (void)drawImage:(id _Nonnull)image :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(float)dx :(float)dy :(float)dWidth :(float)dHeight;
- (TNSImageData * _Nonnull)createImageData:(int32_t)width :(int32_t)height SWIFT_WARN_UNUSED_RESULT;
- (TNSImageData * _Nonnull)createImageData:(TNSImageData * _Nonnull)imageData SWIFT_WARN_UNUSED_RESULT;
- (TNSImageData * _Nonnull)getImageData:(float)sx :(float)sy :(float)sw :(float)sh SWIFT_WARN_UNUSED_RESULT;
- (void)putImageData:(TNSImageData * _Nonnull)imageData :(float)dx :(float)dy;
- (void)putImageData:(TNSImageData * _Nonnull)imageData :(float)dx :(float)dy :(float)dirtyX :(float)dirtyY :(float)dirtyWidth :(float)dirtyHeight;
- (NSArray<NSNumber *> * _Nonnull)getLineDash SWIFT_WARN_UNUSED_RESULT;
- (void)save;
- (void)restore;
- (TNSTextMetrics * _Nonnull)measureText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)resetTransform;
- (void)transform:(float)a :(float)b :(float)c :(float)d :(float)e :(float)f;
- (BOOL)isPointInPath:(float)x :(float)y SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPointInPath:(float)x :(float)y :(enum TNSFillRule)fillRule SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPointInPath:(TNSPath2D * _Nonnull)path :(float)x :(float)y :(enum TNSFillRule)fillRule SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPointInStroke:(float)x :(float)y SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPointInStroke:(TNSPath2D * _Nonnull)path :(float)x :(float)y SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("TNSColorStyle")
@interface TNSColorStyle : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNSColor")
@interface TNSColor : NSObject <ICanvasColorStyle>
- (nonnull instancetype)init:(NSString * _Nonnull)color OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull color;
- (enum CanvasColorStyleType)getStyleType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("TNSGradient")
@interface TNSGradient : NSObject <ICanvasColorStyle>
- (enum CanvasColorStyleType)getStyleType SWIFT_WARN_UNUSED_RESULT;
- (void)addColorStop:(float)offset :(NSString * _Nonnull)color;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("TNSLinearGradient")
@interface TNSLinearGradient : TNSGradient
@end


SWIFT_CLASS_NAMED("TNSRadialGradient")
@interface TNSRadialGradient : TNSGradient
@end


SWIFT_CLASS_NAMED("TNSConicGradient")
@interface TNSConicGradient : TNSGradient
@end


SWIFT_CLASS_NAMED("TNSPattern")
@interface TNSPattern : NSObject <ICanvasColorStyle>
- (void)setTransformWithMatrix:(TNSDOMMatrix * _Nonnull)matrix;
- (enum CanvasColorStyleType)getStyleType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TNSCompositeOperationType, "TNSCompositeOperationType", open) {
  TNSCompositeOperationTypeSourceOver = 0,
  TNSCompositeOperationTypeSourceIn = 1,
  TNSCompositeOperationTypeSourceOut = 2,
  TNSCompositeOperationTypeSourceAtop = 3,
  TNSCompositeOperationTypeDestinationOver = 4,
  TNSCompositeOperationTypeDestinationIn = 5,
  TNSCompositeOperationTypeDestinationOut = 6,
  TNSCompositeOperationTypeDestinationAtop = 7,
  TNSCompositeOperationTypeLighter = 8,
  TNSCompositeOperationTypeCopy = 9,
  TNSCompositeOperationTypeXor = 10,
  TNSCompositeOperationTypeMultiply = 11,
  TNSCompositeOperationTypeScreen = 12,
  TNSCompositeOperationTypeOverlay = 13,
  TNSCompositeOperationTypeDarken = 14,
  TNSCompositeOperationTypeLighten = 15,
  TNSCompositeOperationTypeColorDodge = 16,
  TNSCompositeOperationTypeColorBurn = 17,
  TNSCompositeOperationTypeHardLight = 18,
  TNSCompositeOperationTypeSoftLight = 19,
  TNSCompositeOperationTypeDifference = 20,
  TNSCompositeOperationTypeExclusion = 21,
  TNSCompositeOperationTypeHue = 22,
  TNSCompositeOperationTypeSaturation = 23,
  TNSCompositeOperationTypeColor = 24,
  TNSCompositeOperationTypeLuminosity = 25,
};


SWIFT_CLASS_NAMED("TNSContextAttributes")
@interface TNSContextAttributes : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNSDOMMatrix")
@interface TNSDOMMatrix : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) float a;
@property (nonatomic) float b;
@property (nonatomic) float c;
@property (nonatomic) float d;
@property (nonatomic) float e;
@property (nonatomic) float f;
@property (nonatomic) float m11;
@property (nonatomic) float m12;
@property (nonatomic) float m13;
@property (nonatomic) float m14;
@property (nonatomic) float m21;
@property (nonatomic) float m22;
@property (nonatomic) float m23;
@property (nonatomic) float m24;
@property (nonatomic) float m31;
@property (nonatomic) float m32;
@property (nonatomic) float m33;
@property (nonatomic) float m34;
@property (nonatomic) float m41;
@property (nonatomic) float m42;
@property (nonatomic) float m43;
@property (nonatomic) float m44;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TNSFillRule, "TNSFillRule", open) {
  TNSFillRuleNonZero = 0,
  TNSFillRuleEvenOdd = 1,
};


SWIFT_CLASS_NAMED("TNSFramebufferAttachmentParameter")
@interface TNSFramebufferAttachmentParameter : NSObject
@property (nonatomic, readonly) BOOL isTexture;
@property (nonatomic, readonly) BOOL isRenderbuffer;
@property (nonatomic, readonly) int32_t value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIsTexture:(BOOL)isTexture isRenderbuffer:(BOOL)isRenderbuffer value:(int32_t)value OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;
enum TNSImageAssetFormat : NSInteger;

SWIFT_CLASS_NAMED("TNSImageAsset")
@interface TNSImageAsset : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) dispatch_queue_t _Nullable _queue;)
+ (dispatch_queue_t _Nullable)_queue SWIFT_WARN_UNUSED_RESULT;
+ (void)set_queue:(dispatch_queue_t _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)loadImageFromPathWithPath:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
- (BOOL)loadImageFromUrlWithUrl:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (void)loadImageFromUrlAsyncWithUrl:(NSString * _Nonnull)url callback:(void (^ _Nonnull)(NSString * _Nullable))callback;
- (void)loadImageFromPathAsyncWithPath:(NSString * _Nonnull)path callback:(void (^ _Nonnull)(NSString * _Nullable))callback;
- (BOOL)loadImageFromBuffer:(NSData * _Nonnull)buffer SWIFT_WARN_UNUSED_RESULT;
- (void)loadImageFromBufferAsync:(NSData * _Nonnull)buffer callback:(void (^ _Nonnull)(NSString * _Nullable))callback;
- (BOOL)loadImageFromBytesWithArray:(NSArray<NSNumber *> * _Nonnull)array SWIFT_WARN_UNUSED_RESULT;
- (void)loadImageFromBytesAsyncWithArray:(NSArray<NSNumber *> * _Nonnull)array callback:(void (^ _Nonnull)(NSString * _Nullable))callback;
- (BOOL)loadImageFromImageWithImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
- (void)loadImageFromImageAsyncWithImage:(UIImage * _Nonnull)image callback:(void (^ _Nonnull)(NSString * _Nullable))callback;
- (uint8_t * _Nullable)getRawBytes SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) int32_t width;
@property (nonatomic, readonly) int32_t height;
- (void)flipX;
- (void)flipY;
- (void)scaleWithX:(uint32_t)x y:(uint32_t)y;
- (BOOL)saveWithPath:(NSString * _Nonnull)path format:(enum TNSImageAssetFormat)format SWIFT_WARN_UNUSED_RESULT;
- (void)saveAsyncWithPath:(NSString * _Nonnull)path format:(enum TNSImageAssetFormat)format callback:(void (^ _Nonnull)(BOOL))callback;
@property (nonatomic, readonly, copy) NSString * _Nullable error;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TNSImageAssetFormat, "TNSImageAssetFormat", open) {
  TNSImageAssetFormatJPG = 0,
  TNSImageAssetFormatPNG = 1,
  TNSImageAssetFormatICO = 2,
  TNSImageAssetFormatBMP = 3,
  TNSImageAssetFormatTIFF = 4,
};

@class TNSImageBitmapOptions;

SWIFT_CLASS_NAMED("TNSImageBitmap")
@interface TNSImageBitmap : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) dispatch_queue_t _Nonnull queue;)
+ (dispatch_queue_t _Nonnull)queue SWIFT_WARN_UNUSED_RESULT;
+ (void)createFromImageBitmap:(TNSImageBitmap * _Nonnull)imageBitmap :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromImageBitmap:(TNSImageBitmap * _Nonnull)imageBitmap :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromImageAsset:(TNSImageAsset * _Nonnull)imageAsset :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromImageAsset:(TNSImageAsset * _Nonnull)imageAsset :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromImageData:(TNSImageData * _Nonnull)imageData :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromImageData:(TNSImageData * _Nonnull)imageData :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromCanvas:(TNSCanvas * _Nonnull)canvas :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromCanvas:(TNSCanvas * _Nonnull)canvas :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromData:(NSData * _Nonnull)data :(float)imageWidth :(float)imageHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromData:(NSData * _Nonnull)data :(float)imageWidth :(float)imageHeight :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromDataEncoded:(NSData * _Nonnull)data :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromDataEncoded:(NSData * _Nonnull)data :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromBytes:(NSArray<NSNumber *> * _Nonnull)bytes :(float)imageWidth :(float)imageHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromBytes:(NSArray<NSNumber *> * _Nonnull)bytes :(float)imageWidth :(float)imageHeight :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromBytesEncoded:(NSArray<NSNumber *> * _Nonnull)bytes :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromBytesEncoded:(NSArray<NSNumber *> * _Nonnull)bytes :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromUIImage:(UIImage * _Nonnull)canvas :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
+ (void)createFromUIImage:(UIImage * _Nonnull)canvas :(float)sx :(float)sy :(float)sWidth :(float)sHeight :(TNSImageBitmapOptions * _Nonnull)options :(void (^ _Nonnull)(TNSImageBitmap * _Nullable, NSString * _Nullable))callback;
@property (nonatomic, readonly) int32_t width;
@property (nonatomic, readonly) int32_t height;
- (void)close;
@property (nonatomic, readonly, copy) NSString * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TNSImageBitmapColorSpaceConversion, "TNSImageBitmapColorSpaceConversion", open) {
  TNSImageBitmapColorSpaceConversionDefault = 0,
  TNSImageBitmapColorSpaceConversionNone = 1,
};

enum TNSImageBitmapPremultiplyAlpha : NSInteger;
enum TNSImageBitmapResizeQuality : NSInteger;

SWIFT_CLASS_NAMED("TNSImageBitmapOptions")
@interface TNSImageBitmapOptions : NSObject
@property (nonatomic) BOOL flipY;
@property (nonatomic) enum TNSImageBitmapPremultiplyAlpha premultiplyAlpha;
@property (nonatomic) enum TNSImageBitmapColorSpaceConversion colorSpaceConversion;
@property (nonatomic) enum TNSImageBitmapResizeQuality resizeQuality;
@property (nonatomic) float resizeWidth;
@property (nonatomic) float resizeHeight;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TNSImageBitmapPremultiplyAlpha, "TNSImageBitmapPremultiplyAlpha", open) {
  TNSImageBitmapPremultiplyAlphaDefault = 0,
  TNSImageBitmapPremultiplyAlphaPremultiply = 1,
  TNSImageBitmapPremultiplyAlphaNone = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, TNSImageBitmapResizeQuality, "TNSImageBitmapResizeQuality", open) {
  TNSImageBitmapResizeQualityLow = 0,
  TNSImageBitmapResizeQualityMedium = 1,
  TNSImageBitmapResizeQualityHigh = 2,
  TNSImageBitmapResizeQualityPixelated = 3,
};


SWIFT_CLASS_NAMED("TNSImageData")
@interface TNSImageData : NSObject
@property (nonatomic, readonly, strong) NSData * _Nonnull data;
@property (nonatomic, readonly) int32_t width;
@property (nonatomic, readonly) int32_t height;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(uint32_t, TNSImageSmoothingQuality, "TNSImageSmoothingQuality", open) {
  TNSImageSmoothingQualityLow = 0,
  TNSImageSmoothingQualityMedium = 1,
  TNSImageSmoothingQualityHigh = 2,
};


SWIFT_CLASS_NAMED("TNSIndexedParameter")
@interface TNSIndexedParameter : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TNSLineCap, "TNSLineCap", open) {
  TNSLineCapButt = 0,
  TNSLineCapRound = 1,
  TNSLineCapSquare = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, TNSLineJoin, "TNSLineJoin", open) {
  TNSLineJoinRound = 0,
  TNSLineJoinBevel = 1,
  TNSLineJoinMiter = 2,
};


SWIFT_CLASS_NAMED("TNSPath2D")
@interface TNSPath2D : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPath:(TNSPath2D * _Nonnull)path OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithData:(NSString * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (void)addPath:(TNSPath2D * _Nonnull)path;
- (void)addPath:(TNSPath2D * _Nonnull)path :(TNSDOMMatrix * _Nullable)transform;
- (void)closePath;
- (void)moveTo:(float)x :(float)y;
- (void)lineTo:(float)x :(float)y;
- (void)bezierCurveTo:(float)cp1x :(float)cp1y :(float)cp2x :(float)cp2y :(float)x :(float)y;
- (void)quadraticCurveTo:(float)cpx :(float)cpy :(float)x :(float)y;
- (void)arc:(float)x :(float)y :(float)radius :(float)startAngle :(float)endAngle;
- (void)arc:(float)x :(float)y :(float)radius :(float)startAngle :(float)endAngle :(BOOL)anticlockwise;
- (void)arcTo:(float)x1 :(float)y1 :(float)x2 :(float)y2 :(float)radius;
- (void)ellipse:(float)x :(float)y :(float)radiusX :(float)radiusY :(float)rotation :(float)startAngle :(float)endAngle;
- (void)ellipse:(float)x :(float)y :(float)radiusX :(float)radiusY :(float)rotation :(float)startAngle :(float)endAngle :(BOOL)anticlockwise;
- (void)rect:(float)x :(float)y :(float)width :(float)height;
- (void)roundRect:(float)x :(float)y :(float)width :(float)height :(float)topLeft :(float)topRight :(float)bottomRight :(float)bottomLeft;
- (void)roundRectWithRadii:(float)x :(float)y :(float)width :(float)height :(float)radii;
- (void)roundRectWithX:(float)x y:(float)y width:(float)width height:(float)height radii:(NSArray<NSNumber *> * _Nonnull)radii;
@end

typedef SWIFT_ENUM(NSInteger, TNSPatternRepetition, open) {
  TNSPatternRepetitionRepeat = 0,
  TNSPatternRepetitionRepeatX = 1,
  TNSPatternRepetitionRepeatY = 2,
  TNSPatternRepetitionNoRepeat = 3,
};


SWIFT_CLASS_NAMED("TNSRender")
@interface TNSRender : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)createSurface;
@end


SWIFT_CLASS_NAMED("TNSSVG")
@interface TNSSVG : UIView
@property (nonatomic) BOOL ignorePixelScaling;
@property (nonatomic, copy) NSString * _Nullable src;
@property (nonatomic, copy) NSString * _Nullable srcPath;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)drawRect:(CGRect)rect;
- (UIImage * _Nullable)toImage SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)toData SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TNSTextAlignment, "TNSTextAlignment", open) {
  TNSTextAlignmentStart = 0,
  TNSTextAlignmentLeft = 1,
  TNSTextAlignmentCenter = 2,
  TNSTextAlignmentRight = 3,
  TNSTextAlignmentEnd = 4,
};

typedef SWIFT_ENUM_NAMED(NSInteger, TNSTextBaseLine, "TNSTextBaseLine", open) {
  TNSTextBaseLineTop = 0,
  TNSTextBaseLineHanging = 1,
  TNSTextBaseLineMiddle = 2,
  TNSTextBaseLineAlphabetic = 3,
  TNSTextBaseLineIdeographic = 4,
  TNSTextBaseLineBottom = 5,
};


SWIFT_CLASS_NAMED("TNSTextDecoder")
@interface TNSTextDecoder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEncoding:(NSString * _Nonnull)encoding OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull encoding;
- (NSString * _Nonnull)decodeWithBuffer:(NSData * _Nonnull)buffer SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithBuffer:(NSData * _Nonnull)buffer offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithBuffer:(NSData * _Nonnull)buffer offset:(NSInteger)offset length:(NSInteger)length SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithU8:(void * _Nonnull)buffer :(NSInteger)size SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithU8:(void * _Nonnull)buffer :(NSInteger)size offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI8:(void * _Nonnull)buffer :(NSInteger)size SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI8:(void * _Nonnull)buffer :(NSInteger)size offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithU16:(void * _Nonnull)buffer :(NSInteger)size SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithU16:(void * _Nonnull)buffer :(NSInteger)size offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI16:(void * _Nonnull)buffer :(NSInteger)size SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI16:(void * _Nonnull)buffer :(NSInteger)size offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI32:(void * _Nonnull)buffer :(NSInteger)size SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI32:(void * _Nonnull)buffer :(NSInteger)size offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithU32:(void * _Nonnull)buffer :(NSInteger)size SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithU32:(void * _Nonnull)buffer :(NSInteger)size offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithBytes:(NSArray<NSNumber *> * _Nonnull)bytes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI8:(NSArray<NSNumber *> * _Nonnull)bytes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithU16:(NSArray<NSNumber *> * _Nonnull)bytes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI16:(NSArray<NSNumber *> * _Nonnull)bytes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithI32:(NSArray<NSNumber *> * _Nonnull)bytes SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)decodeWithU32:(NSArray<NSNumber *> * _Nonnull)bytes SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TNSTextDirection, "TNSTextDirection", open) {
  TNSTextDirectionLtr = 0,
  TNSTextDirectionRtl = 1,
};


SWIFT_CLASS_NAMED("TNSTextEncoder")
@interface TNSTextEncoder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEncoding:(NSString * _Nonnull)encoding OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull encoding;
- (NSData * _Nonnull)encodeWithText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)encodeWithPointer:(int8_t const * _Nullable)text SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("TNSTextMetrics")
@interface TNSTextMetrics : NSObject
@property (nonatomic, readonly) float width;
@property (nonatomic, readonly) float actualBoundingBoxLeft;
@property (nonatomic, readonly) float actualBoundingBoxRight;
@property (nonatomic, readonly) float actualBoundingBoxAscent;
@property (nonatomic, readonly) float actualBoundingBoxDescent;
@property (nonatomic, readonly) float fontBoundingBoxAscent;
@property (nonatomic, readonly) float fontBoundingBoxDescent;
@property (nonatomic, readonly) float emHeightAscent;
@property (nonatomic, readonly) float emHeightDescent;
@property (nonatomic, readonly) float hangingBaseline;
@property (nonatomic, readonly) float alphabeticBaseline;
@property (nonatomic, readonly) float ideographicBaseline;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNull;
@class TNSWebGLActiveInfo;
@class TNSWebGLShaderPrecisionFormat;

SWIFT_CLASS_NAMED("TNSWebGLRenderingContext")
@interface TNSWebGLRenderingContext : TNSCanvasRenderingContext
- (nonnull instancetype)init:(TNSCanvas * _Nonnull)canvas OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(TNSCanvas * _Nonnull)canvas :(NSDictionary<NSString *, id> * _Nonnull)attrs OBJC_DESIGNATED_INITIALIZER;
- (TNSCanvas * _Nonnull)getCanvas SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) int32_t drawingBufferWidth;
@property (nonatomic, readonly) int32_t drawingBufferHeight;
- (void)activeTexture:(uint32_t)texture;
- (void)attachShader:(uint32_t)program :(uint32_t)shader;
- (void)bindAttribLocation:(uint32_t)program :(uint32_t)index :(NSString * _Nonnull)name;
- (void)bindBuffer:(uint32_t)target :(uint32_t)buffer;
- (void)bindFramebuffer:(uint32_t)target :(uint32_t)framebuffer;
- (void)bindRenderbuffer:(uint32_t)target :(uint32_t)renderbuffer;
- (void)bindTexture:(uint32_t)target :(uint32_t)texture;
- (void)blendColor:(float)red :(float)green :(float)blue :(float)alpha;
- (void)blendEquation:(uint32_t)mode;
- (void)blendEquationSeparate:(uint32_t)modeRGB :(uint32_t)modeAlpha;
- (void)blendFunc:(uint32_t)sfactor :(uint32_t)dfactor;
- (void)blendFuncSeparate:(uint32_t)srcRGB :(uint32_t)dstRGB :(uint32_t)srcAlpha :(uint32_t)dstAlpha;
- (void)bufferData:(uint32_t)target size:(NSInteger)size :(uint32_t)usage;
- (void)bufferData:(uint32_t)target srcData:(NSNull * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferData:(uint32_t)target i8:(NSArray<NSNumber *> * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferData:(uint32_t)target srcData:(void * _Nonnull)srcData size:(NSInteger)size :(uint32_t)usage;
- (void)bufferData:(uint32_t)target srcData:(void * _Nonnull)srcData size:(NSInteger)size :(uint32_t)usage offset:(NSInteger)offset;
- (void)bufferData:(uint32_t)target u8:(NSArray<NSNumber *> * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferData:(uint32_t)target i16:(NSArray<NSNumber *> * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferData:(uint32_t)target u16:(NSArray<NSNumber *> * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferData:(uint32_t)target i32:(NSArray<NSNumber *> * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferData:(uint32_t)target u32:(NSArray<NSNumber *> * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferData:(uint32_t)target f32:(NSArray<NSNumber *> * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferData:(uint32_t)target f64:(NSArray<NSNumber *> * _Nonnull)srcData :(uint32_t)usage;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset :(NSNull * _Nonnull)srcData;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset i8:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset srcData:(void * _Nonnull)srcData size:(NSInteger)size;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset srcData:(void * _Nonnull)srcData size:(NSInteger)size os:(NSInteger)os;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset u8:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset i16:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset u16:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset i32:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset u32:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset f32:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)bufferSubData:(uint32_t)target :(NSInteger)offset f64:(NSArray<NSNumber *> * _Nonnull)srcData;
- (uint32_t)checkFramebufferStatus:(uint32_t)target SWIFT_WARN_UNUSED_RESULT;
- (void)clear:(uint32_t)mask;
- (void)clearColor:(float)red :(float)green :(float)blue :(float)alpha;
- (void)clearDepth:(float)depth;
- (void)clearStencil:(int32_t)stencil;
- (void)colorMask:(BOOL)red :(BOOL)green :(BOOL)blue :(BOOL)alpha;
- (void)commit;
- (void)compileShader:(uint32_t)shader;
- (void)compressedTexImage2D:(uint32_t)target :(int32_t)level :(uint32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(NSData * _Nullable)pixels;
- (void)compressedTexSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)width :(int32_t)height :(uint32_t)format :(NSData * _Nullable)pixels;
- (void)copyTexImage2D:(uint32_t)target :(int32_t)level :(uint32_t)internalformat :(int32_t)x :(int32_t)y :(int32_t)width :(int32_t)height :(int32_t)border;
- (void)copyTexSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)x :(int32_t)y :(int32_t)width :(int32_t)height;
- (uint32_t)createBuffer SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)createFramebuffer SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)createProgram SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)createRenderbuffer SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)createShader:(uint32_t)type SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)createTexture SWIFT_WARN_UNUSED_RESULT;
- (void)cullFace:(uint32_t)mode;
- (void)deleteBuffer:(uint32_t)buffer;
- (void)deleteFramebuffer:(uint32_t)frameBuffer;
- (void)deleteProgram:(uint32_t)program;
- (void)deleteRenderbuffer:(uint32_t)renderbuffer;
- (void)deleteShader:(uint32_t)shader;
- (void)deleteTexture:(uint32_t)texture;
- (void)depthFunc:(uint32_t)fn;
- (void)depthMask:(BOOL)flag;
- (void)depthRange:(float)zNear :(float)zFar;
- (void)detachShader:(uint32_t)program :(uint32_t)shader;
- (void)disable:(uint32_t)cap;
- (void)disableVertexAttribArray:(uint32_t)index;
- (void)drawArrays:(uint32_t)mode :(int32_t)first :(int32_t)count;
- (void)drawElements:(uint32_t)mode :(int32_t)count :(uint32_t)type :(NSInteger)offset;
- (void)enable:(uint32_t)cap;
- (void)enableVertexAttribArray:(uint32_t)index;
- (void)finish;
- (void)flush;
- (void)framebufferRenderbuffer:(uint32_t)target :(uint32_t)attachment :(uint32_t)renderbuffertarget :(uint32_t)renderbuffer;
- (void)framebufferTexture2D:(uint32_t)target :(uint32_t)attachment :(uint32_t)textarget :(uint32_t)texture :(int32_t)level;
- (void)frontFace:(uint32_t)mode;
- (void)generateMipmap:(uint32_t)target;
- (TNSWebGLActiveInfo * _Nonnull)getActiveAttrib:(uint32_t)program :(uint32_t)index SWIFT_WARN_UNUSED_RESULT;
- (TNSWebGLActiveInfo * _Nonnull)getActiveUniform:(uint32_t)program :(uint32_t)index SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Nonnull)getAttachedShaders:(uint32_t)program SWIFT_WARN_UNUSED_RESULT;
- (int32_t)getAttribLocation:(uint32_t)program :(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (int32_t)getBufferParameter:(uint32_t)target :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getContextAttributes SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getError SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getExtension:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (TNSFramebufferAttachmentParameter * _Nonnull)getFramebufferAttachmentParameter:(uint32_t)target :(uint32_t)attachment :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getParameter:(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getProgramInfoLog:(uint32_t)program SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getProgramParameter:(uint32_t)program :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (int32_t)getRenderbufferParameter:(uint32_t)target :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getShaderInfoLog:(uint32_t)shader SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getShaderParameter:(uint32_t)shader :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (TNSWebGLShaderPrecisionFormat * _Nonnull)getShaderPrecisionFormat:(uint32_t)shaderType :(uint32_t)precisionType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getShaderSource:(uint32_t)shader SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getSupportedExtensions SWIFT_WARN_UNUSED_RESULT;
- (int32_t)getTexParameter:(uint32_t)target :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getUniform:(uint32_t)program :(int32_t)location SWIFT_WARN_UNUSED_RESULT;
- (int32_t)getUniformLocation:(uint32_t)program :(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getVertexAttrib:(uint32_t)index :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getVertexAttribOffset:(uint32_t)index :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (void)hint:(uint32_t)target :(uint32_t)mode;
- (BOOL)isBuffer:(uint32_t)buffer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isContextLost SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEnabled:(uint32_t)cap SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isFramebuffer:(uint32_t)framebuffer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isProgram:(uint32_t)program SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isRenderbuffer:(uint32_t)renderbuffer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isShader:(uint32_t)shader SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isTexture:(uint32_t)texture SWIFT_WARN_UNUSED_RESULT;
- (void)lineWidth:(float)width;
- (void)linkProgram:(uint32_t)program;
- (void)pixelStorei:(uint32_t)pname :(uint32_t)param;
- (void)polygonOffset:(float)factor :(float)units;
- (void)readPixels:(int32_t)x :(int32_t)y :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type :(void * _Nonnull)pixels;
- (void)readPixels:(int32_t)x :(int32_t)y :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type :(void * _Nonnull)pixels offset:(NSInteger)offset;
- (void)renderbufferStorage:(uint32_t)target :(uint32_t)internalFormat :(int32_t)width :(int32_t)height;
- (void)sampleCoverage:(float)value :(BOOL)invert;
- (void)scissor:(int32_t)x :(int32_t)y :(int32_t)width :(int32_t)height;
- (void)shaderSource:(uint32_t)shader :(NSString * _Nonnull)source;
- (void)stencilFunc:(uint32_t)fn :(int32_t)ref :(uint32_t)mask;
- (void)stencilFuncSeparate:(uint32_t)face :(uint32_t)fn :(int32_t)ref :(uint32_t)mask;
- (void)stencilMask:(uint32_t)mask;
- (void)stencilMaskSeparate:(uint32_t)face :(uint32_t)mask;
- (void)stencilOp:(uint32_t)fail :(uint32_t)zfail :(uint32_t)zpass;
- (void)stencilOpSeparate:(uint32_t)face :(uint32_t)fail :(uint32_t)zfail :(uint32_t)zpass;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(uint32_t)format :(uint32_t)type data:(NSData * _Nonnull)data;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(uint32_t)format :(uint32_t)type u8:(NSArray<NSNumber *> * _Nonnull)pixels;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(uint32_t)format :(uint32_t)type pixels:(void const * _Nonnull)pixels size:(NSInteger)size;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(uint32_t)format :(uint32_t)type pixels:(void const * _Nonnull)pixels size:(NSInteger)size offset:(NSInteger)offset;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(uint32_t)format :(uint32_t)type u16:(NSArray<NSNumber *> * _Nonnull)pixels;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(uint32_t)format :(uint32_t)type u32:(NSArray<NSNumber *> * _Nonnull)pixels;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(uint32_t)format :(uint32_t)type f32:(NSArray<NSNumber *> * _Nonnull)pixels;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)border :(uint32_t)format :(uint32_t)type :(NSNull * _Nonnull)pixels;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(uint32_t)format :(uint32_t)type pixels:(UIImage * _Nonnull)pixels;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(uint32_t)format :(uint32_t)type asset:(TNSImageAsset * _Nonnull)asset;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(uint32_t)format :(uint32_t)type bitmap:(TNSImageBitmap * _Nonnull)bitmap;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(uint32_t)format :(uint32_t)type :(NSNull * _Nonnull)pixels;
- (void)texImage2D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(uint32_t)format :(uint32_t)type canvas:(TNSCanvas * _Nonnull)canvas;
- (void)texParameterf:(uint32_t)target :(uint32_t)pname :(float)param;
- (void)texParameteri:(uint32_t)target :(uint32_t)pname :(int32_t)param;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type data:(NSData * _Nonnull)data;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type u8:(NSArray<NSNumber *> * _Nonnull)pixels;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type pixels:(void * _Nonnull)pixels size:(NSInteger)size;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type pixels:(void * _Nonnull)pixels size:(NSInteger)size offset:(NSInteger)offset;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type u16:(NSArray<NSNumber *> * _Nonnull)pixels;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type f32:(NSArray<NSNumber *> * _Nonnull)pixels;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)width :(int32_t)height :(uint32_t)format :(uint32_t)type :(NSNull * _Nonnull)pixels;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(uint32_t)format :(uint32_t)type pixels:(UIImage * _Nonnull)pixels;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(uint32_t)format :(uint32_t)type asset:(TNSImageAsset * _Nonnull)asset;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(uint32_t)format :(uint32_t)type bitmap:(TNSImageBitmap * _Nonnull)bitmap;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(uint32_t)format :(uint32_t)type canvas:(TNSCanvas * _Nonnull)canvas;
- (void)texSubImage2D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(uint32_t)format :(uint32_t)type :(NSNull * _Nonnull)pixels;
- (void)uniform1f:(int32_t)location :(float)v0;
- (void)uniform1fv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size;
- (void)uniform1fv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform1i:(int32_t)location :(int32_t)v0;
- (void)uniform1iv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size;
- (void)uniform1iv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform2f:(int32_t)location :(float)v0 :(float)v1;
- (void)uniform2fv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size;
- (void)uniform2fv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform2i:(int32_t)location :(int32_t)v0 :(int32_t)v1;
- (void)uniform2iv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size;
- (void)uniform2iv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform3f:(int32_t)location :(float)v0 :(float)v1 :(float)v2;
- (void)uniform3fv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size;
- (void)uniform3fv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform3i:(int32_t)location :(int32_t)v0 :(int32_t)v1 :(int32_t)v2;
- (void)uniform3iv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size;
- (void)uniform3iv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform4f:(int32_t)location :(float)v0 :(float)v1 :(float)v2 :(float)v3;
- (void)uniform4fv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size;
- (void)uniform4fv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform4i:(int32_t)location :(int32_t)v0 :(int32_t)v1 :(int32_t)v2 :(int32_t)v3;
- (void)uniform4iv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size;
- (void)uniform4iv:(int32_t)location :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformMatrix2fv:(int32_t)location :(BOOL)transpose :(void * _Nonnull)value :(NSInteger)size;
- (void)uniformMatrix2fv:(int32_t)location :(BOOL)transpose :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformMatrix3fv:(int32_t)location :(BOOL)transpose :(void * _Nonnull)value :(NSInteger)size;
- (void)uniformMatrix3fv:(int32_t)location :(BOOL)transpose :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformMatrix4fv:(int32_t)location :(BOOL)transpose :(void * _Nonnull)value :(NSInteger)size;
- (void)uniformMatrix4fv:(int32_t)location :(BOOL)transpose :(void * _Nonnull)value :(NSInteger)size offset:(NSInteger)offset;
- (void)useProgram:(uint32_t)program;
- (void)validateProgram:(uint32_t)program;
- (void)vertexAttrib1f:(uint32_t)index :(float)v0;
- (void)vertexAttrib2f:(uint32_t)index :(float)v0 :(float)v1;
- (void)vertexAttrib3f:(uint32_t)index :(float)v0 :(float)v1 :(float)v2;
- (void)vertexAttrib4f:(uint32_t)index :(float)v0 :(float)v1 :(float)v2 :(float)v3;
- (void)vertexAttrib1fv:(uint32_t)index :(void * _Nonnull)value;
- (void)vertexAttrib1fv:(uint32_t)index :(void * _Nonnull)value offset:(NSInteger)offset;
- (void)vertexAttrib2fv:(uint32_t)index :(void * _Nonnull)value;
- (void)vertexAttrib2fv:(uint32_t)index :(void * _Nonnull)value offset:(NSInteger)offset;
- (void)vertexAttrib3fv:(uint32_t)index :(void * _Nonnull)value;
- (void)vertexAttrib3fv:(uint32_t)index :(void * _Nonnull)value offset:(NSInteger)offset;
- (void)vertexAttrib4fv:(uint32_t)index :(void * _Nonnull)value;
- (void)vertexAttrib4fv:(uint32_t)index :(void * _Nonnull)value offset:(NSInteger)offset;
- (void)vertexAttribPointer:(uint32_t)index :(int32_t)size :(uint32_t)type :(BOOL)normalized :(int32_t)stride :(NSInteger)offset;
- (void)viewport:(int32_t)x :(int32_t)y :(int32_t)width :(int32_t)height;
@property (nonatomic, readonly) uint32_t DEPTH_BUFFER_BIT;
@property (nonatomic, readonly) uint32_t COLOR_BUFFER_BIT;
@property (nonatomic, readonly) uint32_t STENCIL_BUFFER_BIT;
@property (nonatomic, readonly) uint32_t POINTS;
@property (nonatomic, readonly) uint32_t LINES;
@property (nonatomic, readonly) uint32_t LINE_LOOP;
@property (nonatomic, readonly) uint32_t LINE_STRIP;
@property (nonatomic, readonly) uint32_t TRIANGLES;
@property (nonatomic, readonly) uint32_t TRIANGLE_STRIP;
@property (nonatomic, readonly) uint32_t TRIANGLE_FAN;
@property (nonatomic, readonly) uint32_t ONE;
@property (nonatomic, readonly) uint32_t ZERO;
@property (nonatomic, readonly) uint32_t SRC_COLOR;
@property (nonatomic, readonly) uint32_t ONE_MINUS_SRC_COLOR;
@property (nonatomic, readonly) uint32_t SRC_ALPHA;
@property (nonatomic, readonly) uint32_t ONE_MINUS_SRC_ALPHA;
@property (nonatomic, readonly) uint32_t DST_ALPHA;
@property (nonatomic, readonly) uint32_t ONE_MINUS_DST_ALPHA;
@property (nonatomic, readonly) uint32_t DST_COLOR;
@property (nonatomic, readonly) uint32_t ONE_MINUS_DST_COLOR;
@property (nonatomic, readonly) uint32_t SRC_ALPHA_SATURATE;
@property (nonatomic, readonly) uint32_t CONSTANT_COLOR;
@property (nonatomic, readonly) uint32_t ONE_MINUS_CONSTANT_COLOR;
@property (nonatomic, readonly) uint32_t CONSTANT_ALPHA;
@property (nonatomic, readonly) uint32_t ONE_MINUS_CONSTANT_ALPHA;
@property (nonatomic, readonly) uint32_t FUNC_ADD;
@property (nonatomic, readonly) uint32_t FUNC_SUBTRACT;
@property (nonatomic, readonly) uint32_t FUNC_REVERSE_SUBTRACT;
@property (nonatomic, readonly) uint32_t BLEND_EQUATION;
@property (nonatomic, readonly) uint32_t BLEND_EQUATION_RGB;
@property (nonatomic, readonly) uint32_t BLEND_EQUATION_ALPHA;
@property (nonatomic, readonly) uint32_t BLEND_DST_RGB;
@property (nonatomic, readonly) uint32_t BLEND_SRC_RGB;
@property (nonatomic, readonly) uint32_t BLEND_DST_ALPHA;
@property (nonatomic, readonly) uint32_t BLEND_SRC_ALPHA;
@property (nonatomic, readonly) uint32_t BLEND_COLOR;
@property (nonatomic, readonly) uint32_t ARRAY_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t ELEMENT_ARRAY_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t LINE_WIDTH;
@property (nonatomic, readonly) uint32_t ALIASED_POINT_SIZE_RANGE;
@property (nonatomic, readonly) uint32_t ALIASED_LINE_WIDTH_RANGE;
@property (nonatomic, readonly) uint32_t CULL_FACE_MODE;
@property (nonatomic, readonly) uint32_t FRONT_FACE;
@property (nonatomic, readonly) uint32_t DEPTH_RANGE;
@property (nonatomic, readonly) uint32_t DEPTH_WRITEMASK;
@property (nonatomic, readonly) uint32_t DEPTH_CLEAR_VALUE;
@property (nonatomic, readonly) uint32_t DEPTH_FUNC;
@property (nonatomic, readonly) uint32_t STENCIL_CLEAR_VALUE;
@property (nonatomic, readonly) uint32_t STENCIL_FUNC;
@property (nonatomic, readonly) uint32_t STENCIL_FAIL;
@property (nonatomic, readonly) uint32_t STENCIL_PASS_DEPTH_FAIL;
@property (nonatomic, readonly) uint32_t STENCIL_PASS_DEPTH_PASS;
@property (nonatomic, readonly) uint32_t STENCIL_REF;
@property (nonatomic, readonly) uint32_t STENCIL_VALUE_MASK;
@property (nonatomic, readonly) uint32_t STENCIL_WRITEMASK;
@property (nonatomic, readonly) uint32_t STENCIL_BACK_FUNC;
@property (nonatomic, readonly) uint32_t STENCIL_BACK_FAIL;
@property (nonatomic, readonly) uint32_t STENCIL_BACK_PASS_DEPTH_FAIL;
@property (nonatomic, readonly) uint32_t STENCIL_BACK_PASS_DEPTH_PASS;
@property (nonatomic, readonly) uint32_t STENCIL_BACK_REF;
@property (nonatomic, readonly) uint32_t STENCIL_BACK_VALUE_MASK;
@property (nonatomic, readonly) uint32_t STENCIL_BACK_WRITEMASK;
@property (nonatomic, readonly) uint32_t VIEWPORT;
@property (nonatomic, readonly) uint32_t SCISSOR_BOX;
@property (nonatomic, readonly) uint32_t COLOR_CLEAR_VALUE;
@property (nonatomic, readonly) uint32_t COLOR_WRITEMASK;
@property (nonatomic, readonly) uint32_t UNPACK_ALIGNMENT;
@property (nonatomic, readonly) uint32_t PACK_ALIGNMENT;
@property (nonatomic, readonly) uint32_t MAX_TEXTURE_SIZE;
@property (nonatomic, readonly) uint32_t MAX_VIEWPORT_DIMS;
@property (nonatomic, readonly) uint32_t SUBPIXEL_BITS;
@property (nonatomic, readonly) uint32_t RED_BITS;
@property (nonatomic, readonly) uint32_t GREEN_BITS;
@property (nonatomic, readonly) uint32_t BLUE_BITS;
@property (nonatomic, readonly) uint32_t ALPHA_BITS;
@property (nonatomic, readonly) uint32_t DEPTH_BITS;
@property (nonatomic, readonly) uint32_t STENCIL_BITS;
@property (nonatomic, readonly) uint32_t POLYGON_OFFSET_UNITS;
@property (nonatomic, readonly) uint32_t POLYGON_OFFSET_FACTOR;
@property (nonatomic, readonly) uint32_t TEXTURE_BINDING_2D;
@property (nonatomic, readonly) uint32_t SAMPLE_BUFFERS;
@property (nonatomic, readonly) uint32_t SAMPLES;
@property (nonatomic, readonly) uint32_t SAMPLE_COVERAGE_VALUE;
@property (nonatomic, readonly) uint32_t SAMPLE_COVERAGE_INVERT;
@property (nonatomic, readonly) uint32_t COMPRESSED_TEXTURE_FORMATS;
@property (nonatomic, readonly) uint32_t VENDOR;
@property (nonatomic, readonly) uint32_t RENDERER;
@property (nonatomic, readonly) uint32_t VERSION;
@property (nonatomic, readonly) uint32_t IMPLEMENTATION_COLOR_READ_TYPE;
@property (nonatomic, readonly) uint32_t IMPLEMENTATION_COLOR_READ_FORMAT;
@property (nonatomic, readonly) uint32_t BROWSER_DEFAULT_WEBGL;
@property (nonatomic, readonly) uint32_t STATIC_DRAW;
@property (nonatomic, readonly) uint32_t STREAM_DRAW;
@property (nonatomic, readonly) uint32_t DYNAMIC_DRAW;
@property (nonatomic, readonly) uint32_t ARRAY_BUFFER;
@property (nonatomic, readonly) uint32_t ELEMENT_ARRAY_BUFFER;
@property (nonatomic, readonly) uint32_t BUFFER_SIZE;
@property (nonatomic, readonly) uint32_t BUFFER_USAGE;
@property (nonatomic, readonly) uint32_t CURRENT_VERTEX_ATTRIB;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_ENABLED;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_SIZE;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_STRIDE;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_TYPE;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_NORMALIZED;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_POINTER;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t CULL_FACE;
@property (nonatomic, readonly) uint32_t FRONT;
@property (nonatomic, readonly) uint32_t BACK;
@property (nonatomic, readonly) uint32_t FRONT_AND_BACK;
@property (nonatomic, readonly) uint32_t BLEND;
@property (nonatomic, readonly) uint32_t DEPTH_TEST;
@property (nonatomic, readonly) uint32_t DITHER;
@property (nonatomic, readonly) uint32_t POLYGON_OFFSET_FILL;
@property (nonatomic, readonly) uint32_t SAMPLE_ALPHA_TO_COVERAGE;
@property (nonatomic, readonly) uint32_t SAMPLE_COVERAGE;
@property (nonatomic, readonly) uint32_t SCISSOR_TEST;
@property (nonatomic, readonly) uint32_t STENCIL_TEST;
@property (nonatomic, readonly) uint32_t NO_ERROR;
@property (nonatomic, readonly) uint32_t INVALID_ENUM;
@property (nonatomic, readonly) uint32_t INVALID_VALUE;
@property (nonatomic, readonly) uint32_t INVALID_OPERATION;
@property (nonatomic, readonly) uint32_t INVALID_FRAMEBUFFER_OPERATION;
@property (nonatomic, readonly) uint32_t OUT_OF_MEMORY;
@property (nonatomic, readonly) uint32_t CONTEXT_LOST_WEBGL;
@property (nonatomic, readonly) uint32_t CW;
@property (nonatomic, readonly) uint32_t CCW;
@property (nonatomic, readonly) uint32_t DONT_CARE;
@property (nonatomic, readonly) uint32_t FASTEST;
@property (nonatomic, readonly) uint32_t NICEST;
@property (nonatomic, readonly) uint32_t GENERATE_MIPMAP_HINT;
@property (nonatomic, readonly) uint32_t BYTE;
@property (nonatomic, readonly) uint32_t UNSIGNED_BYTE;
@property (nonatomic, readonly) uint32_t UNSIGNED_SHORT;
@property (nonatomic, readonly) uint32_t SHORT;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT;
@property (nonatomic, readonly) uint32_t INT;
@property (nonatomic, readonly) uint32_t FLOAT;
@property (nonatomic, readonly) uint32_t DEPTH_COMPONENT;
@property (nonatomic, readonly) uint32_t ALPHA;
@property (nonatomic, readonly) uint32_t RGB;
@property (nonatomic, readonly) uint32_t RGBA;
@property (nonatomic, readonly) uint32_t LUMINANCE;
@property (nonatomic, readonly) uint32_t LUMINANCE_ALPHA;
@property (nonatomic, readonly) uint32_t UNSIGNED_SHORT_4_4_4_4;
@property (nonatomic, readonly) uint32_t UNSIGNED_SHORT_5_5_5_1;
@property (nonatomic, readonly) uint32_t UNSIGNED_SHORT_5_6_5;
@property (nonatomic, readonly) uint32_t FRAGMENT_SHADER;
@property (nonatomic, readonly) uint32_t VERTEX_SHADER;
@property (nonatomic, readonly) uint32_t COMPILE_STATUS;
@property (nonatomic, readonly) uint32_t DELETE_STATUS;
@property (nonatomic, readonly) uint32_t LINK_STATUS;
@property (nonatomic, readonly) uint32_t VALIDATE_STATUS;
@property (nonatomic, readonly) uint32_t ATTACHED_SHADERS;
@property (nonatomic, readonly) uint32_t ACTIVE_ATTRIBUTES;
@property (nonatomic, readonly) uint32_t ACTIVE_UNIFORMS;
@property (nonatomic, readonly) uint32_t MAX_VERTEX_UNIFORM_VECTORS;
@property (nonatomic, readonly) uint32_t MAX_VARYING_VECTORS;
@property (nonatomic, readonly) uint32_t MAX_COMBINED_TEXTURE_IMAGE_UNITS;
@property (nonatomic, readonly) uint32_t MAX_VERTEX_TEXTURE_IMAGE_UNITS;
@property (nonatomic, readonly) uint32_t MAX_TEXTURE_IMAGE_UNITS;
@property (nonatomic, readonly) uint32_t MAX_VERTEX_ATTRIBS;
@property (nonatomic, readonly) uint32_t MAX_FRAGMENT_UNIFORM_VECTORS;
@property (nonatomic, readonly) uint32_t SHADER_TYPE;
@property (nonatomic, readonly) uint32_t SHADING_LANGUAGE_VERSION;
@property (nonatomic, readonly) uint32_t CURRENT_PROGRAM;
@property (nonatomic, readonly) uint32_t NEVER;
@property (nonatomic, readonly) uint32_t LESS;
@property (nonatomic, readonly) uint32_t EQUAL;
@property (nonatomic, readonly) uint32_t LEQUAL;
@property (nonatomic, readonly) uint32_t GREATER;
@property (nonatomic, readonly) uint32_t NOTEQUAL;
@property (nonatomic, readonly) uint32_t GEQUAL;
@property (nonatomic, readonly) uint32_t ALWAYS;
@property (nonatomic, readonly) uint32_t KEEP;
@property (nonatomic, readonly) uint32_t REPLACE;
@property (nonatomic, readonly) uint32_t INCR;
@property (nonatomic, readonly) uint32_t DECR;
@property (nonatomic, readonly) uint32_t INVERT;
@property (nonatomic, readonly) uint32_t INCR_WRAP;
@property (nonatomic, readonly) uint32_t DECR_WRAP;
@property (nonatomic, readonly) uint32_t NEAREST;
@property (nonatomic, readonly) uint32_t LINEAR;
@property (nonatomic, readonly) uint32_t NEAREST_MIPMAP_NEAREST;
@property (nonatomic, readonly) uint32_t LINEAR_MIPMAP_NEAREST;
@property (nonatomic, readonly) uint32_t NEAREST_MIPMAP_LINEAR;
@property (nonatomic, readonly) uint32_t LINEAR_MIPMAP_LINEAR;
@property (nonatomic, readonly) uint32_t TEXTURE_MAG_FILTER;
@property (nonatomic, readonly) uint32_t TEXTURE_MIN_FILTER;
@property (nonatomic, readonly) uint32_t TEXTURE_WRAP_S;
@property (nonatomic, readonly) uint32_t TEXTURE_WRAP_T;
@property (nonatomic, readonly) uint32_t TEXTURE_2D;
@property (nonatomic, readonly) uint32_t TEXTURE;
@property (nonatomic, readonly) uint32_t TEXTURE_CUBE_MAP;
@property (nonatomic, readonly) uint32_t TEXTURE_BINDING_CUBE_MAP;
@property (nonatomic, readonly) uint32_t TEXTURE_CUBE_MAP_POSITIVE_X;
@property (nonatomic, readonly) uint32_t TEXTURE_CUBE_MAP_NEGATIVE_X;
@property (nonatomic, readonly) uint32_t TEXTURE_CUBE_MAP_POSITIVE_Y;
@property (nonatomic, readonly) uint32_t TEXTURE_CUBE_MAP_NEGATIVE_Y;
@property (nonatomic, readonly) uint32_t TEXTURE_CUBE_MAP_POSITIVE_Z;
@property (nonatomic, readonly) uint32_t TEXTURE_CUBE_MAP_NEGATIVE_Z;
@property (nonatomic, readonly) uint32_t MAX_CUBE_MAP_TEXTURE_SIZE;
@property (nonatomic, readonly) uint32_t TEXTURE0;
@property (nonatomic, readonly) uint32_t TEXTURE1;
@property (nonatomic, readonly) uint32_t TEXTURE2;
@property (nonatomic, readonly) uint32_t TEXTURE3;
@property (nonatomic, readonly) uint32_t TEXTURE4;
@property (nonatomic, readonly) uint32_t TEXTURE5;
@property (nonatomic, readonly) uint32_t TEXTURE6;
@property (nonatomic, readonly) uint32_t TEXTURE7;
@property (nonatomic, readonly) uint32_t TEXTURE8;
@property (nonatomic, readonly) uint32_t TEXTURE9;
@property (nonatomic, readonly) uint32_t TEXTURE10;
@property (nonatomic, readonly) uint32_t TEXTURE11;
@property (nonatomic, readonly) uint32_t TEXTURE12;
@property (nonatomic, readonly) uint32_t TEXTURE13;
@property (nonatomic, readonly) uint32_t TEXTURE14;
@property (nonatomic, readonly) uint32_t TEXTURE15;
@property (nonatomic, readonly) uint32_t TEXTURE16;
@property (nonatomic, readonly) uint32_t TEXTURE17;
@property (nonatomic, readonly) uint32_t TEXTURE18;
@property (nonatomic, readonly) uint32_t TEXTURE19;
@property (nonatomic, readonly) uint32_t TEXTURE20;
@property (nonatomic, readonly) uint32_t TEXTURE21;
@property (nonatomic, readonly) uint32_t TEXTURE22;
@property (nonatomic, readonly) uint32_t TEXTURE23;
@property (nonatomic, readonly) uint32_t TEXTURE24;
@property (nonatomic, readonly) uint32_t TEXTURE25;
@property (nonatomic, readonly) uint32_t TEXTURE26;
@property (nonatomic, readonly) uint32_t TEXTURE27;
@property (nonatomic, readonly) uint32_t TEXTURE28;
@property (nonatomic, readonly) uint32_t TEXTURE29;
@property (nonatomic, readonly) uint32_t TEXTURE30;
@property (nonatomic, readonly) uint32_t TEXTURE31;
@property (nonatomic, readonly) uint32_t ACTIVE_TEXTURE;
@property (nonatomic, readonly) uint32_t REPEAT;
@property (nonatomic, readonly) uint32_t CLAMP_TO_EDGE;
@property (nonatomic, readonly) uint32_t MIRRORED_REPEAT;
@property (nonatomic, readonly) uint32_t FLOAT_VEC2;
@property (nonatomic, readonly) uint32_t FLOAT_VEC3;
@property (nonatomic, readonly) uint32_t FLOAT_VEC4;
@property (nonatomic, readonly) uint32_t INT_VEC2;
@property (nonatomic, readonly) uint32_t INT_VEC3;
@property (nonatomic, readonly) uint32_t INT_VEC4;
@property (nonatomic, readonly) uint32_t BOOL;
@property (nonatomic, readonly) uint32_t BOOL_VEC2;
@property (nonatomic, readonly) uint32_t BOOL_VEC3;
@property (nonatomic, readonly) uint32_t BOOL_VEC4;
@property (nonatomic, readonly) uint32_t FLOAT_MAT2;
@property (nonatomic, readonly) uint32_t FLOAT_MAT3;
@property (nonatomic, readonly) uint32_t FLOAT_MAT4;
@property (nonatomic, readonly) uint32_t SAMPLER_2D;
@property (nonatomic, readonly) uint32_t SAMPLER_CUBE;
@property (nonatomic, readonly) uint32_t LOW_FLOAT;
@property (nonatomic, readonly) uint32_t MEDIUM_FLOAT;
@property (nonatomic, readonly) uint32_t HIGH_FLOAT;
@property (nonatomic, readonly) uint32_t LOW_INT;
@property (nonatomic, readonly) uint32_t MEDIUM_INT;
@property (nonatomic, readonly) uint32_t HIGH_INT;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER;
@property (nonatomic, readonly) uint32_t RENDERBUFFER;
@property (nonatomic, readonly) uint32_t RGBA4;
@property (nonatomic, readonly) uint32_t RGB565;
@property (nonatomic, readonly) uint32_t RGB5_A1;
@property (nonatomic, readonly) uint32_t DEPTH_COMPONENT16;
@property (nonatomic, readonly) uint32_t STENCIL_INDEX8;
@property (nonatomic, readonly) uint32_t DEPTH_STENCIL;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_WIDTH;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_HEIGHT;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_INTERNAL_FORMAT;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_RED_SIZE;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_GREEN_SIZE;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_BLUE_SIZE;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_ALPHA_SIZE;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_DEPTH_SIZE;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_STENCIL_SIZE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT0;
@property (nonatomic, readonly) uint32_t DEPTH_ATTACHMENT;
@property (nonatomic, readonly) uint32_t STENCIL_ATTACHMENT;
@property (nonatomic, readonly) uint32_t DEPTH_STENCIL_ATTACHMENT;
@property (nonatomic, readonly) uint32_t NONE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_COMPLETE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_UNSUPPORTED;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_BINDING;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_BINDING;
@property (nonatomic, readonly) uint32_t MAX_RENDERBUFFER_SIZE;
@property (nonatomic, readonly) uint32_t UNPACK_COLORSPACE_CONVERSION_WEBGL;
@property (nonatomic, readonly) uint32_t UNPACK_FLIP_Y_WEBGL;
@property (nonatomic, readonly) uint32_t UNPACK_PREMULTIPLY_ALPHA_WEBGL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("TNSWebGL2RenderingContext")
@interface TNSWebGL2RenderingContext : TNSWebGLRenderingContext
- (nonnull instancetype)init:(TNSCanvas * _Nonnull)canvas OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(TNSCanvas * _Nonnull)canvas :(NSDictionary<NSString *, id> * _Nonnull)attrs OBJC_DESIGNATED_INITIALIZER;
- (void)beginQuery:(uint32_t)target :(uint32_t)query;
- (void)beginTransformFeedback:(uint32_t)primitiveMode;
- (void)bindBufferBase:(uint32_t)target :(uint32_t)index :(uint32_t)buffer;
- (void)bindBufferRange:(uint32_t)target :(uint32_t)index :(uint32_t)buffer :(NSInteger)offset :(NSInteger)size;
- (void)bindSampler:(uint32_t)unit :(uint32_t)sampler;
- (void)bindTransformFeedback:(uint32_t)target :(uint32_t)transformFeedback;
- (void)bindVertexArray:(uint32_t)vertexArray;
- (void)blitFramebuffer:(int32_t)srcX0 :(int32_t)srcY0 :(int32_t)srcX1 :(int32_t)srcY1 :(int32_t)dstX0 :(int32_t)dstY0 :(int32_t)dstX1 :(int32_t)dstY1 :(uint32_t)mask :(uint32_t)filter;
- (void)clearBufferfv:(uint32_t)buffer :(int32_t)drawbuffer :(void const * _Nonnull)values;
- (void)clearBufferfv:(uint32_t)buffer :(int32_t)drawbuffer :(void const * _Nonnull)values offset:(NSInteger)offset;
- (void)clearBufferiv:(uint32_t)buffer :(int32_t)drawbuffer :(void const * _Nonnull)values;
- (void)clearBufferiv:(uint32_t)buffer :(int32_t)drawbuffer :(void const * _Nonnull)values offset:(NSInteger)offset;
- (void)clearBufferuiv:(uint32_t)buffer :(int32_t)drawbuffer :(void const * _Nonnull)values;
- (void)clearBufferuiv:(uint32_t)buffer :(int32_t)drawbuffer :(void const * _Nonnull)values offset:(NSInteger)offset;
- (void)clearBufferfi:(uint32_t)buffer :(int32_t)drawbuffer :(float)depth :(int32_t)stencil;
- (int32_t)clientWaitSync:(GLsync _Nonnull)sync :(uint32_t)flags :(uint64_t)timeout SWIFT_WARN_UNUSED_RESULT;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(int32_t)imageSize :(int32_t)offset;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format i8:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset :(int32_t)srcLengthOverride;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format u8:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset :(int32_t)srcLengthOverride;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format i16:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset :(int32_t)srcLengthOverride;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format u16:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset :(int32_t)srcLengthOverride;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format i32:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset :(int32_t)srcLengthOverride;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format u32:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset :(int32_t)srcLengthOverride;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format f32:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset :(int32_t)srcLengthOverride;
- (void)compressedTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format f64:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset :(int32_t)srcLengthOverride;
- (void)copyBufferSubData:(uint32_t)readTarget :(uint32_t)writeTarget :(NSInteger)readOffset :(NSInteger)writeOffset :(NSInteger)size;
- (void)copyTexSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)x :(int32_t)y :(int32_t)width :(int32_t)height;
- (uint32_t)createQuery SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)createSampler SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)createVertexArray SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)createTransformFeedback SWIFT_WARN_UNUSED_RESULT;
- (void)deleteQuery:(uint32_t)query;
- (void)deleteSampler:(uint32_t)sampler;
- (void)deleteSync:(GLsync _Nonnull)sync;
- (void)deleteTransformFeedback:(uint32_t)transformFeedback;
- (void)deleteVertexArray:(uint32_t)vertexArray;
- (void)drawArraysInstanced:(uint32_t)mode :(int32_t)first :(int32_t)count :(int32_t)instanceCount;
- (void)drawElementsInstanced:(uint32_t)mode :(int32_t)count :(uint32_t)type :(NSInteger)offset :(int32_t)instanceCount;
- (void)drawRangeElements:(uint32_t)mode :(uint32_t)start :(uint32_t)end :(int32_t)count :(uint32_t)type :(NSInteger)offset;
- (void)drawBuffers:(NSArray<NSNumber *> * _Nonnull)buffers;
- (void)endQuery:(uint32_t)target;
- (void)endTransformFeedback;
- (void)fenceSync:(uint32_t)condition :(uint32_t)flags;
- (void)framebufferTextureLayer:(uint32_t)target :(uint32_t)attachment :(uint32_t)texture :(int32_t)level :(int32_t)layer;
- (NSString * _Nonnull)getActiveUniformBlockName:(uint32_t)program :(uint32_t)uniformBlockIndex SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getActiveUniformBlockParameter:(uint32_t)program :(uint32_t)uniformBlockIndex :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getActiveUniforms:(uint32_t)program :(NSArray<NSNumber *> * _Nonnull)uniformIndices :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (void)getBufferSubData:(uint32_t)target :(NSInteger)srcByteOffset :(void * _Nonnull)dstData size:(NSInteger)size :(int32_t)dstOffset :(int32_t)length;
- (void)getBufferSubData:(uint32_t)target :(NSInteger)srcByteOffset :(void * _Nonnull)dstData size:(NSInteger)size :(int32_t)dstOffset :(int32_t)length offset:(NSInteger)offset;
- (int32_t)getFragDataLocation:(uint32_t)program :(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getIndexedParameter:(uint32_t)target :(uint32_t)index SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getInternalformatParameter:(uint32_t)target :(uint32_t)internalformat :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getParameter:(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getQuery:(uint32_t)target :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getQueryParameter:(uint32_t)query :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getSamplerParameter:(uint32_t)sampler :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getSyncParameter:(GLsync _Nonnull)sync :(uint32_t)pname SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)getTransformFeedbackVarying:(uint32_t)program :(uint32_t)index SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getUniformBlockIndex:(uint32_t)program :(NSString * _Nonnull)uniformBlockName SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Nonnull)getUniformIndices:(uint32_t)program :(NSArray<NSString *> * _Nonnull)uniformNames SWIFT_WARN_UNUSED_RESULT;
- (void)invalidateFramebuffer:(uint32_t)target :(NSArray<NSNumber *> * _Nonnull)attachments;
- (void)invalidateSubFramebuffer:(uint32_t)target :(NSArray<NSNumber *> * _Nonnull)attachments :(int32_t)x :(int32_t)y :(int32_t)width :(int32_t)height;
- (BOOL)isQuery:(uint32_t)query SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSampler:(uint32_t)sampler SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSync:(GLsync _Nonnull)sync SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isTransformFeedback:(uint32_t)transformFeedback SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isVertexArray:(uint32_t)vertexArray SWIFT_WARN_UNUSED_RESULT;
- (void)pauseTransformFeedback;
- (void)readBuffer:(uint32_t)src;
- (void)renderbufferStorageMultisample:(uint32_t)target :(int32_t)samples :(uint32_t)internalFormat :(int32_t)width :(int32_t)height;
- (void)resumeTransformFeedback;
- (void)samplerParameteri:(uint32_t)sampler :(uint32_t)pname :(int32_t)param;
- (void)samplerParameterf:(uint32_t)sampler :(uint32_t)pname :(float)param;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type data:(NSData * _Nonnull)data;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type offset:(NSInteger)offset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type pixels:(void const * _Nonnull)pixels size:(NSInteger)size;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type pixels:(void const * _Nonnull)pixels size:(NSInteger)size pixelOffset:(NSInteger)pixelOffset srcOffset:(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type i8:(NSArray<NSNumber *> * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type u8:(NSArray<NSNumber *> * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type i16:(NSArray<NSNumber *> * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type u16:(NSArray<NSNumber *> * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type i32:(NSArray<NSNumber *> * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type u32:(NSArray<NSNumber *> * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type f32:(NSArray<NSNumber *> * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type f64:(NSArray<NSNumber *> * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type i8:(NSArray<NSNumber *> * _Nonnull)source :(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type u8:(NSArray<NSNumber *> * _Nonnull)source :(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type i16:(NSArray<NSNumber *> * _Nonnull)source :(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type u16:(NSArray<NSNumber *> * _Nonnull)source :(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type i32:(NSArray<NSNumber *> * _Nonnull)source :(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type u32:(NSArray<NSNumber *> * _Nonnull)source :(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type f32:(NSArray<NSNumber *> * _Nonnull)source :(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type f64:(NSArray<NSNumber *> * _Nonnull)source :(int32_t)srcOffset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type source:(UIImage * _Nonnull)source;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type asset:(TNSImageAsset * _Nonnull)asset;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type bitmap:(TNSImageBitmap * _Nonnull)bitmap;
- (void)texImage3D:(uint32_t)target :(int32_t)level :(int32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth :(int32_t)border :(uint32_t)format :(uint32_t)type canvas:(TNSCanvas * _Nonnull)canvas;
- (void)texStorage2D:(uint32_t)target :(int32_t)levels :(uint32_t)internalformat :(int32_t)width :(int32_t)height;
- (void)texStorage3D:(uint32_t)target :(int32_t)levels :(uint32_t)internalformat :(int32_t)width :(int32_t)height :(int32_t)depth;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type data:(NSData * _Nonnull)data;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type offset:(int32_t)offset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type i8:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type u8:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type i16:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type u16:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type i32:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type u32:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type f32:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type f64:(NSArray<NSNumber *> * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type i8:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type u8:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type i16:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type u16:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type i32:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type u32:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type f32:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type f64:(NSArray<NSNumber *> * _Nonnull)srcData :(int32_t)srcOffset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type srcData:(UIImage * _Nonnull)srcData;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type canvas:(TNSCanvas * _Nonnull)canvas;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type asset:(TNSImageAsset * _Nonnull)asset;
- (void)texSubImage3D:(uint32_t)target :(int32_t)level :(int32_t)xoffset :(int32_t)yoffset :(int32_t)zoffset :(int32_t)width :(int32_t)height :(int32_t)depth :(uint32_t)format :(uint32_t)type bitmap:(TNSImageBitmap * _Nonnull)bitmap;
- (void)transformFeedbackVaryings:(uint32_t)program :(NSArray<NSString *> * _Nonnull)varyings :(uint32_t)bufferMode;
- (void)uniform1ui:(int32_t)location :(uint32_t)v0;
- (void)uniform2ui:(int32_t)location :(uint32_t)v0 :(uint32_t)v1;
- (void)uniform3ui:(int32_t)location :(uint32_t)v0 :(uint32_t)v1 :(uint32_t)v2;
- (void)uniform4ui:(int32_t)location :(uint32_t)v0 :(uint32_t)v1 :(uint32_t)v2 :(uint32_t)v3;
- (void)uniform1uiv:(int32_t)location :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniform1uiv:(int32_t)location :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform2uiv:(int32_t)location :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniform2uiv:(int32_t)location :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform3uiv:(int32_t)location :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniform3uiv:(int32_t)location :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniform4uiv:(int32_t)location :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniform4uiv:(int32_t)location :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformBlockBinding:(uint32_t)program :(uint32_t)uniformBlockIndex :(uint32_t)uniformBlockBinding;
- (void)uniformMatrix3x2fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniformMatrix3x2fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformMatrix4x2fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniformMatrix4x2fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformMatrix2x3fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniformMatrix2x3fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformMatrix4x3fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniformMatrix4x3fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformMatrix2x4fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniformMatrix2x4fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)uniformMatrix3x4fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size;
- (void)uniformMatrix3x4fv:(uint32_t)location :(BOOL)transpose :(void const * _Nonnull)data :(NSInteger)size offset:(NSInteger)offset;
- (void)vertexAttribDivisor:(uint32_t)index :(uint32_t)divisor;
- (void)vertexAttribI4i:(uint32_t)index :(int32_t)v0 :(int32_t)v1 :(int32_t)v2 :(int32_t)v3;
- (void)vertexAttribI4ui:(uint32_t)index :(uint32_t)v0 :(uint32_t)v1 :(uint32_t)v2 :(uint32_t)v3;
- (void)vertexAttribI4iv:(uint32_t)index :(void const * _Nonnull)value;
- (void)vertexAttribI4iv:(uint32_t)index :(void const * _Nonnull)value offset:(NSInteger)offset;
- (void)vertexAttribI4uiv:(uint32_t)index :(void const * _Nonnull)value;
- (void)vertexAttribI4uiv:(uint32_t)index :(void const * _Nonnull)value offset:(NSInteger)offset;
@property (nonatomic, readonly) uint32_t READ_BUFFER;
@property (nonatomic, readonly) uint32_t UNPACK_ROW_LENGTH;
@property (nonatomic, readonly) uint32_t UNPACK_SKIP_ROWS;
@property (nonatomic, readonly) uint32_t UNPACK_SKIP_PIXELS;
@property (nonatomic, readonly) uint32_t PACK_ROW_LENGTH;
@property (nonatomic, readonly) uint32_t PACK_SKIP_ROWS;
@property (nonatomic, readonly) uint32_t PACK_SKIP_PIXELS;
@property (nonatomic, readonly) uint32_t TEXTURE_BINDING_3D;
@property (nonatomic, readonly) uint32_t UNPACK_SKIP_IMAGES;
@property (nonatomic, readonly) uint32_t UNPACK_IMAGE_HEIGHT;
@property (nonatomic, readonly) uint32_t MAX_3D_TEXTURE_SIZE;
@property (nonatomic, readonly) uint32_t MAX_ELEMENTS_VERTICES;
@property (nonatomic, readonly) uint32_t MAX_ELEMENTS_INDICES;
@property (nonatomic, readonly) uint32_t MAX_TEXTURE_LOD_BIAS;
@property (nonatomic, readonly) uint32_t MAX_FRAGMENT_UNIFORM_COMPONENTS;
@property (nonatomic, readonly) uint32_t MAX_VERTEX_UNIFORM_COMPONENTS;
@property (nonatomic, readonly) uint32_t MAX_ARRAY_TEXTURE_LAYERS;
@property (nonatomic, readonly) uint32_t MIN_PROGRAM_TEXEL_OFFSET;
@property (nonatomic, readonly) uint32_t MAX_PROGRAM_TEXEL_OFFSET;
@property (nonatomic, readonly) uint32_t MAX_VARYING_COMPONENTS;
@property (nonatomic, readonly) uint32_t FRAGMENT_SHADER_DERIVATIVE_HINT;
@property (nonatomic, readonly) uint32_t RASTERIZER_DISCARD;
@property (nonatomic, readonly) uint32_t VERTEX_ARRAY_BINDING;
@property (nonatomic, readonly) uint32_t MAX_VERTEX_OUTPUT_COMPONENTS;
@property (nonatomic, readonly) uint32_t MAX_FRAGMENT_INPUT_COMPONENTS;
@property (nonatomic, readonly) uint32_t MAX_SERVER_WAIT_TIMEOUT;
@property (nonatomic, readonly) uint32_t MAX_ELEMENT_INDEX;
@property (nonatomic, readonly) uint32_t RED;
@property (nonatomic, readonly) uint32_t RGB8;
@property (nonatomic, readonly) uint32_t RGBA8;
@property (nonatomic, readonly) uint32_t RGB10_A2;
@property (nonatomic, readonly) uint32_t TEXTURE_3D;
@property (nonatomic, readonly) uint32_t TEXTURE_WRAP_R;
@property (nonatomic, readonly) uint32_t TEXTURE_MIN_LOD;
@property (nonatomic, readonly) uint32_t TEXTURE_MAX_LOD;
@property (nonatomic, readonly) uint32_t TEXTURE_BASE_LEVEL;
@property (nonatomic, readonly) uint32_t TEXTURE_MAX_LEVEL;
@property (nonatomic, readonly) uint32_t TEXTURE_COMPARE_MODE;
@property (nonatomic, readonly) uint32_t TEXTURE_COMPARE_FUNC;
@property (nonatomic, readonly) uint32_t SRGB;
@property (nonatomic, readonly) uint32_t SRGB8;
@property (nonatomic, readonly) uint32_t SRGB8_ALPHA8;
@property (nonatomic, readonly) uint32_t COMPARE_REF_TO_TEXTURE;
@property (nonatomic, readonly) uint32_t RGBA32F;
@property (nonatomic, readonly) uint32_t RGB32F;
@property (nonatomic, readonly) uint32_t RGBA16F;
@property (nonatomic, readonly) uint32_t RGB16F;
@property (nonatomic, readonly) uint32_t TEXTURE_2D_ARRAY;
@property (nonatomic, readonly) uint32_t TEXTURE_BINDING_2D_ARRAY;
@property (nonatomic, readonly) uint32_t R11F_G11F_B10F;
@property (nonatomic, readonly) uint32_t RGB9_E5;
@property (nonatomic, readonly) uint32_t RGBA32UI;
@property (nonatomic, readonly) uint32_t RGB32UI;
@property (nonatomic, readonly) uint32_t RGBA16UI;
@property (nonatomic, readonly) uint32_t RGB16UI;
@property (nonatomic, readonly) uint32_t RGBA8UI;
@property (nonatomic, readonly) uint32_t RGB8UI;
@property (nonatomic, readonly) uint32_t RGBA32I;
@property (nonatomic, readonly) uint32_t RGB32I;
@property (nonatomic, readonly) uint32_t RGBA16I;
@property (nonatomic, readonly) uint32_t RGB16I;
@property (nonatomic, readonly) uint32_t RGBA8I;
@property (nonatomic, readonly) uint32_t RGB8I;
@property (nonatomic, readonly) uint32_t RED_INTEGER;
@property (nonatomic, readonly) uint32_t RGB_INTEGER;
@property (nonatomic, readonly) uint32_t RGBA_INTEGER;
@property (nonatomic, readonly) uint32_t R8;
@property (nonatomic, readonly) uint32_t RG8;
@property (nonatomic, readonly) uint32_t R16F;
@property (nonatomic, readonly) uint32_t R32F;
@property (nonatomic, readonly) uint32_t RG16F;
@property (nonatomic, readonly) uint32_t RG32F;
@property (nonatomic, readonly) uint32_t R8I;
@property (nonatomic, readonly) uint32_t R8UI;
@property (nonatomic, readonly) uint32_t R16I;
@property (nonatomic, readonly) uint32_t R16UI;
@property (nonatomic, readonly) uint32_t R32I;
@property (nonatomic, readonly) uint32_t R32UI;
@property (nonatomic, readonly) uint32_t RG8I;
@property (nonatomic, readonly) uint32_t RG8UI;
@property (nonatomic, readonly) uint32_t RG16I;
@property (nonatomic, readonly) uint32_t RG16UI;
@property (nonatomic, readonly) uint32_t RG32I;
@property (nonatomic, readonly) uint32_t RG32UI;
@property (nonatomic, readonly) uint32_t R8_SNORM;
@property (nonatomic, readonly) uint32_t RG8_SNORM;
@property (nonatomic, readonly) uint32_t RGB8_SNORM;
@property (nonatomic, readonly) uint32_t RGBA8_SNORM;
@property (nonatomic, readonly) uint32_t RGB10_A2UI;
@property (nonatomic, readonly) uint32_t TEXTURE_IMMUTABLE_FORMAT;
@property (nonatomic, readonly) uint32_t TEXTURE_IMMUTABLE_LEVELS;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_2_10_10_10_REV;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_10F_11F_11F_REV;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_5_9_9_9_REV;
@property (nonatomic, readonly) uint32_t FLOAT_32_UNSIGNED_INT_24_8_REV;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_24_8;
@property (nonatomic, readonly) uint32_t HALF_FLOAT;
@property (nonatomic, readonly) uint32_t RG;
@property (nonatomic, readonly) uint32_t RG_INTEGER;
@property (nonatomic, readonly) uint32_t INT_2_10_10_10_REV;
@property (nonatomic, readonly) uint32_t QUERY_RESULT_AVAILABLE;
@property (nonatomic, readonly) uint32_t QUERY_RESULT;
@property (nonatomic, readonly) uint32_t CURRENT_QUERY;
@property (nonatomic, readonly) uint32_t ANY_SAMPLES_PASSED;
@property (nonatomic, readonly) uint32_t ANY_SAMPLES_PASSED_CONSERVATIVE;
@property (nonatomic, readonly) uint32_t MAX_DRAW_BUFFERS;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER0;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER1;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER2;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER3;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER4;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER5;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER6;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER7;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER8;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER9;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER10;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER11;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER12;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER13;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER14;
@property (nonatomic, readonly) uint32_t DRAW_BUFFER15;
@property (nonatomic, readonly) uint32_t MAX_COLOR_ATTACHMENTS;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT1;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT2;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT3;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT4;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT5;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT6;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT7;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT8;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT9;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT10;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT11;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT12;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT13;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT14;
@property (nonatomic, readonly) uint32_t COLOR_ATTACHMENT15;
@property (nonatomic, readonly) uint32_t SAMPLER_3D;
@property (nonatomic, readonly) uint32_t SAMPLER_2D_SHADOW;
@property (nonatomic, readonly) uint32_t SAMPLER_2D_ARRAY;
@property (nonatomic, readonly) uint32_t SAMPLER_2D_ARRAY_SHADOW;
@property (nonatomic, readonly) uint32_t SAMPLER_CUBE_SHADOW;
@property (nonatomic, readonly) uint32_t INT_SAMPLER_2D;
@property (nonatomic, readonly) uint32_t INT_SAMPLER_3D;
@property (nonatomic, readonly) uint32_t INT_SAMPLER_CUBE;
@property (nonatomic, readonly) uint32_t INT_SAMPLER_2D_ARRAY;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_SAMPLER_2D;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_SAMPLER_3D;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_SAMPLER_CUBE;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_SAMPLER_2D_ARRAY;
@property (nonatomic, readonly) uint32_t MAX_SAMPLES;
@property (nonatomic, readonly) uint32_t SAMPLER_BINDING;
@property (nonatomic, readonly) uint32_t PIXEL_PACK_BUFFER;
@property (nonatomic, readonly) uint32_t PIXEL_UNPACK_BUFFER;
@property (nonatomic, readonly) uint32_t PIXEL_PACK_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t PIXEL_UNPACK_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t COPY_READ_BUFFER;
@property (nonatomic, readonly) uint32_t COPY_WRITE_BUFFER;
@property (nonatomic, readonly) uint32_t COPY_READ_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t COPY_WRITE_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t FLOAT_MAT2x3;
@property (nonatomic, readonly) uint32_t FLOAT_MAT2x4;
@property (nonatomic, readonly) uint32_t FLOAT_MAT3x2;
@property (nonatomic, readonly) uint32_t FLOAT_MAT3x4;
@property (nonatomic, readonly) uint32_t FLOAT_MAT4x2;
@property (nonatomic, readonly) uint32_t FLOAT_MAT4x3;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_VEC2;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_VEC3;
@property (nonatomic, readonly) uint32_t UNSIGNED_INT_VEC4;
@property (nonatomic, readonly) uint32_t UNSIGNED_NORMALIZED;
@property (nonatomic, readonly) uint32_t SIGNED_NORMALIZED;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_INTEGER;
@property (nonatomic, readonly) uint32_t VERTEX_ATTRIB_ARRAY_DIVISOR;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_BUFFER_MODE;
@property (nonatomic, readonly) uint32_t MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_VARYINGS;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_BUFFER_START;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_BUFFER_SIZE;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
@property (nonatomic, readonly) uint32_t MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
@property (nonatomic, readonly) uint32_t MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
@property (nonatomic, readonly) uint32_t INTERLEAVED_ATTRIBS;
@property (nonatomic, readonly) uint32_t SEPARATE_ATTRIBS;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_BUFFER;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_PAUSED;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_ACTIVE;
@property (nonatomic, readonly) uint32_t TRANSFORM_FEEDBACK_BINDING;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_RED_SIZE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_DEFAULT;
@property (nonatomic, readonly) uint32_t DEPTH_STENCIL_ATTACHMENT;
@property (nonatomic, readonly) uint32_t DEPTH_STENCIL;
@property (nonatomic, readonly) uint32_t DEPTH24_STENCIL8;
@property (nonatomic, readonly) uint32_t DRAW_FRAMEBUFFER_BINDING;
@property (nonatomic, readonly) uint32_t READ_FRAMEBUFFER;
@property (nonatomic, readonly) uint32_t DRAW_FRAMEBUFFER;
@property (nonatomic, readonly) uint32_t READ_FRAMEBUFFER_BINDING;
@property (nonatomic, readonly) uint32_t RENDERBUFFER_SAMPLES;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
@property (nonatomic, readonly) uint32_t FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
@property (nonatomic, readonly) uint32_t UNIFORM_BUFFER;
@property (nonatomic, readonly) uint32_t UNIFORM_BUFFER_BINDING;
@property (nonatomic, readonly) uint32_t UNIFORM_BUFFER_START;
@property (nonatomic, readonly) uint32_t UNIFORM_BUFFER_SIZE;
@property (nonatomic, readonly) uint32_t MAX_VERTEX_UNIFORM_BLOCKS;
@property (nonatomic, readonly) uint32_t MAX_FRAGMENT_UNIFORM_BLOCKS;
@property (nonatomic, readonly) uint32_t MAX_COMBINED_UNIFORM_BLOCKS;
@property (nonatomic, readonly) uint32_t MAX_UNIFORM_BUFFER_BINDINGS;
@property (nonatomic, readonly) uint32_t MAX_UNIFORM_BLOCK_SIZE;
@property (nonatomic, readonly) uint32_t MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
@property (nonatomic, readonly) uint32_t MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
@property (nonatomic, readonly) uint32_t UNIFORM_BUFFER_OFFSET_ALIGNMENT;
@property (nonatomic, readonly) uint32_t ACTIVE_UNIFORM_BLOCKS;
@property (nonatomic, readonly) uint32_t UNIFORM_TYPE;
@property (nonatomic, readonly) uint32_t UNIFORM_SIZE;
@property (nonatomic, readonly) uint32_t UNIFORM_BLOCK_INDEX;
@property (nonatomic, readonly) uint32_t UNIFORM_OFFSET;
@property (nonatomic, readonly) uint32_t UNIFORM_ARRAY_STRIDE;
@property (nonatomic, readonly) uint32_t UNIFORM_MATRIX_STRIDE;
@property (nonatomic, readonly) uint32_t UNIFORM_IS_ROW_MAJOR;
@property (nonatomic, readonly) uint32_t UNIFORM_BLOCK_BINDING;
@property (nonatomic, readonly) uint32_t UNIFORM_BLOCK_DATA_SIZE;
@property (nonatomic, readonly) uint32_t UNIFORM_BLOCK_ACTIVE_UNIFORMS;
@property (nonatomic, readonly) uint32_t UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
@property (nonatomic, readonly) uint32_t UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
@property (nonatomic, readonly) uint32_t UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
@property (nonatomic, readonly) uint32_t OBJECT_TYPE;
@property (nonatomic, readonly) uint32_t SYNC_CONDITION;
@property (nonatomic, readonly) uint32_t SYNC_STATUS;
@property (nonatomic, readonly) uint32_t SYNC_FLAGS;
@property (nonatomic, readonly) uint32_t SYNC_FENCE;
@property (nonatomic, readonly) uint32_t SYNC_GPU_COMMANDS_COMPLETE;
@property (nonatomic, readonly) uint32_t UNSIGNALED;
@property (nonatomic, readonly) uint32_t SIGNALED;
@property (nonatomic, readonly) uint32_t ALREADY_SIGNALED;
@property (nonatomic, readonly) uint32_t TIMEOUT_EXPIRED;
@property (nonatomic, readonly) uint32_t CONDITION_SATISFIED;
@property (nonatomic, readonly) uint32_t WAIT_FAILED;
@property (nonatomic, readonly) uint32_t SYNC_FLUSH_COMMANDS_BIT;
@property (nonatomic, readonly) uint32_t COLOR;
@property (nonatomic, readonly) uint32_t DEPTH;
@property (nonatomic, readonly) uint32_t STENCIL;
@property (nonatomic, readonly) uint32_t MIN;
@property (nonatomic, readonly) uint32_t MAX;
@property (nonatomic, readonly) uint32_t DEPTH_COMPONENT24;
@property (nonatomic, readonly) uint32_t STREAM_READ;
@property (nonatomic, readonly) uint32_t STREAM_COPY;
@property (nonatomic, readonly) uint32_t STATIC_READ;
@property (nonatomic, readonly) uint32_t STATIC_COPY;
@property (nonatomic, readonly) uint32_t DYNAMIC_READ;
@property (nonatomic, readonly) uint32_t DYNAMIC_COPY;
@property (nonatomic, readonly) uint32_t DEPTH_COMPONENT32F;
@property (nonatomic, readonly) uint32_t DEPTH32F_STENCIL8;
@property (nonatomic, readonly) NSInteger INVALID_INDEX;
@property (nonatomic, readonly) uint64_t TIMEOUT_IGNORED;
@property (nonatomic, readonly) uint32_t MAX_CLIENT_WAIT_TIMEOUT_WEBGL;
@end


SWIFT_CLASS_NAMED("TNSWebGLActiveInfo")
@interface TNSWebGLActiveInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) int32_t size;
@property (nonatomic, readonly) uint32_t type;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name size:(int32_t)size type:(uint32_t)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("TNSWebGLShaderPrecisionFormat")
@interface TNSWebGLShaderPrecisionFormat : NSObject
@property (nonatomic, readonly) int32_t rangeMin;
@property (nonatomic, readonly) int32_t rangeMax;
@property (nonatomic, readonly) int32_t precision;
- (nonnull instancetype)initWithRangeMin:(int32_t)rangeMin rangeMax:(int32_t)rangeMax precision:(int32_t)precision OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("TNS_ANGLE_instanced_arrays")
@interface TNS_ANGLE_instanced_arrays : NSObject
@property (nonatomic, readonly) int32_t VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE;
- (nonnull instancetype)initWithContext:(TNSWebGLRenderingContext * _Nonnull)context OBJC_DESIGNATED_INITIALIZER;
- (void)drawArraysInstancedANGLEWithMode:(int32_t)mode first:(int32_t)first count:(int32_t)count primcount:(int32_t)primcount;
- (void)drawElementsInstancedANGLEWithMode:(int32_t)mode count:(int32_t)count type:(int32_t)type offset:(int32_t)offset primcount:(int32_t)primcount;
- (void)vertexAttribDivisorANGLEWithIndex:(int32_t)index divisor:(int32_t)divisor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("TNS_EXT_blend_minmax")
@interface TNS_EXT_blend_minmax : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t MIN_EXT;
@property (nonatomic, readonly) int32_t MAX_EXT;
@end


SWIFT_CLASS_NAMED("TNS_EXT_color_buffer_float")
@interface TNS_EXT_color_buffer_float : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t R16F;
@property (nonatomic, readonly) int32_t RG16F;
@property (nonatomic, readonly) int32_t RGB16F;
@property (nonatomic, readonly) int32_t R32F;
@property (nonatomic, readonly) int32_t RG32F;
@property (nonatomic, readonly) int32_t RGBA32F;
@property (nonatomic, readonly) int32_t R11F_G11F_B10F;
@end


SWIFT_CLASS_NAMED("TNS_EXT_color_buffer_half_float")
@interface TNS_EXT_color_buffer_half_float : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t RGBA16F_EXT;
@property (nonatomic, readonly) int32_t RGB16F_EXT;
@property (nonatomic, readonly) int32_t FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT;
@property (nonatomic, readonly) int32_t UNSIGNED_NORMALIZED_EXT;
@end


SWIFT_CLASS_NAMED("TNS_EXT_sRGB")
@interface TNS_EXT_sRGB : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t SRGB_EXT;
@property (nonatomic, readonly) int32_t SRGB_ALPHA_EXT;
@property (nonatomic, readonly) int32_t SRGB8_ALPHA8_EXT;
@property (nonatomic, readonly) int32_t FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT;
@end


SWIFT_CLASS_NAMED("TNS_EXT_shader_texture_lod")
@interface TNS_EXT_shader_texture_lod : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNS_EXT_texture_filter_anisotropic")
@interface TNS_EXT_texture_filter_anisotropic : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t MAX_TEXTURE_MAX_ANISOTROPY_EXT;
@property (nonatomic, readonly) int32_t TEXTURE_MAX_ANISOTROPY_EXT;
@end


SWIFT_CLASS_NAMED("TNS_OES_element_index_uint")
@interface TNS_OES_element_index_uint : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t UNSIGNED_INT;
@end


SWIFT_CLASS_NAMED("TNS_OES_fbo_render_mipmap")
@interface TNS_OES_fbo_render_mipmap : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNS_OES_standard_derivatives")
@interface TNS_OES_standard_derivatives : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNS_OES_texture_float")
@interface TNS_OES_texture_float : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNS_OES_texture_float_linear")
@interface TNS_OES_texture_float_linear : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNS_OES_texture_half_float")
@interface TNS_OES_texture_half_float : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t HALF_FLOAT_OES;
@end


SWIFT_CLASS_NAMED("TNS_OES_texture_half_float_linear")
@interface TNS_OES_texture_half_float_linear : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNS_OES_vertex_array_object")
@interface TNS_OES_vertex_array_object : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t VERTEX_ARRAY_BINDING_OES;
- (uint32_t)createVertexArrayOES SWIFT_WARN_UNUSED_RESULT;
- (void)deleteVertexArrayOESWithArrayObject:(uint32_t)arrayObject;
- (BOOL)isVertexArrayOESWithArrayObject:(uint32_t)arrayObject SWIFT_WARN_UNUSED_RESULT;
- (void)bindVertexArrayOESWithArrayObject:(uint32_t)arrayObject;
@end


SWIFT_CLASS_NAMED("TNS_WEBGL_color_buffer_float")
@interface TNS_WEBGL_color_buffer_float : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t RGBA32F_EXT;
@property (nonatomic, readonly) int32_t RGB32F_EXT;
@property (nonatomic, readonly) int32_t FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT;
@property (nonatomic, readonly) int32_t UNSIGNED_NORMALIZED_EXT;
@end


SWIFT_CLASS_NAMED("TNS_WEBGL_compressed_texture_etc")
@interface TNS_WEBGL_compressed_texture_etc : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t COMPRESSED_R11_EAC;
@property (nonatomic, readonly) int32_t COMPRESSED_SIGNED_R11_EAC;
@property (nonatomic, readonly) int32_t COMPRESSED_RG11_EAC;
@property (nonatomic, readonly) int32_t COMPRESSED_SIGNED_RG11_EAC;
@property (nonatomic, readonly) int32_t COMPRESSED_RGB8_ETC2;
@property (nonatomic, readonly) int32_t COMPRESSED_RGBA8_ETC2_EAC;
@property (nonatomic, readonly) int32_t COMPRESSED_SRGB8_ETC2;
@property (nonatomic, readonly) int32_t COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;
@property (nonatomic, readonly) int32_t COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;
@property (nonatomic, readonly) int32_t COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;
@end


SWIFT_CLASS_NAMED("TNS_WEBGL_compressed_texture_etc1")
@interface TNS_WEBGL_compressed_texture_etc1 : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t COMPRESSED_RGB_ETC1_WEBGL;
@end


SWIFT_CLASS_NAMED("TNS_WEBGL_compressed_texture_pvrtc")
@interface TNS_WEBGL_compressed_texture_pvrtc : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
@property (nonatomic, readonly) int32_t COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
@property (nonatomic, readonly) int32_t COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
@property (nonatomic, readonly) int32_t COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
@end


SWIFT_CLASS_NAMED("TNS_WEBGL_depth_texture")
@interface TNS_WEBGL_depth_texture : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) int32_t UNSIGNED_INT_24_8_WEBGL;
@end


SWIFT_CLASS_NAMED("TNS_WEBGL_draw_buffers")
@interface TNS_WEBGL_draw_buffers : NSObject
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT0_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT1_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT2_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT3_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT4_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT5_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT6_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT7_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT8_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT9_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT10_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT11_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT12_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT13_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT14_WEBGL;
@property (nonatomic, readonly) int32_t COLOR_ATTACHMENT15_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER0_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER1_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER2_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER3_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER4_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER5_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER6_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER7_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER8_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER9_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER10_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER11_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER12_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER13_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER14_WEBGL;
@property (nonatomic, readonly) int32_t DRAW_BUFFER15_WEBGL;
@property (nonatomic, readonly) int32_t MAX_COLOR_ATTACHMENTS_WEBGL;
@property (nonatomic, readonly) int32_t MAX_DRAW_BUFFERS_WEBGL;
- (void)drawBuffersWEBGLWithBuffers:(NSArray<NSNumber *> * _Nonnull)buffers;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("TNS_WEBGL_lose_context")
@interface TNS_WEBGL_lose_context : NSObject
- (nonnull instancetype)initWithCanvas:(TNSCanvas * _Nonnull)canvas OBJC_DESIGNATED_INITIALIZER;
- (void)loseContext;
- (void)restoreContext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVPlayer;
@class AVPlayerItemVideoOutput;

SWIFT_CLASS_NAMED("Utils")
@interface Utils : NSObject
+ (CVOpenGLESTextureCacheRef _Nullable)createTextureCache:(TNSWebGLRenderingContext * _Nonnull)context SWIFT_WARN_UNUSED_RESULT;
+ (CVOpenGLESTextureRef _Nullable)createImage:(CVOpenGLESTextureCacheRef _Nonnull)texturecache :(CVImageBufferRef _Nonnull)buffer :(CFDictionaryRef _Nullable)textureAttributes :(GLenum)target :(GLint)internalFormat :(GLsizei)width :(GLsizei)height :(GLenum)format :(GLenum)type :(NSInteger)planeIndex SWIFT_WARN_UNUSED_RESULT;
+ (TNSRender * _Nonnull)setupRender SWIFT_WARN_UNUSED_RESULT;
+ (void)drawFrame:(AVPlayer * _Nonnull)player :(AVPlayerItemVideoOutput * _Nonnull)output :(CGSize)videoSize :(TNSRender * _Nonnull)render :(int32_t)internalFormat :(int32_t)format :(BOOL)flipYWebGL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
