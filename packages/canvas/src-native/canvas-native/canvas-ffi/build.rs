extern crate cbindgen;

use std::{env, fmt};
use std::borrow::Borrow;
use std::fmt::{Display, Formatter};
use std::path::PathBuf;

use cbindgen::{Config, Language, ParseConfig, ParseExpandConfig};

fn main() {
    println!("cargo:rerun-if-changed=build.rs");

    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();

    let package_name = env::var("CARGO_PKG_NAME").unwrap();
    let output_file = target_dir()
        .join(format!("{}.h", package_name))
        .display()
        .to_string();

    let mut parse = ParseConfig::default();
    parse.parse_deps = true;
    parse.include = Some(vec!["canvas-core".to_string()]);
    parse.expand.crates.push("canvas-ffi".to_string());
    let config = Config {
        autogen_warning: Some(
            "/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */"
                .to_string(),
        ),
        namespace: Some("ffi".to_string()),
        include_guard: Some("CBINDGEN_BINDINGS_H".to_string()),

        // defines: HashMap::from([
        //     ("target_os = ios".into(), "TARGET_OS_IOS".into()),
        //     ("target_os = macos".into(), "TARGET_OS_MACOS".into()),
        //     ("target_os = android".into(), "TARGET_OS_ANDROID".into()),
        // ]),
        parse,
        language: Language::C,
        ..Default::default()
    };

    cbindgen::generate_with_config(&crate_dir, config)
        .unwrap()
        .write_to_file(&output_file);
}

fn target_dir() -> PathBuf {
    if let Ok(target) = env::var("CARGO_TARGET_DIR") {
        PathBuf::from(target)
    } else {
        PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap()).join("target")
    }
}
